                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module W5500
                                      6 	.optsdcc -mmcs51 --model-medium
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __spigeneric_frame_end
                                     12 	.globl __spigeneric_frame_start
                                     13 	.globl __spigeneric_spit_byte
                                     14 	.globl _CY
                                     15 	.globl _AC
                                     16 	.globl _F0
                                     17 	.globl _RS1
                                     18 	.globl _RS0
                                     19 	.globl _OV
                                     20 	.globl _F1
                                     21 	.globl _P
                                     22 	.globl _PS
                                     23 	.globl _PT1
                                     24 	.globl _PX1
                                     25 	.globl _PT0
                                     26 	.globl _PX0
                                     27 	.globl _RD
                                     28 	.globl _WR
                                     29 	.globl _T1
                                     30 	.globl _T0
                                     31 	.globl _INT1
                                     32 	.globl _INT0
                                     33 	.globl _TXD
                                     34 	.globl _RXD
                                     35 	.globl _P3_7
                                     36 	.globl _P3_6
                                     37 	.globl _P3_5
                                     38 	.globl _P3_4
                                     39 	.globl _P3_3
                                     40 	.globl _P3_2
                                     41 	.globl _P3_1
                                     42 	.globl _P3_0
                                     43 	.globl _EA
                                     44 	.globl _ES
                                     45 	.globl _ET1
                                     46 	.globl _EX1
                                     47 	.globl _ET0
                                     48 	.globl _EX0
                                     49 	.globl _P2_7
                                     50 	.globl _P2_6
                                     51 	.globl _P2_5
                                     52 	.globl _P2_4
                                     53 	.globl _P2_3
                                     54 	.globl _P2_2
                                     55 	.globl _P2_1
                                     56 	.globl _P2_0
                                     57 	.globl _SM0
                                     58 	.globl _SM1
                                     59 	.globl _SM2
                                     60 	.globl _REN
                                     61 	.globl _TB8
                                     62 	.globl _RB8
                                     63 	.globl _TI
                                     64 	.globl _RI
                                     65 	.globl _P1_7
                                     66 	.globl _P1_6
                                     67 	.globl _P1_5
                                     68 	.globl _P1_4
                                     69 	.globl _P1_3
                                     70 	.globl _P1_2
                                     71 	.globl _P1_1
                                     72 	.globl _P1_0
                                     73 	.globl _TF1
                                     74 	.globl _TR1
                                     75 	.globl _TF0
                                     76 	.globl _TR0
                                     77 	.globl _IE1
                                     78 	.globl _IT1
                                     79 	.globl _IE0
                                     80 	.globl _IT0
                                     81 	.globl _P0_7
                                     82 	.globl _P0_6
                                     83 	.globl _P0_5
                                     84 	.globl _P0_4
                                     85 	.globl _P0_3
                                     86 	.globl _P0_2
                                     87 	.globl _P0_1
                                     88 	.globl _P0_0
                                     89 	.globl _B
                                     90 	.globl _ACC
                                     91 	.globl _PSW
                                     92 	.globl _IP
                                     93 	.globl _P3
                                     94 	.globl _IE
                                     95 	.globl _P2
                                     96 	.globl _SBUF
                                     97 	.globl _SCON
                                     98 	.globl _P1
                                     99 	.globl _TH1
                                    100 	.globl _TH0
                                    101 	.globl _TL1
                                    102 	.globl _TL0
                                    103 	.globl _TMOD
                                    104 	.globl _TCON
                                    105 	.globl _PCON
                                    106 	.globl _DPH
                                    107 	.globl _DPL
                                    108 	.globl _SP
                                    109 	.globl _P0
                                    110 	.globl __w5500_write_PARM_4
                                    111 	.globl __w5500_write_PARM_3
                                    112 	.globl __w5500_write_PARM_2
                                    113 	.globl __w5500_read_PARM_4
                                    114 	.globl __w5500_read_PARM_3
                                    115 	.globl __w5500_read_PARM_2
                                    116 	.globl __w5500_writeto_PARM_3
                                    117 	.globl __w5500_writeto_PARM_2
                                    118 	.globl __w5500_set_destinationip_PARM_2
                                    119 	.globl __w5500_set_remoteport_PARM_2
                                    120 	.globl __w5500_set_sourceport_PARM_2
                                    121 	.globl __w5500_input_buffer
                                    122 	.globl _small_buffer
                                    123 	.globl __w5500_open
                                    124 	.globl __w5500_reset
                                    125 	.globl __w5500_close
                                    126 	.globl __w5500_discon
                                    127 	.globl __w5500_set_udp
                                    128 	.globl __w5500_set_tcp
                                    129 	.globl __w5500_get_IMR
                                    130 	.globl __w5500_get_SIR
                                    131 	.globl __w5500_set_IMR
                                    132 	.globl __w5500_get_SIMR
                                    133 	.globl __w5500_clear_SNIR
                                    134 	.globl __w5500_get_SNIR
                                    135 	.globl __w5500_get_status
                                    136 	.globl __w5500_listen
                                    137 	.globl __w5500_set_sourceport
                                    138 	.globl __w5500_set_remoteport
                                    139 	.globl __w5500_set_destinationip
                                    140 	.globl __w5500_writeto
                                    141 	.globl __w5500_bytesinbuffer
                                    142 	.globl __w5500_readchar
                                    143 	.globl __w5500_send
                                    144 	.globl __w5500_get_version
                                    145 	.globl __w5500_get_phyconfig
                                    146 	.globl __w5500_read
                                    147 	.globl __w5500_write
                                    148 ;--------------------------------------------------------
                                    149 ; special function registers
                                    150 ;--------------------------------------------------------
                                    151 	.area RSEG    (ABS,DATA)
      000000                        152 	.org 0x0000
                           000080   153 _P0	=	0x0080
                           000081   154 _SP	=	0x0081
                           000082   155 _DPL	=	0x0082
                           000083   156 _DPH	=	0x0083
                           000087   157 _PCON	=	0x0087
                           000088   158 _TCON	=	0x0088
                           000089   159 _TMOD	=	0x0089
                           00008A   160 _TL0	=	0x008a
                           00008B   161 _TL1	=	0x008b
                           00008C   162 _TH0	=	0x008c
                           00008D   163 _TH1	=	0x008d
                           000090   164 _P1	=	0x0090
                           000098   165 _SCON	=	0x0098
                           000099   166 _SBUF	=	0x0099
                           0000A0   167 _P2	=	0x00a0
                           0000A8   168 _IE	=	0x00a8
                           0000B0   169 _P3	=	0x00b0
                           0000B8   170 _IP	=	0x00b8
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000F0   173 _B	=	0x00f0
                                    174 ;--------------------------------------------------------
                                    175 ; special function bits
                                    176 ;--------------------------------------------------------
                                    177 	.area RSEG    (ABS,DATA)
      000000                        178 	.org 0x0000
                           000080   179 _P0_0	=	0x0080
                           000081   180 _P0_1	=	0x0081
                           000082   181 _P0_2	=	0x0082
                           000083   182 _P0_3	=	0x0083
                           000084   183 _P0_4	=	0x0084
                           000085   184 _P0_5	=	0x0085
                           000086   185 _P0_6	=	0x0086
                           000087   186 _P0_7	=	0x0087
                           000088   187 _IT0	=	0x0088
                           000089   188 _IE0	=	0x0089
                           00008A   189 _IT1	=	0x008a
                           00008B   190 _IE1	=	0x008b
                           00008C   191 _TR0	=	0x008c
                           00008D   192 _TF0	=	0x008d
                           00008E   193 _TR1	=	0x008e
                           00008F   194 _TF1	=	0x008f
                           000090   195 _P1_0	=	0x0090
                           000091   196 _P1_1	=	0x0091
                           000092   197 _P1_2	=	0x0092
                           000093   198 _P1_3	=	0x0093
                           000094   199 _P1_4	=	0x0094
                           000095   200 _P1_5	=	0x0095
                           000096   201 _P1_6	=	0x0096
                           000097   202 _P1_7	=	0x0097
                           000098   203 _RI	=	0x0098
                           000099   204 _TI	=	0x0099
                           00009A   205 _RB8	=	0x009a
                           00009B   206 _TB8	=	0x009b
                           00009C   207 _REN	=	0x009c
                           00009D   208 _SM2	=	0x009d
                           00009E   209 _SM1	=	0x009e
                           00009F   210 _SM0	=	0x009f
                           0000A0   211 _P2_0	=	0x00a0
                           0000A1   212 _P2_1	=	0x00a1
                           0000A2   213 _P2_2	=	0x00a2
                           0000A3   214 _P2_3	=	0x00a3
                           0000A4   215 _P2_4	=	0x00a4
                           0000A5   216 _P2_5	=	0x00a5
                           0000A6   217 _P2_6	=	0x00a6
                           0000A7   218 _P2_7	=	0x00a7
                           0000A8   219 _EX0	=	0x00a8
                           0000A9   220 _ET0	=	0x00a9
                           0000AA   221 _EX1	=	0x00aa
                           0000AB   222 _ET1	=	0x00ab
                           0000AC   223 _ES	=	0x00ac
                           0000AF   224 _EA	=	0x00af
                           0000B0   225 _P3_0	=	0x00b0
                           0000B1   226 _P3_1	=	0x00b1
                           0000B2   227 _P3_2	=	0x00b2
                           0000B3   228 _P3_3	=	0x00b3
                           0000B4   229 _P3_4	=	0x00b4
                           0000B5   230 _P3_5	=	0x00b5
                           0000B6   231 _P3_6	=	0x00b6
                           0000B7   232 _P3_7	=	0x00b7
                           0000B0   233 _RXD	=	0x00b0
                           0000B1   234 _TXD	=	0x00b1
                           0000B2   235 _INT0	=	0x00b2
                           0000B3   236 _INT1	=	0x00b3
                           0000B4   237 _T0	=	0x00b4
                           0000B5   238 _T1	=	0x00b5
                           0000B6   239 _WR	=	0x00b6
                           0000B7   240 _RD	=	0x00b7
                           0000B8   241 _PX0	=	0x00b8
                           0000B9   242 _PT0	=	0x00b9
                           0000BA   243 _PX1	=	0x00ba
                           0000BB   244 _PT1	=	0x00bb
                           0000BC   245 _PS	=	0x00bc
                           0000D0   246 _P	=	0x00d0
                           0000D1   247 _F1	=	0x00d1
                           0000D2   248 _OV	=	0x00d2
                           0000D3   249 _RS0	=	0x00d3
                           0000D4   250 _RS1	=	0x00d4
                           0000D5   251 _F0	=	0x00d5
                           0000D6   252 _AC	=	0x00d6
                           0000D7   253 _CY	=	0x00d7
                                    254 ;--------------------------------------------------------
                                    255 ; overlayable register banks
                                    256 ;--------------------------------------------------------
                                    257 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        258 	.ds 8
                                    259 ;--------------------------------------------------------
                                    260 ; internal ram data
                                    261 ;--------------------------------------------------------
                                    262 	.area DSEG    (DATA)
      000008                        263 __w5500_read_sloc0_1_0:
      000008                        264 	.ds 2
      00000A                        265 __w5500_write_sloc0_1_0:
      00000A                        266 	.ds 2
                                    267 ;--------------------------------------------------------
                                    268 ; overlayable items in internal ram 
                                    269 ;--------------------------------------------------------
                                    270 ;--------------------------------------------------------
                                    271 ; indirectly addressable internal ram data
                                    272 ;--------------------------------------------------------
                                    273 	.area ISEG    (DATA)
                                    274 ;--------------------------------------------------------
                                    275 ; absolute internal ram data
                                    276 ;--------------------------------------------------------
                                    277 	.area IABS    (ABS,DATA)
                                    278 	.area IABS    (ABS,DATA)
                                    279 ;--------------------------------------------------------
                                    280 ; bit data
                                    281 ;--------------------------------------------------------
                                    282 	.area BSEG    (BIT)
                                    283 ;--------------------------------------------------------
                                    284 ; paged external ram data
                                    285 ;--------------------------------------------------------
                                    286 	.area PSEG    (PAG,XDATA)
      0000BB                        287 _small_buffer::
      0000BB                        288 	.ds 2
      0000BD                        289 __w5500_input_buffer::
      0000BD                        290 	.ds 33
      0000DE                        291 __w5500_set_sourceport_PARM_2:
      0000DE                        292 	.ds 2
      0000E0                        293 __w5500_set_remoteport_PARM_2:
      0000E0                        294 	.ds 2
      0000E2                        295 __w5500_set_destinationip_PARM_2:
      0000E2                        296 	.ds 3
      0000E5                        297 __w5500_writeto_PARM_2:
      0000E5                        298 	.ds 3
      0000E8                        299 __w5500_writeto_PARM_3:
      0000E8                        300 	.ds 1
      0000E9                        301 __w5500_readchar_val_65536_61:
      0000E9                        302 	.ds 1
      0000EA                        303 __w5500_read_PARM_2:
      0000EA                        304 	.ds 1
      0000EB                        305 __w5500_read_PARM_3:
      0000EB                        306 	.ds 3
      0000EE                        307 __w5500_read_PARM_4:
      0000EE                        308 	.ds 2
      0000F0                        309 __w5500_write_PARM_2:
      0000F0                        310 	.ds 1
      0000F1                        311 __w5500_write_PARM_3:
      0000F1                        312 	.ds 3
      0000F4                        313 __w5500_write_PARM_4:
      0000F4                        314 	.ds 2
                                    315 ;--------------------------------------------------------
                                    316 ; external ram data
                                    317 ;--------------------------------------------------------
                                    318 	.area XSEG    (XDATA)
                                    319 ;--------------------------------------------------------
                                    320 ; absolute external ram data
                                    321 ;--------------------------------------------------------
                                    322 	.area XABS    (ABS,XDATA)
                                    323 ;--------------------------------------------------------
                                    324 ; external initialized ram data
                                    325 ;--------------------------------------------------------
                                    326 	.area XISEG   (XDATA)
                                    327 	.area HOME    (CODE)
                                    328 	.area GSINIT0 (CODE)
                                    329 	.area GSINIT1 (CODE)
                                    330 	.area GSINIT2 (CODE)
                                    331 	.area GSINIT3 (CODE)
                                    332 	.area GSINIT4 (CODE)
                                    333 	.area GSINIT5 (CODE)
                                    334 	.area GSINIT  (CODE)
                                    335 	.area GSFINAL (CODE)
                                    336 	.area CSEG    (CODE)
                                    337 ;--------------------------------------------------------
                                    338 ; global & static initialisations
                                    339 ;--------------------------------------------------------
                                    340 	.area HOME    (CODE)
                                    341 	.area GSINIT  (CODE)
                                    342 	.area GSFINAL (CODE)
                                    343 	.area GSINIT  (CODE)
                                    344 ;--------------------------------------------------------
                                    345 ; Home
                                    346 ;--------------------------------------------------------
                                    347 	.area HOME    (CODE)
                                    348 	.area HOME    (CODE)
                                    349 ;--------------------------------------------------------
                                    350 ; code
                                    351 ;--------------------------------------------------------
                                    352 	.area CSEG    (CODE)
                                    353 ;------------------------------------------------------------
                                    354 ;Allocation info for local variables in function '_w5500_open'
                                    355 ;------------------------------------------------------------
                                    356 ;	W5500.c:6: void _w5500_open(unsigned char socket) {
                                    357 ;	-----------------------------------------
                                    358 ;	 function _w5500_open
                                    359 ;	-----------------------------------------
      000DB4                        360 __w5500_open:
                           000007   361 	ar7 = 0x07
                           000006   362 	ar6 = 0x06
                           000005   363 	ar5 = 0x05
                           000004   364 	ar4 = 0x04
                           000003   365 	ar3 = 0x03
                           000002   366 	ar2 = 0x02
                           000001   367 	ar1 = 0x01
                           000000   368 	ar0 = 0x00
      000DB4 AF 82            [24]  369 	mov	r7,dpl
                                    370 ;	W5500.c:7: small_buffer[0] = 0x1;
      000DB6 78 BB            [12]  371 	mov	r0,#_small_buffer
      000DB8 74 01            [12]  372 	mov	a,#0x01
      000DBA F2               [24]  373 	movx	@r0,a
                                    374 ;	W5500.c:8: _w5500_write(SOCKETN_COMMAND, (socket * 4) + 1, small_buffer, 1);
      000DBB EF               [12]  375 	mov	a,r7
      000DBC 2F               [12]  376 	add	a,r7
      000DBD 25 E0            [12]  377 	add	a,acc
      000DBF 78 F0            [12]  378 	mov	r0,#__w5500_write_PARM_2
      000DC1 04               [12]  379 	inc	a
      000DC2 F2               [24]  380 	movx	@r0,a
      000DC3 78 F1            [12]  381 	mov	r0,#__w5500_write_PARM_3
      000DC5 74 BB            [12]  382 	mov	a,#_small_buffer
      000DC7 F2               [24]  383 	movx	@r0,a
      000DC8 08               [12]  384 	inc	r0
      000DC9 E4               [12]  385 	clr	a
      000DCA F2               [24]  386 	movx	@r0,a
      000DCB 08               [12]  387 	inc	r0
      000DCC 74 60            [12]  388 	mov	a,#0x60
      000DCE F2               [24]  389 	movx	@r0,a
      000DCF 78 F4            [12]  390 	mov	r0,#__w5500_write_PARM_4
      000DD1 74 01            [12]  391 	mov	a,#0x01
      000DD3 F2               [24]  392 	movx	@r0,a
      000DD4 08               [12]  393 	inc	r0
      000DD5 E4               [12]  394 	clr	a
      000DD6 F2               [24]  395 	movx	@r0,a
      000DD7 90 00 01         [24]  396 	mov	dptr,#0x0001
                                    397 ;	W5500.c:9: }
      000DDA 02 13 50         [24]  398 	ljmp	__w5500_write
                                    399 ;------------------------------------------------------------
                                    400 ;Allocation info for local variables in function '_w5500_reset'
                                    401 ;------------------------------------------------------------
                                    402 ;	W5500.c:11: void _w5500_reset() {
                                    403 ;	-----------------------------------------
                                    404 ;	 function _w5500_reset
                                    405 ;	-----------------------------------------
      000DDD                        406 __w5500_reset:
                                    407 ;	W5500.c:12: small_buffer[0] = 0x80;
      000DDD 78 BB            [12]  408 	mov	r0,#_small_buffer
      000DDF 74 80            [12]  409 	mov	a,#0x80
      000DE1 F2               [24]  410 	movx	@r0,a
                                    411 ;	W5500.c:13: _w5500_write(0x00, 0x00, small_buffer, 1);
      000DE2 78 F1            [12]  412 	mov	r0,#__w5500_write_PARM_3
      000DE4 74 BB            [12]  413 	mov	a,#_small_buffer
      000DE6 F2               [24]  414 	movx	@r0,a
      000DE7 08               [12]  415 	inc	r0
      000DE8 E4               [12]  416 	clr	a
      000DE9 F2               [24]  417 	movx	@r0,a
      000DEA 08               [12]  418 	inc	r0
      000DEB 74 60            [12]  419 	mov	a,#0x60
      000DED F2               [24]  420 	movx	@r0,a
      000DEE 78 F0            [12]  421 	mov	r0,#__w5500_write_PARM_2
      000DF0 E4               [12]  422 	clr	a
      000DF1 F2               [24]  423 	movx	@r0,a
      000DF2 78 F4            [12]  424 	mov	r0,#__w5500_write_PARM_4
      000DF4 04               [12]  425 	inc	a
      000DF5 F2               [24]  426 	movx	@r0,a
      000DF6 08               [12]  427 	inc	r0
      000DF7 E4               [12]  428 	clr	a
      000DF8 F2               [24]  429 	movx	@r0,a
      000DF9 90 00 00         [24]  430 	mov	dptr,#0x0000
                                    431 ;	W5500.c:14: }
      000DFC 02 13 50         [24]  432 	ljmp	__w5500_write
                                    433 ;------------------------------------------------------------
                                    434 ;Allocation info for local variables in function '_w5500_close'
                                    435 ;------------------------------------------------------------
                                    436 ;	W5500.c:16: void _w5500_close(unsigned char socket) {
                                    437 ;	-----------------------------------------
                                    438 ;	 function _w5500_close
                                    439 ;	-----------------------------------------
      000DFF                        440 __w5500_close:
      000DFF AF 82            [24]  441 	mov	r7,dpl
                                    442 ;	W5500.c:17: small_buffer[0] = 0x10;
      000E01 78 BB            [12]  443 	mov	r0,#_small_buffer
      000E03 74 10            [12]  444 	mov	a,#0x10
      000E05 F2               [24]  445 	movx	@r0,a
                                    446 ;	W5500.c:18: _w5500_write(SOCKETN_COMMAND, (socket * 4) + 1, small_buffer, 1);
      000E06 EF               [12]  447 	mov	a,r7
      000E07 2F               [12]  448 	add	a,r7
      000E08 25 E0            [12]  449 	add	a,acc
      000E0A 78 F0            [12]  450 	mov	r0,#__w5500_write_PARM_2
      000E0C 04               [12]  451 	inc	a
      000E0D F2               [24]  452 	movx	@r0,a
      000E0E 78 F1            [12]  453 	mov	r0,#__w5500_write_PARM_3
      000E10 74 BB            [12]  454 	mov	a,#_small_buffer
      000E12 F2               [24]  455 	movx	@r0,a
      000E13 08               [12]  456 	inc	r0
      000E14 E4               [12]  457 	clr	a
      000E15 F2               [24]  458 	movx	@r0,a
      000E16 08               [12]  459 	inc	r0
      000E17 74 60            [12]  460 	mov	a,#0x60
      000E19 F2               [24]  461 	movx	@r0,a
      000E1A 78 F4            [12]  462 	mov	r0,#__w5500_write_PARM_4
      000E1C 74 01            [12]  463 	mov	a,#0x01
      000E1E F2               [24]  464 	movx	@r0,a
      000E1F 08               [12]  465 	inc	r0
      000E20 E4               [12]  466 	clr	a
      000E21 F2               [24]  467 	movx	@r0,a
      000E22 90 00 01         [24]  468 	mov	dptr,#0x0001
                                    469 ;	W5500.c:19: }
      000E25 02 13 50         [24]  470 	ljmp	__w5500_write
                                    471 ;------------------------------------------------------------
                                    472 ;Allocation info for local variables in function '_w5500_discon'
                                    473 ;------------------------------------------------------------
                                    474 ;	W5500.c:21: void _w5500_discon(unsigned char socket) {
                                    475 ;	-----------------------------------------
                                    476 ;	 function _w5500_discon
                                    477 ;	-----------------------------------------
      000E28                        478 __w5500_discon:
      000E28 AF 82            [24]  479 	mov	r7,dpl
                                    480 ;	W5500.c:22: small_buffer[0] = 0x08;
      000E2A 78 BB            [12]  481 	mov	r0,#_small_buffer
      000E2C 74 08            [12]  482 	mov	a,#0x08
      000E2E F2               [24]  483 	movx	@r0,a
                                    484 ;	W5500.c:23: _w5500_write(SOCKETN_COMMAND, (socket * 4) + 1, small_buffer, 1);
      000E2F EF               [12]  485 	mov	a,r7
      000E30 2F               [12]  486 	add	a,r7
      000E31 25 E0            [12]  487 	add	a,acc
      000E33 78 F0            [12]  488 	mov	r0,#__w5500_write_PARM_2
      000E35 04               [12]  489 	inc	a
      000E36 F2               [24]  490 	movx	@r0,a
      000E37 78 F1            [12]  491 	mov	r0,#__w5500_write_PARM_3
      000E39 74 BB            [12]  492 	mov	a,#_small_buffer
      000E3B F2               [24]  493 	movx	@r0,a
      000E3C 08               [12]  494 	inc	r0
      000E3D E4               [12]  495 	clr	a
      000E3E F2               [24]  496 	movx	@r0,a
      000E3F 08               [12]  497 	inc	r0
      000E40 74 60            [12]  498 	mov	a,#0x60
      000E42 F2               [24]  499 	movx	@r0,a
      000E43 78 F4            [12]  500 	mov	r0,#__w5500_write_PARM_4
      000E45 74 01            [12]  501 	mov	a,#0x01
      000E47 F2               [24]  502 	movx	@r0,a
      000E48 08               [12]  503 	inc	r0
      000E49 E4               [12]  504 	clr	a
      000E4A F2               [24]  505 	movx	@r0,a
      000E4B 90 00 01         [24]  506 	mov	dptr,#0x0001
                                    507 ;	W5500.c:24: }
      000E4E 02 13 50         [24]  508 	ljmp	__w5500_write
                                    509 ;------------------------------------------------------------
                                    510 ;Allocation info for local variables in function '_w5500_set_udp'
                                    511 ;------------------------------------------------------------
                                    512 ;	W5500.c:26: void _w5500_set_udp(unsigned char socket) {
                                    513 ;	-----------------------------------------
                                    514 ;	 function _w5500_set_udp
                                    515 ;	-----------------------------------------
      000E51                        516 __w5500_set_udp:
                                    517 ;	W5500.c:27: _w5500_read(0x00, (socket * 4) + 1, small_buffer, 1);
      000E51 E5 82            [12]  518 	mov	a,dpl
      000E53 25 82            [12]  519 	add	a,dpl
      000E55 25 E0            [12]  520 	add	a,acc
      000E57 FF               [12]  521 	mov	r7,a
      000E58 0F               [12]  522 	inc	r7
      000E59 78 EB            [12]  523 	mov	r0,#__w5500_read_PARM_3
      000E5B 74 BB            [12]  524 	mov	a,#_small_buffer
      000E5D F2               [24]  525 	movx	@r0,a
      000E5E 08               [12]  526 	inc	r0
      000E5F E4               [12]  527 	clr	a
      000E60 F2               [24]  528 	movx	@r0,a
      000E61 08               [12]  529 	inc	r0
      000E62 74 60            [12]  530 	mov	a,#0x60
      000E64 F2               [24]  531 	movx	@r0,a
      000E65 78 EA            [12]  532 	mov	r0,#__w5500_read_PARM_2
      000E67 EF               [12]  533 	mov	a,r7
      000E68 F2               [24]  534 	movx	@r0,a
      000E69 78 EE            [12]  535 	mov	r0,#__w5500_read_PARM_4
      000E6B 74 01            [12]  536 	mov	a,#0x01
      000E6D F2               [24]  537 	movx	@r0,a
      000E6E 08               [12]  538 	inc	r0
      000E6F E4               [12]  539 	clr	a
      000E70 F2               [24]  540 	movx	@r0,a
      000E71 90 00 00         [24]  541 	mov	dptr,#0x0000
      000E74 C0 07            [24]  542 	push	ar7
      000E76 12 12 D8         [24]  543 	lcall	__w5500_read
      000E79 D0 07            [24]  544 	pop	ar7
                                    545 ;	W5500.c:28: small_buffer[0] &= 0xF0;
      000E7B 78 BB            [12]  546 	mov	r0,#_small_buffer
      000E7D E2               [24]  547 	movx	a,@r0
      000E7E FE               [12]  548 	mov	r6,a
      000E7F 53 06 F0         [24]  549 	anl	ar6,#0xf0
      000E82 78 BB            [12]  550 	mov	r0,#_small_buffer
      000E84 EE               [12]  551 	mov	a,r6
      000E85 F2               [24]  552 	movx	@r0,a
                                    553 ;	W5500.c:29: small_buffer[0] |= PROTOCOL_UDP;
      000E86 74 02            [12]  554 	mov	a,#0x02
      000E88 4E               [12]  555 	orl	a,r6
      000E89 78 BB            [12]  556 	mov	r0,#_small_buffer
      000E8B F2               [24]  557 	movx	@r0,a
                                    558 ;	W5500.c:30: _w5500_write(0x00, (socket * 4) + 1, small_buffer, 1);
      000E8C 78 F1            [12]  559 	mov	r0,#__w5500_write_PARM_3
      000E8E 74 BB            [12]  560 	mov	a,#_small_buffer
      000E90 F2               [24]  561 	movx	@r0,a
      000E91 08               [12]  562 	inc	r0
      000E92 E4               [12]  563 	clr	a
      000E93 F2               [24]  564 	movx	@r0,a
      000E94 08               [12]  565 	inc	r0
      000E95 74 60            [12]  566 	mov	a,#0x60
      000E97 F2               [24]  567 	movx	@r0,a
      000E98 78 F0            [12]  568 	mov	r0,#__w5500_write_PARM_2
      000E9A EF               [12]  569 	mov	a,r7
      000E9B F2               [24]  570 	movx	@r0,a
      000E9C 78 F4            [12]  571 	mov	r0,#__w5500_write_PARM_4
      000E9E 74 01            [12]  572 	mov	a,#0x01
      000EA0 F2               [24]  573 	movx	@r0,a
      000EA1 08               [12]  574 	inc	r0
      000EA2 E4               [12]  575 	clr	a
      000EA3 F2               [24]  576 	movx	@r0,a
      000EA4 90 00 00         [24]  577 	mov	dptr,#0x0000
                                    578 ;	W5500.c:31: }
      000EA7 02 13 50         [24]  579 	ljmp	__w5500_write
                                    580 ;------------------------------------------------------------
                                    581 ;Allocation info for local variables in function '_w5500_set_tcp'
                                    582 ;------------------------------------------------------------
                                    583 ;	W5500.c:33: void _w5500_set_tcp(unsigned char socket) {
                                    584 ;	-----------------------------------------
                                    585 ;	 function _w5500_set_tcp
                                    586 ;	-----------------------------------------
      000EAA                        587 __w5500_set_tcp:
                                    588 ;	W5500.c:34: _w5500_read(0x00, (socket * 4) + 1, small_buffer, 1);
      000EAA E5 82            [12]  589 	mov	a,dpl
      000EAC 25 82            [12]  590 	add	a,dpl
      000EAE 25 E0            [12]  591 	add	a,acc
      000EB0 FF               [12]  592 	mov	r7,a
      000EB1 0F               [12]  593 	inc	r7
      000EB2 78 EB            [12]  594 	mov	r0,#__w5500_read_PARM_3
      000EB4 74 BB            [12]  595 	mov	a,#_small_buffer
      000EB6 F2               [24]  596 	movx	@r0,a
      000EB7 08               [12]  597 	inc	r0
      000EB8 E4               [12]  598 	clr	a
      000EB9 F2               [24]  599 	movx	@r0,a
      000EBA 08               [12]  600 	inc	r0
      000EBB 74 60            [12]  601 	mov	a,#0x60
      000EBD F2               [24]  602 	movx	@r0,a
      000EBE 78 EA            [12]  603 	mov	r0,#__w5500_read_PARM_2
      000EC0 EF               [12]  604 	mov	a,r7
      000EC1 F2               [24]  605 	movx	@r0,a
      000EC2 78 EE            [12]  606 	mov	r0,#__w5500_read_PARM_4
      000EC4 74 01            [12]  607 	mov	a,#0x01
      000EC6 F2               [24]  608 	movx	@r0,a
      000EC7 08               [12]  609 	inc	r0
      000EC8 E4               [12]  610 	clr	a
      000EC9 F2               [24]  611 	movx	@r0,a
      000ECA 90 00 00         [24]  612 	mov	dptr,#0x0000
      000ECD C0 07            [24]  613 	push	ar7
      000ECF 12 12 D8         [24]  614 	lcall	__w5500_read
      000ED2 D0 07            [24]  615 	pop	ar7
                                    616 ;	W5500.c:35: small_buffer[0] &= 0xF0;
      000ED4 78 BB            [12]  617 	mov	r0,#_small_buffer
      000ED6 E2               [24]  618 	movx	a,@r0
      000ED7 FE               [12]  619 	mov	r6,a
      000ED8 53 06 F0         [24]  620 	anl	ar6,#0xf0
      000EDB 78 BB            [12]  621 	mov	r0,#_small_buffer
      000EDD EE               [12]  622 	mov	a,r6
      000EDE F2               [24]  623 	movx	@r0,a
                                    624 ;	W5500.c:36: small_buffer[0] |= PROTOCOL_TCP;
      000EDF 74 01            [12]  625 	mov	a,#0x01
      000EE1 4E               [12]  626 	orl	a,r6
      000EE2 78 BB            [12]  627 	mov	r0,#_small_buffer
      000EE4 F2               [24]  628 	movx	@r0,a
                                    629 ;	W5500.c:37: _w5500_write(0x00, (socket * 4) + 1, small_buffer, 1);
      000EE5 78 F1            [12]  630 	mov	r0,#__w5500_write_PARM_3
      000EE7 74 BB            [12]  631 	mov	a,#_small_buffer
      000EE9 F2               [24]  632 	movx	@r0,a
      000EEA 08               [12]  633 	inc	r0
      000EEB E4               [12]  634 	clr	a
      000EEC F2               [24]  635 	movx	@r0,a
      000EED 08               [12]  636 	inc	r0
      000EEE 74 60            [12]  637 	mov	a,#0x60
      000EF0 F2               [24]  638 	movx	@r0,a
      000EF1 78 F0            [12]  639 	mov	r0,#__w5500_write_PARM_2
      000EF3 EF               [12]  640 	mov	a,r7
      000EF4 F2               [24]  641 	movx	@r0,a
      000EF5 78 F4            [12]  642 	mov	r0,#__w5500_write_PARM_4
      000EF7 74 01            [12]  643 	mov	a,#0x01
      000EF9 F2               [24]  644 	movx	@r0,a
      000EFA 08               [12]  645 	inc	r0
      000EFB E4               [12]  646 	clr	a
      000EFC F2               [24]  647 	movx	@r0,a
      000EFD 90 00 00         [24]  648 	mov	dptr,#0x0000
                                    649 ;	W5500.c:38: }
      000F00 02 13 50         [24]  650 	ljmp	__w5500_write
                                    651 ;------------------------------------------------------------
                                    652 ;Allocation info for local variables in function '_w5500_get_IMR'
                                    653 ;------------------------------------------------------------
                                    654 ;	W5500.c:41: unsigned char _w5500_get_IMR(unsigned char socket) {
                                    655 ;	-----------------------------------------
                                    656 ;	 function _w5500_get_IMR
                                    657 ;	-----------------------------------------
      000F03                        658 __w5500_get_IMR:
                                    659 ;	W5500.c:42: _w5500_read(SOCKETN_IMR, (socket * 4) + 1, small_buffer, 1);
      000F03 E5 82            [12]  660 	mov	a,dpl
      000F05 25 82            [12]  661 	add	a,dpl
      000F07 25 E0            [12]  662 	add	a,acc
      000F09 78 EA            [12]  663 	mov	r0,#__w5500_read_PARM_2
      000F0B 04               [12]  664 	inc	a
      000F0C F2               [24]  665 	movx	@r0,a
      000F0D 78 EB            [12]  666 	mov	r0,#__w5500_read_PARM_3
      000F0F 74 BB            [12]  667 	mov	a,#_small_buffer
      000F11 F2               [24]  668 	movx	@r0,a
      000F12 08               [12]  669 	inc	r0
      000F13 E4               [12]  670 	clr	a
      000F14 F2               [24]  671 	movx	@r0,a
      000F15 08               [12]  672 	inc	r0
      000F16 74 60            [12]  673 	mov	a,#0x60
      000F18 F2               [24]  674 	movx	@r0,a
      000F19 78 EE            [12]  675 	mov	r0,#__w5500_read_PARM_4
      000F1B 74 01            [12]  676 	mov	a,#0x01
      000F1D F2               [24]  677 	movx	@r0,a
      000F1E 08               [12]  678 	inc	r0
      000F1F E4               [12]  679 	clr	a
      000F20 F2               [24]  680 	movx	@r0,a
      000F21 90 00 2C         [24]  681 	mov	dptr,#0x002c
      000F24 12 12 D8         [24]  682 	lcall	__w5500_read
                                    683 ;	W5500.c:43: return (small_buffer[0]);
      000F27 78 BB            [12]  684 	mov	r0,#_small_buffer
      000F29 E2               [24]  685 	movx	a,@r0
      000F2A F5 82            [12]  686 	mov	dpl,a
                                    687 ;	W5500.c:44: }
      000F2C 22               [24]  688 	ret
                                    689 ;------------------------------------------------------------
                                    690 ;Allocation info for local variables in function '_w5500_get_SIR'
                                    691 ;------------------------------------------------------------
                                    692 ;	W5500.c:46: unsigned char _w5500_get_SIR() {
                                    693 ;	-----------------------------------------
                                    694 ;	 function _w5500_get_SIR
                                    695 ;	-----------------------------------------
      000F2D                        696 __w5500_get_SIR:
                                    697 ;	W5500.c:47: _w5500_read(0x0017, 0x00, small_buffer, 1);
      000F2D 78 EB            [12]  698 	mov	r0,#__w5500_read_PARM_3
      000F2F 74 BB            [12]  699 	mov	a,#_small_buffer
      000F31 F2               [24]  700 	movx	@r0,a
      000F32 08               [12]  701 	inc	r0
      000F33 E4               [12]  702 	clr	a
      000F34 F2               [24]  703 	movx	@r0,a
      000F35 08               [12]  704 	inc	r0
      000F36 74 60            [12]  705 	mov	a,#0x60
      000F38 F2               [24]  706 	movx	@r0,a
      000F39 78 EA            [12]  707 	mov	r0,#__w5500_read_PARM_2
      000F3B E4               [12]  708 	clr	a
      000F3C F2               [24]  709 	movx	@r0,a
      000F3D 78 EE            [12]  710 	mov	r0,#__w5500_read_PARM_4
      000F3F 04               [12]  711 	inc	a
      000F40 F2               [24]  712 	movx	@r0,a
      000F41 08               [12]  713 	inc	r0
      000F42 E4               [12]  714 	clr	a
      000F43 F2               [24]  715 	movx	@r0,a
      000F44 90 00 17         [24]  716 	mov	dptr,#0x0017
      000F47 12 12 D8         [24]  717 	lcall	__w5500_read
                                    718 ;	W5500.c:48: return (small_buffer[0]);
      000F4A 78 BB            [12]  719 	mov	r0,#_small_buffer
      000F4C E2               [24]  720 	movx	a,@r0
      000F4D F5 82            [12]  721 	mov	dpl,a
                                    722 ;	W5500.c:49: }
      000F4F 22               [24]  723 	ret
                                    724 ;------------------------------------------------------------
                                    725 ;Allocation info for local variables in function '_w5500_set_IMR'
                                    726 ;------------------------------------------------------------
                                    727 ;	W5500.c:52: void _w5500_set_IMR(unsigned char socket) {
                                    728 ;	-----------------------------------------
                                    729 ;	 function _w5500_set_IMR
                                    730 ;	-----------------------------------------
      000F50                        731 __w5500_set_IMR:
      000F50 AF 82            [24]  732 	mov	r7,dpl
                                    733 ;	W5500.c:53: small_buffer[0] = 0x04;
      000F52 78 BB            [12]  734 	mov	r0,#_small_buffer
      000F54 74 04            [12]  735 	mov	a,#0x04
      000F56 F2               [24]  736 	movx	@r0,a
                                    737 ;	W5500.c:54: _w5500_write(SOCKETN_IMR, (socket * 4) + 1, small_buffer, 1);
      000F57 EF               [12]  738 	mov	a,r7
      000F58 2F               [12]  739 	add	a,r7
      000F59 25 E0            [12]  740 	add	a,acc
      000F5B 78 F0            [12]  741 	mov	r0,#__w5500_write_PARM_2
      000F5D 04               [12]  742 	inc	a
      000F5E F2               [24]  743 	movx	@r0,a
      000F5F 78 F1            [12]  744 	mov	r0,#__w5500_write_PARM_3
      000F61 74 BB            [12]  745 	mov	a,#_small_buffer
      000F63 F2               [24]  746 	movx	@r0,a
      000F64 08               [12]  747 	inc	r0
      000F65 E4               [12]  748 	clr	a
      000F66 F2               [24]  749 	movx	@r0,a
      000F67 08               [12]  750 	inc	r0
      000F68 74 60            [12]  751 	mov	a,#0x60
      000F6A F2               [24]  752 	movx	@r0,a
      000F6B 78 F4            [12]  753 	mov	r0,#__w5500_write_PARM_4
      000F6D 74 01            [12]  754 	mov	a,#0x01
      000F6F F2               [24]  755 	movx	@r0,a
      000F70 08               [12]  756 	inc	r0
      000F71 E4               [12]  757 	clr	a
      000F72 F2               [24]  758 	movx	@r0,a
      000F73 90 00 2C         [24]  759 	mov	dptr,#0x002c
                                    760 ;	W5500.c:55: }
      000F76 02 13 50         [24]  761 	ljmp	__w5500_write
                                    762 ;------------------------------------------------------------
                                    763 ;Allocation info for local variables in function '_w5500_get_SIMR'
                                    764 ;------------------------------------------------------------
                                    765 ;	W5500.c:58: unsigned char _w5500_get_SIMR() {
                                    766 ;	-----------------------------------------
                                    767 ;	 function _w5500_get_SIMR
                                    768 ;	-----------------------------------------
      000F79                        769 __w5500_get_SIMR:
                                    770 ;	W5500.c:59: _w5500_read(0x0018, 0x00, small_buffer, 1);
      000F79 78 EB            [12]  771 	mov	r0,#__w5500_read_PARM_3
      000F7B 74 BB            [12]  772 	mov	a,#_small_buffer
      000F7D F2               [24]  773 	movx	@r0,a
      000F7E 08               [12]  774 	inc	r0
      000F7F E4               [12]  775 	clr	a
      000F80 F2               [24]  776 	movx	@r0,a
      000F81 08               [12]  777 	inc	r0
      000F82 74 60            [12]  778 	mov	a,#0x60
      000F84 F2               [24]  779 	movx	@r0,a
      000F85 78 EA            [12]  780 	mov	r0,#__w5500_read_PARM_2
      000F87 E4               [12]  781 	clr	a
      000F88 F2               [24]  782 	movx	@r0,a
      000F89 78 EE            [12]  783 	mov	r0,#__w5500_read_PARM_4
      000F8B 04               [12]  784 	inc	a
      000F8C F2               [24]  785 	movx	@r0,a
      000F8D 08               [12]  786 	inc	r0
      000F8E E4               [12]  787 	clr	a
      000F8F F2               [24]  788 	movx	@r0,a
      000F90 90 00 18         [24]  789 	mov	dptr,#0x0018
      000F93 12 12 D8         [24]  790 	lcall	__w5500_read
                                    791 ;	W5500.c:60: return (small_buffer[0]);
      000F96 78 BB            [12]  792 	mov	r0,#_small_buffer
      000F98 E2               [24]  793 	movx	a,@r0
      000F99 F5 82            [12]  794 	mov	dpl,a
                                    795 ;	W5500.c:61: }
      000F9B 22               [24]  796 	ret
                                    797 ;------------------------------------------------------------
                                    798 ;Allocation info for local variables in function '_w5500_clear_SNIR'
                                    799 ;------------------------------------------------------------
                                    800 ;	W5500.c:63: void _w5500_clear_SNIR(unsigned char socket) {
                                    801 ;	-----------------------------------------
                                    802 ;	 function _w5500_clear_SNIR
                                    803 ;	-----------------------------------------
      000F9C                        804 __w5500_clear_SNIR:
      000F9C AF 82            [24]  805 	mov	r7,dpl
                                    806 ;	W5500.c:64: small_buffer[0] = 0xFF;
      000F9E 78 BB            [12]  807 	mov	r0,#_small_buffer
      000FA0 74 FF            [12]  808 	mov	a,#0xff
      000FA2 F2               [24]  809 	movx	@r0,a
                                    810 ;	W5500.c:65: _w5500_write(0x0002, (socket * 4) + 1, small_buffer, 1);
      000FA3 EF               [12]  811 	mov	a,r7
      000FA4 2F               [12]  812 	add	a,r7
      000FA5 25 E0            [12]  813 	add	a,acc
      000FA7 78 F0            [12]  814 	mov	r0,#__w5500_write_PARM_2
      000FA9 04               [12]  815 	inc	a
      000FAA F2               [24]  816 	movx	@r0,a
      000FAB 78 F1            [12]  817 	mov	r0,#__w5500_write_PARM_3
      000FAD 74 BB            [12]  818 	mov	a,#_small_buffer
      000FAF F2               [24]  819 	movx	@r0,a
      000FB0 08               [12]  820 	inc	r0
      000FB1 E4               [12]  821 	clr	a
      000FB2 F2               [24]  822 	movx	@r0,a
      000FB3 08               [12]  823 	inc	r0
      000FB4 74 60            [12]  824 	mov	a,#0x60
      000FB6 F2               [24]  825 	movx	@r0,a
      000FB7 78 F4            [12]  826 	mov	r0,#__w5500_write_PARM_4
      000FB9 74 01            [12]  827 	mov	a,#0x01
      000FBB F2               [24]  828 	movx	@r0,a
      000FBC 08               [12]  829 	inc	r0
      000FBD E4               [12]  830 	clr	a
      000FBE F2               [24]  831 	movx	@r0,a
      000FBF 90 00 02         [24]  832 	mov	dptr,#0x0002
                                    833 ;	W5500.c:66: }
      000FC2 02 13 50         [24]  834 	ljmp	__w5500_write
                                    835 ;------------------------------------------------------------
                                    836 ;Allocation info for local variables in function '_w5500_get_SNIR'
                                    837 ;------------------------------------------------------------
                                    838 ;	W5500.c:68: unsigned char _w5500_get_SNIR(unsigned char socket) {
                                    839 ;	-----------------------------------------
                                    840 ;	 function _w5500_get_SNIR
                                    841 ;	-----------------------------------------
      000FC5                        842 __w5500_get_SNIR:
                                    843 ;	W5500.c:69: _w5500_read(0x0002, (socket * 4) + 1, small_buffer, 1);
      000FC5 E5 82            [12]  844 	mov	a,dpl
      000FC7 25 82            [12]  845 	add	a,dpl
      000FC9 25 E0            [12]  846 	add	a,acc
      000FCB 78 EA            [12]  847 	mov	r0,#__w5500_read_PARM_2
      000FCD 04               [12]  848 	inc	a
      000FCE F2               [24]  849 	movx	@r0,a
      000FCF 78 EB            [12]  850 	mov	r0,#__w5500_read_PARM_3
      000FD1 74 BB            [12]  851 	mov	a,#_small_buffer
      000FD3 F2               [24]  852 	movx	@r0,a
      000FD4 08               [12]  853 	inc	r0
      000FD5 E4               [12]  854 	clr	a
      000FD6 F2               [24]  855 	movx	@r0,a
      000FD7 08               [12]  856 	inc	r0
      000FD8 74 60            [12]  857 	mov	a,#0x60
      000FDA F2               [24]  858 	movx	@r0,a
      000FDB 78 EE            [12]  859 	mov	r0,#__w5500_read_PARM_4
      000FDD 74 01            [12]  860 	mov	a,#0x01
      000FDF F2               [24]  861 	movx	@r0,a
      000FE0 08               [12]  862 	inc	r0
      000FE1 E4               [12]  863 	clr	a
      000FE2 F2               [24]  864 	movx	@r0,a
      000FE3 90 00 02         [24]  865 	mov	dptr,#0x0002
      000FE6 12 12 D8         [24]  866 	lcall	__w5500_read
                                    867 ;	W5500.c:70: return (small_buffer[0]);
      000FE9 78 BB            [12]  868 	mov	r0,#_small_buffer
      000FEB E2               [24]  869 	movx	a,@r0
      000FEC F5 82            [12]  870 	mov	dpl,a
                                    871 ;	W5500.c:71: }
      000FEE 22               [24]  872 	ret
                                    873 ;------------------------------------------------------------
                                    874 ;Allocation info for local variables in function '_w5500_get_status'
                                    875 ;------------------------------------------------------------
                                    876 ;	W5500.c:74: unsigned char _w5500_get_status(unsigned char socket) {
                                    877 ;	-----------------------------------------
                                    878 ;	 function _w5500_get_status
                                    879 ;	-----------------------------------------
      000FEF                        880 __w5500_get_status:
                                    881 ;	W5500.c:75: _w5500_read(0x03, (socket * 4) + 1, small_buffer, 1);
      000FEF E5 82            [12]  882 	mov	a,dpl
      000FF1 25 82            [12]  883 	add	a,dpl
      000FF3 25 E0            [12]  884 	add	a,acc
      000FF5 78 EA            [12]  885 	mov	r0,#__w5500_read_PARM_2
      000FF7 04               [12]  886 	inc	a
      000FF8 F2               [24]  887 	movx	@r0,a
      000FF9 78 EB            [12]  888 	mov	r0,#__w5500_read_PARM_3
      000FFB 74 BB            [12]  889 	mov	a,#_small_buffer
      000FFD F2               [24]  890 	movx	@r0,a
      000FFE 08               [12]  891 	inc	r0
      000FFF E4               [12]  892 	clr	a
      001000 F2               [24]  893 	movx	@r0,a
      001001 08               [12]  894 	inc	r0
      001002 74 60            [12]  895 	mov	a,#0x60
      001004 F2               [24]  896 	movx	@r0,a
      001005 78 EE            [12]  897 	mov	r0,#__w5500_read_PARM_4
      001007 74 01            [12]  898 	mov	a,#0x01
      001009 F2               [24]  899 	movx	@r0,a
      00100A 08               [12]  900 	inc	r0
      00100B E4               [12]  901 	clr	a
      00100C F2               [24]  902 	movx	@r0,a
      00100D 90 00 03         [24]  903 	mov	dptr,#0x0003
      001010 12 12 D8         [24]  904 	lcall	__w5500_read
                                    905 ;	W5500.c:76: return small_buffer[0];
      001013 78 BB            [12]  906 	mov	r0,#_small_buffer
      001015 E2               [24]  907 	movx	a,@r0
      001016 F5 82            [12]  908 	mov	dpl,a
                                    909 ;	W5500.c:77: }
      001018 22               [24]  910 	ret
                                    911 ;------------------------------------------------------------
                                    912 ;Allocation info for local variables in function '_w5500_listen'
                                    913 ;------------------------------------------------------------
                                    914 ;	W5500.c:79: void _w5500_listen(unsigned char socket) {
                                    915 ;	-----------------------------------------
                                    916 ;	 function _w5500_listen
                                    917 ;	-----------------------------------------
      001019                        918 __w5500_listen:
      001019 AF 82            [24]  919 	mov	r7,dpl
                                    920 ;	W5500.c:80: small_buffer[0] = 0x02;
      00101B 78 BB            [12]  921 	mov	r0,#_small_buffer
      00101D 74 02            [12]  922 	mov	a,#0x02
      00101F F2               [24]  923 	movx	@r0,a
                                    924 ;	W5500.c:81: _w5500_write(SOCKETN_COMMAND, (socket * 4) + 1, small_buffer, 1);
      001020 EF               [12]  925 	mov	a,r7
      001021 2F               [12]  926 	add	a,r7
      001022 25 E0            [12]  927 	add	a,acc
      001024 78 F0            [12]  928 	mov	r0,#__w5500_write_PARM_2
      001026 04               [12]  929 	inc	a
      001027 F2               [24]  930 	movx	@r0,a
      001028 78 F1            [12]  931 	mov	r0,#__w5500_write_PARM_3
      00102A 74 BB            [12]  932 	mov	a,#_small_buffer
      00102C F2               [24]  933 	movx	@r0,a
      00102D 08               [12]  934 	inc	r0
      00102E E4               [12]  935 	clr	a
      00102F F2               [24]  936 	movx	@r0,a
      001030 08               [12]  937 	inc	r0
      001031 74 60            [12]  938 	mov	a,#0x60
      001033 F2               [24]  939 	movx	@r0,a
      001034 78 F4            [12]  940 	mov	r0,#__w5500_write_PARM_4
      001036 74 01            [12]  941 	mov	a,#0x01
      001038 F2               [24]  942 	movx	@r0,a
      001039 08               [12]  943 	inc	r0
      00103A E4               [12]  944 	clr	a
      00103B F2               [24]  945 	movx	@r0,a
      00103C 90 00 01         [24]  946 	mov	dptr,#0x0001
                                    947 ;	W5500.c:82: }
      00103F 02 13 50         [24]  948 	ljmp	__w5500_write
                                    949 ;------------------------------------------------------------
                                    950 ;Allocation info for local variables in function '_w5500_set_sourceport'
                                    951 ;------------------------------------------------------------
                                    952 ;	W5500.c:89: void _w5500_set_sourceport(unsigned char socket, unsigned int port) {
                                    953 ;	-----------------------------------------
                                    954 ;	 function _w5500_set_sourceport
                                    955 ;	-----------------------------------------
      001042                        956 __w5500_set_sourceport:
      001042 AF 82            [24]  957 	mov	r7,dpl
                                    958 ;	W5500.c:90: small_buffer[0] = port >> 8;
      001044 78 DF            [12]  959 	mov	r0,#(__w5500_set_sourceport_PARM_2 + 1)
      001046 E2               [24]  960 	movx	a,@r0
      001047 78 BB            [12]  961 	mov	r0,#_small_buffer
      001049 F2               [24]  962 	movx	@r0,a
                                    963 ;	W5500.c:91: small_buffer[1] = port & 0xFF;
      00104A 78 DE            [12]  964 	mov	r0,#__w5500_set_sourceport_PARM_2
      00104C E2               [24]  965 	movx	a,@r0
      00104D FE               [12]  966 	mov	r6,a
      00104E 78 BC            [12]  967 	mov	r0,#(_small_buffer + 0x0001)
      001050 F2               [24]  968 	movx	@r0,a
                                    969 ;	W5500.c:92: _w5500_write(SOCKETN_SOURCEPORT, (socket * 4) + 1, small_buffer, 2);
      001051 EF               [12]  970 	mov	a,r7
      001052 2F               [12]  971 	add	a,r7
      001053 25 E0            [12]  972 	add	a,acc
      001055 78 F0            [12]  973 	mov	r0,#__w5500_write_PARM_2
      001057 04               [12]  974 	inc	a
      001058 F2               [24]  975 	movx	@r0,a
      001059 78 F1            [12]  976 	mov	r0,#__w5500_write_PARM_3
      00105B 74 BB            [12]  977 	mov	a,#_small_buffer
      00105D F2               [24]  978 	movx	@r0,a
      00105E 08               [12]  979 	inc	r0
      00105F E4               [12]  980 	clr	a
      001060 F2               [24]  981 	movx	@r0,a
      001061 08               [12]  982 	inc	r0
      001062 74 60            [12]  983 	mov	a,#0x60
      001064 F2               [24]  984 	movx	@r0,a
      001065 78 F4            [12]  985 	mov	r0,#__w5500_write_PARM_4
      001067 74 02            [12]  986 	mov	a,#0x02
      001069 F2               [24]  987 	movx	@r0,a
      00106A 08               [12]  988 	inc	r0
      00106B E4               [12]  989 	clr	a
      00106C F2               [24]  990 	movx	@r0,a
      00106D 90 00 04         [24]  991 	mov	dptr,#0x0004
                                    992 ;	W5500.c:93: }
      001070 02 13 50         [24]  993 	ljmp	__w5500_write
                                    994 ;------------------------------------------------------------
                                    995 ;Allocation info for local variables in function '_w5500_set_remoteport'
                                    996 ;------------------------------------------------------------
                                    997 ;	W5500.c:95: void _w5500_set_remoteport(unsigned char socket, unsigned int port) {
                                    998 ;	-----------------------------------------
                                    999 ;	 function _w5500_set_remoteport
                                   1000 ;	-----------------------------------------
      001073                       1001 __w5500_set_remoteport:
      001073 AF 82            [24] 1002 	mov	r7,dpl
                                   1003 ;	W5500.c:96: small_buffer[0] = port >> 8;
      001075 78 E1            [12] 1004 	mov	r0,#(__w5500_set_remoteport_PARM_2 + 1)
      001077 E2               [24] 1005 	movx	a,@r0
      001078 78 BB            [12] 1006 	mov	r0,#_small_buffer
      00107A F2               [24] 1007 	movx	@r0,a
                                   1008 ;	W5500.c:97: small_buffer[1] = port & 0xFF;
      00107B 78 E0            [12] 1009 	mov	r0,#__w5500_set_remoteport_PARM_2
      00107D E2               [24] 1010 	movx	a,@r0
      00107E FE               [12] 1011 	mov	r6,a
      00107F 78 BC            [12] 1012 	mov	r0,#(_small_buffer + 0x0001)
      001081 F2               [24] 1013 	movx	@r0,a
                                   1014 ;	W5500.c:98: _w5500_write(SOCKETN_DEST_PORT, (socket * 4) + 1, small_buffer, 2);
      001082 EF               [12] 1015 	mov	a,r7
      001083 2F               [12] 1016 	add	a,r7
      001084 25 E0            [12] 1017 	add	a,acc
      001086 78 F0            [12] 1018 	mov	r0,#__w5500_write_PARM_2
      001088 04               [12] 1019 	inc	a
      001089 F2               [24] 1020 	movx	@r0,a
      00108A 78 F1            [12] 1021 	mov	r0,#__w5500_write_PARM_3
      00108C 74 BB            [12] 1022 	mov	a,#_small_buffer
      00108E F2               [24] 1023 	movx	@r0,a
      00108F 08               [12] 1024 	inc	r0
      001090 E4               [12] 1025 	clr	a
      001091 F2               [24] 1026 	movx	@r0,a
      001092 08               [12] 1027 	inc	r0
      001093 74 60            [12] 1028 	mov	a,#0x60
      001095 F2               [24] 1029 	movx	@r0,a
      001096 78 F4            [12] 1030 	mov	r0,#__w5500_write_PARM_4
      001098 74 02            [12] 1031 	mov	a,#0x02
      00109A F2               [24] 1032 	movx	@r0,a
      00109B 08               [12] 1033 	inc	r0
      00109C E4               [12] 1034 	clr	a
      00109D F2               [24] 1035 	movx	@r0,a
      00109E 90 00 10         [24] 1036 	mov	dptr,#0x0010
                                   1037 ;	W5500.c:99: }
      0010A1 02 13 50         [24] 1038 	ljmp	__w5500_write
                                   1039 ;------------------------------------------------------------
                                   1040 ;Allocation info for local variables in function '_w5500_set_destinationip'
                                   1041 ;------------------------------------------------------------
                                   1042 ;	W5500.c:101: void _w5500_set_destinationip(unsigned char socket, unsigned char* ip) {
                                   1043 ;	-----------------------------------------
                                   1044 ;	 function _w5500_set_destinationip
                                   1045 ;	-----------------------------------------
      0010A4                       1046 __w5500_set_destinationip:
                                   1047 ;	W5500.c:102: _w5500_write(SOCKETN_DEST_IP, (socket * 4) + 1, ip, 4);
      0010A4 E5 82            [12] 1048 	mov	a,dpl
      0010A6 25 82            [12] 1049 	add	a,dpl
      0010A8 25 E0            [12] 1050 	add	a,acc
      0010AA 78 F0            [12] 1051 	mov	r0,#__w5500_write_PARM_2
      0010AC 04               [12] 1052 	inc	a
      0010AD F2               [24] 1053 	movx	@r0,a
      0010AE 78 E2            [12] 1054 	mov	r0,#__w5500_set_destinationip_PARM_2
      0010B0 79 F1            [12] 1055 	mov	r1,#__w5500_write_PARM_3
      0010B2 E2               [24] 1056 	movx	a,@r0
      0010B3 F3               [24] 1057 	movx	@r1,a
      0010B4 08               [12] 1058 	inc	r0
      0010B5 E2               [24] 1059 	movx	a,@r0
      0010B6 09               [12] 1060 	inc	r1
      0010B7 F3               [24] 1061 	movx	@r1,a
      0010B8 08               [12] 1062 	inc	r0
      0010B9 E2               [24] 1063 	movx	a,@r0
      0010BA 09               [12] 1064 	inc	r1
      0010BB F3               [24] 1065 	movx	@r1,a
      0010BC 78 F4            [12] 1066 	mov	r0,#__w5500_write_PARM_4
      0010BE 74 04            [12] 1067 	mov	a,#0x04
      0010C0 F2               [24] 1068 	movx	@r0,a
      0010C1 08               [12] 1069 	inc	r0
      0010C2 E4               [12] 1070 	clr	a
      0010C3 F2               [24] 1071 	movx	@r0,a
      0010C4 90 00 0C         [24] 1072 	mov	dptr,#0x000c
                                   1073 ;	W5500.c:103: }
      0010C7 02 13 50         [24] 1074 	ljmp	__w5500_write
                                   1075 ;------------------------------------------------------------
                                   1076 ;Allocation info for local variables in function '_w5500_writeto'
                                   1077 ;------------------------------------------------------------
                                   1078 ;	W5500.c:106: void _w5500_writeto(unsigned char socket, const unsigned char* data, unsigned char length) {
                                   1079 ;	-----------------------------------------
                                   1080 ;	 function _w5500_writeto
                                   1081 ;	-----------------------------------------
      0010CA                       1082 __w5500_writeto:
                                   1083 ;	W5500.c:108: _w5500_read(0x24, (socket * 4) + 1, small_buffer, 2);
      0010CA E5 82            [12] 1084 	mov	a,dpl
      0010CC 25 82            [12] 1085 	add	a,dpl
      0010CE 25 E0            [12] 1086 	add	a,acc
      0010D0 FF               [12] 1087 	mov	r7,a
      0010D1 04               [12] 1088 	inc	a
      0010D2 FE               [12] 1089 	mov	r6,a
      0010D3 78 EB            [12] 1090 	mov	r0,#__w5500_read_PARM_3
      0010D5 74 BB            [12] 1091 	mov	a,#_small_buffer
      0010D7 F2               [24] 1092 	movx	@r0,a
      0010D8 08               [12] 1093 	inc	r0
      0010D9 E4               [12] 1094 	clr	a
      0010DA F2               [24] 1095 	movx	@r0,a
      0010DB 08               [12] 1096 	inc	r0
      0010DC 74 60            [12] 1097 	mov	a,#0x60
      0010DE F2               [24] 1098 	movx	@r0,a
      0010DF 78 EA            [12] 1099 	mov	r0,#__w5500_read_PARM_2
      0010E1 EE               [12] 1100 	mov	a,r6
      0010E2 F2               [24] 1101 	movx	@r0,a
      0010E3 78 EE            [12] 1102 	mov	r0,#__w5500_read_PARM_4
      0010E5 74 02            [12] 1103 	mov	a,#0x02
      0010E7 F2               [24] 1104 	movx	@r0,a
      0010E8 08               [12] 1105 	inc	r0
      0010E9 E4               [12] 1106 	clr	a
      0010EA F2               [24] 1107 	movx	@r0,a
      0010EB 90 00 24         [24] 1108 	mov	dptr,#0x0024
      0010EE C0 07            [24] 1109 	push	ar7
      0010F0 C0 06            [24] 1110 	push	ar6
      0010F2 12 12 D8         [24] 1111 	lcall	__w5500_read
      0010F5 D0 06            [24] 1112 	pop	ar6
      0010F7 D0 07            [24] 1113 	pop	ar7
                                   1114 ;	W5500.c:109: easy_math = (small_buffer[0] << 8) | small_buffer[1];
      0010F9 78 BB            [12] 1115 	mov	r0,#_small_buffer
      0010FB E2               [24] 1116 	movx	a,@r0
      0010FC FC               [12] 1117 	mov	r4,a
      0010FD 7D 00            [12] 1118 	mov	r5,#0x00
      0010FF 78 BC            [12] 1119 	mov	r0,#(_small_buffer + 0x0001)
      001101 E2               [24] 1120 	movx	a,@r0
      001102 7A 00            [12] 1121 	mov	r2,#0x00
      001104 42 05            [12] 1122 	orl	ar5,a
      001106 EA               [12] 1123 	mov	a,r2
      001107 42 04            [12] 1124 	orl	ar4,a
                                   1125 ;	W5500.c:110: _w5500_write(easy_math, (socket * 4) + 2, data, length);
      001109 78 F0            [12] 1126 	mov	r0,#__w5500_write_PARM_2
      00110B 74 02            [12] 1127 	mov	a,#0x02
      00110D 2F               [12] 1128 	add	a,r7
      00110E F2               [24] 1129 	movx	@r0,a
      00110F 78 E8            [12] 1130 	mov	r0,#__w5500_writeto_PARM_3
      001111 79 F4            [12] 1131 	mov	r1,#__w5500_write_PARM_4
      001113 E2               [24] 1132 	movx	a,@r0
      001114 F3               [24] 1133 	movx	@r1,a
      001115 09               [12] 1134 	inc	r1
      001116 E4               [12] 1135 	clr	a
      001117 F3               [24] 1136 	movx	@r1,a
      001118 78 E5            [12] 1137 	mov	r0,#__w5500_writeto_PARM_2
      00111A 79 F1            [12] 1138 	mov	r1,#__w5500_write_PARM_3
      00111C E2               [24] 1139 	movx	a,@r0
      00111D F3               [24] 1140 	movx	@r1,a
      00111E 08               [12] 1141 	inc	r0
      00111F E2               [24] 1142 	movx	a,@r0
      001120 09               [12] 1143 	inc	r1
      001121 F3               [24] 1144 	movx	@r1,a
      001122 08               [12] 1145 	inc	r0
      001123 E2               [24] 1146 	movx	a,@r0
      001124 09               [12] 1147 	inc	r1
      001125 F3               [24] 1148 	movx	@r1,a
      001126 8D 82            [24] 1149 	mov	dpl,r5
      001128 8C 83            [24] 1150 	mov	dph,r4
      00112A C0 06            [24] 1151 	push	ar6
      00112C C0 05            [24] 1152 	push	ar5
      00112E C0 04            [24] 1153 	push	ar4
      001130 12 13 50         [24] 1154 	lcall	__w5500_write
      001133 D0 04            [24] 1155 	pop	ar4
      001135 D0 05            [24] 1156 	pop	ar5
      001137 D0 06            [24] 1157 	pop	ar6
                                   1158 ;	W5500.c:111: easy_math += length;
      001139 78 E8            [12] 1159 	mov	r0,#__w5500_writeto_PARM_3
      00113B E2               [24] 1160 	movx	a,@r0
      00113C 7F 00            [12] 1161 	mov	r7,#0x00
      00113E 2D               [12] 1162 	add	a,r5
      00113F FB               [12] 1163 	mov	r3,a
      001140 EF               [12] 1164 	mov	a,r7
      001141 3C               [12] 1165 	addc	a,r4
                                   1166 ;	W5500.c:112: small_buffer[0] = easy_math >> 8;
      001142 FD               [12] 1167 	mov	r5,a
      001143 78 BB            [12] 1168 	mov	r0,#_small_buffer
      001145 F2               [24] 1169 	movx	@r0,a
                                   1170 ;	W5500.c:113: small_buffer[1] = easy_math & 0xFF;
      001146 78 BC            [12] 1171 	mov	r0,#(_small_buffer + 0x0001)
      001148 EB               [12] 1172 	mov	a,r3
      001149 F2               [24] 1173 	movx	@r0,a
                                   1174 ;	W5500.c:114: _w5500_write(0x24, (socket * 4) + 1, small_buffer, 2);
      00114A 78 F1            [12] 1175 	mov	r0,#__w5500_write_PARM_3
      00114C 74 BB            [12] 1176 	mov	a,#_small_buffer
      00114E F2               [24] 1177 	movx	@r0,a
      00114F 08               [12] 1178 	inc	r0
      001150 E4               [12] 1179 	clr	a
      001151 F2               [24] 1180 	movx	@r0,a
      001152 08               [12] 1181 	inc	r0
      001153 74 60            [12] 1182 	mov	a,#0x60
      001155 F2               [24] 1183 	movx	@r0,a
      001156 78 F0            [12] 1184 	mov	r0,#__w5500_write_PARM_2
      001158 EE               [12] 1185 	mov	a,r6
      001159 F2               [24] 1186 	movx	@r0,a
      00115A 78 F4            [12] 1187 	mov	r0,#__w5500_write_PARM_4
      00115C 74 02            [12] 1188 	mov	a,#0x02
      00115E F2               [24] 1189 	movx	@r0,a
      00115F 08               [12] 1190 	inc	r0
      001160 E4               [12] 1191 	clr	a
      001161 F2               [24] 1192 	movx	@r0,a
      001162 90 00 24         [24] 1193 	mov	dptr,#0x0024
                                   1194 ;	W5500.c:115: }
      001165 02 13 50         [24] 1195 	ljmp	__w5500_write
                                   1196 ;------------------------------------------------------------
                                   1197 ;Allocation info for local variables in function '_w5500_bytesinbuffer'
                                   1198 ;------------------------------------------------------------
                                   1199 ;	W5500.c:117: unsigned int _w5500_bytesinbuffer(unsigned char socket) {
                                   1200 ;	-----------------------------------------
                                   1201 ;	 function _w5500_bytesinbuffer
                                   1202 ;	-----------------------------------------
      001168                       1203 __w5500_bytesinbuffer:
                                   1204 ;	W5500.c:118: _w5500_read(0x26, (socket * 4) + 1, small_buffer, 2);
      001168 E5 82            [12] 1205 	mov	a,dpl
      00116A 25 82            [12] 1206 	add	a,dpl
      00116C 25 E0            [12] 1207 	add	a,acc
      00116E 78 EA            [12] 1208 	mov	r0,#__w5500_read_PARM_2
      001170 04               [12] 1209 	inc	a
      001171 F2               [24] 1210 	movx	@r0,a
      001172 78 EB            [12] 1211 	mov	r0,#__w5500_read_PARM_3
      001174 74 BB            [12] 1212 	mov	a,#_small_buffer
      001176 F2               [24] 1213 	movx	@r0,a
      001177 08               [12] 1214 	inc	r0
      001178 E4               [12] 1215 	clr	a
      001179 F2               [24] 1216 	movx	@r0,a
      00117A 08               [12] 1217 	inc	r0
      00117B 74 60            [12] 1218 	mov	a,#0x60
      00117D F2               [24] 1219 	movx	@r0,a
      00117E 78 EE            [12] 1220 	mov	r0,#__w5500_read_PARM_4
      001180 74 02            [12] 1221 	mov	a,#0x02
      001182 F2               [24] 1222 	movx	@r0,a
      001183 08               [12] 1223 	inc	r0
      001184 E4               [12] 1224 	clr	a
      001185 F2               [24] 1225 	movx	@r0,a
      001186 90 00 26         [24] 1226 	mov	dptr,#0x0026
      001189 12 12 D8         [24] 1227 	lcall	__w5500_read
                                   1228 ;	W5500.c:119: return (small_buffer[0] << 8) | small_buffer[1];
      00118C 78 BB            [12] 1229 	mov	r0,#_small_buffer
      00118E E2               [24] 1230 	movx	a,@r0
      00118F FE               [12] 1231 	mov	r6,a
      001190 7F 00            [12] 1232 	mov	r7,#0x00
      001192 78 BC            [12] 1233 	mov	r0,#(_small_buffer + 0x0001)
      001194 E2               [24] 1234 	movx	a,@r0
      001195 7C 00            [12] 1235 	mov	r4,#0x00
      001197 4F               [12] 1236 	orl	a,r7
      001198 F5 82            [12] 1237 	mov	dpl,a
      00119A EC               [12] 1238 	mov	a,r4
      00119B 4E               [12] 1239 	orl	a,r6
      00119C F5 83            [12] 1240 	mov	dph,a
                                   1241 ;	W5500.c:120: }
      00119E 22               [24] 1242 	ret
                                   1243 ;------------------------------------------------------------
                                   1244 ;Allocation info for local variables in function '_w5500_readchar'
                                   1245 ;------------------------------------------------------------
                                   1246 ;	W5500.c:189: unsigned char _w5500_readchar(unsigned char socket) {
                                   1247 ;	-----------------------------------------
                                   1248 ;	 function _w5500_readchar
                                   1249 ;	-----------------------------------------
      00119F                       1250 __w5500_readchar:
      00119F AF 82            [24] 1251 	mov	r7,dpl
                                   1252 ;	W5500.c:190: unsigned char val = 0;
      0011A1 78 E9            [12] 1253 	mov	r0,#__w5500_readchar_val_65536_61
      0011A3 E4               [12] 1254 	clr	a
      0011A4 F2               [24] 1255 	movx	@r0,a
                                   1256 ;	W5500.c:192: _w5500_read(0x28, (socket * 4) + 1, small_buffer, 2);
      0011A5 EF               [12] 1257 	mov	a,r7
      0011A6 2F               [12] 1258 	add	a,r7
      0011A7 25 E0            [12] 1259 	add	a,acc
      0011A9 FF               [12] 1260 	mov	r7,a
      0011AA 04               [12] 1261 	inc	a
      0011AB FE               [12] 1262 	mov	r6,a
      0011AC 78 EB            [12] 1263 	mov	r0,#__w5500_read_PARM_3
      0011AE 74 BB            [12] 1264 	mov	a,#_small_buffer
      0011B0 F2               [24] 1265 	movx	@r0,a
      0011B1 08               [12] 1266 	inc	r0
      0011B2 E4               [12] 1267 	clr	a
      0011B3 F2               [24] 1268 	movx	@r0,a
      0011B4 08               [12] 1269 	inc	r0
      0011B5 74 60            [12] 1270 	mov	a,#0x60
      0011B7 F2               [24] 1271 	movx	@r0,a
      0011B8 78 EA            [12] 1272 	mov	r0,#__w5500_read_PARM_2
      0011BA EE               [12] 1273 	mov	a,r6
      0011BB F2               [24] 1274 	movx	@r0,a
      0011BC 78 EE            [12] 1275 	mov	r0,#__w5500_read_PARM_4
      0011BE 74 02            [12] 1276 	mov	a,#0x02
      0011C0 F2               [24] 1277 	movx	@r0,a
      0011C1 08               [12] 1278 	inc	r0
      0011C2 E4               [12] 1279 	clr	a
      0011C3 F2               [24] 1280 	movx	@r0,a
      0011C4 90 00 28         [24] 1281 	mov	dptr,#0x0028
      0011C7 C0 07            [24] 1282 	push	ar7
      0011C9 C0 06            [24] 1283 	push	ar6
      0011CB 12 12 D8         [24] 1284 	lcall	__w5500_read
      0011CE D0 06            [24] 1285 	pop	ar6
      0011D0 D0 07            [24] 1286 	pop	ar7
                                   1287 ;	W5500.c:193: starting_addr = (small_buffer[0] << 8) | small_buffer[1];
      0011D2 78 BB            [12] 1288 	mov	r0,#_small_buffer
      0011D4 E2               [24] 1289 	movx	a,@r0
      0011D5 FC               [12] 1290 	mov	r4,a
      0011D6 7D 00            [12] 1291 	mov	r5,#0x00
      0011D8 78 BC            [12] 1292 	mov	r0,#(_small_buffer + 0x0001)
      0011DA E2               [24] 1293 	movx	a,@r0
      0011DB 7A 00            [12] 1294 	mov	r2,#0x00
      0011DD 42 05            [12] 1295 	orl	ar5,a
      0011DF EA               [12] 1296 	mov	a,r2
      0011E0 42 04            [12] 1297 	orl	ar4,a
                                   1298 ;	W5500.c:194: _w5500_read(starting_addr, (socket * 4) + 3, &val, 1);
      0011E2 78 EA            [12] 1299 	mov	r0,#__w5500_read_PARM_2
      0011E4 74 03            [12] 1300 	mov	a,#0x03
      0011E6 2F               [12] 1301 	add	a,r7
      0011E7 F2               [24] 1302 	movx	@r0,a
      0011E8 78 EB            [12] 1303 	mov	r0,#__w5500_read_PARM_3
      0011EA 74 E9            [12] 1304 	mov	a,#__w5500_readchar_val_65536_61
      0011EC F2               [24] 1305 	movx	@r0,a
      0011ED 08               [12] 1306 	inc	r0
      0011EE E4               [12] 1307 	clr	a
      0011EF F2               [24] 1308 	movx	@r0,a
      0011F0 08               [12] 1309 	inc	r0
      0011F1 74 60            [12] 1310 	mov	a,#0x60
      0011F3 F2               [24] 1311 	movx	@r0,a
      0011F4 78 EE            [12] 1312 	mov	r0,#__w5500_read_PARM_4
      0011F6 74 01            [12] 1313 	mov	a,#0x01
      0011F8 F2               [24] 1314 	movx	@r0,a
      0011F9 08               [12] 1315 	inc	r0
      0011FA E4               [12] 1316 	clr	a
      0011FB F2               [24] 1317 	movx	@r0,a
      0011FC 8D 82            [24] 1318 	mov	dpl,r5
      0011FE 8C 83            [24] 1319 	mov	dph,r4
      001200 C0 06            [24] 1320 	push	ar6
      001202 C0 05            [24] 1321 	push	ar5
      001204 C0 04            [24] 1322 	push	ar4
      001206 12 12 D8         [24] 1323 	lcall	__w5500_read
      001209 D0 04            [24] 1324 	pop	ar4
      00120B D0 05            [24] 1325 	pop	ar5
      00120D D0 06            [24] 1326 	pop	ar6
                                   1327 ;	W5500.c:195: starting_addr++;
      00120F 0D               [12] 1328 	inc	r5
      001210 BD 00 01         [24] 1329 	cjne	r5,#0x00,00103$
      001213 0C               [12] 1330 	inc	r4
      001214                       1331 00103$:
                                   1332 ;	W5500.c:196: small_buffer[0] = starting_addr >> 8;
      001214 8C 07            [24] 1333 	mov	ar7,r4
      001216 78 BB            [12] 1334 	mov	r0,#_small_buffer
      001218 EF               [12] 1335 	mov	a,r7
      001219 F2               [24] 1336 	movx	@r0,a
                                   1337 ;	W5500.c:197: small_buffer[1] = starting_addr & 0xFF;
      00121A 78 BC            [12] 1338 	mov	r0,#(_small_buffer + 0x0001)
      00121C ED               [12] 1339 	mov	a,r5
      00121D F2               [24] 1340 	movx	@r0,a
                                   1341 ;	W5500.c:198: _w5500_write(0x28, (socket  * 4) + 1, small_buffer, 2);
      00121E 78 F1            [12] 1342 	mov	r0,#__w5500_write_PARM_3
      001220 74 BB            [12] 1343 	mov	a,#_small_buffer
      001222 F2               [24] 1344 	movx	@r0,a
      001223 08               [12] 1345 	inc	r0
      001224 E4               [12] 1346 	clr	a
      001225 F2               [24] 1347 	movx	@r0,a
      001226 08               [12] 1348 	inc	r0
      001227 74 60            [12] 1349 	mov	a,#0x60
      001229 F2               [24] 1350 	movx	@r0,a
      00122A 78 F0            [12] 1351 	mov	r0,#__w5500_write_PARM_2
      00122C EE               [12] 1352 	mov	a,r6
      00122D F2               [24] 1353 	movx	@r0,a
      00122E 78 F4            [12] 1354 	mov	r0,#__w5500_write_PARM_4
      001230 74 02            [12] 1355 	mov	a,#0x02
      001232 F2               [24] 1356 	movx	@r0,a
      001233 08               [12] 1357 	inc	r0
      001234 E4               [12] 1358 	clr	a
      001235 F2               [24] 1359 	movx	@r0,a
      001236 90 00 28         [24] 1360 	mov	dptr,#0x0028
      001239 C0 06            [24] 1361 	push	ar6
      00123B 12 13 50         [24] 1362 	lcall	__w5500_write
      00123E D0 06            [24] 1363 	pop	ar6
                                   1364 ;	W5500.c:199: small_buffer[0] = 0x40;
      001240 78 BB            [12] 1365 	mov	r0,#_small_buffer
      001242 74 40            [12] 1366 	mov	a,#0x40
      001244 F2               [24] 1367 	movx	@r0,a
                                   1368 ;	W5500.c:200: _w5500_write(SOCKETN_COMMAND, (socket * 4) + 1, small_buffer, 1);
      001245 78 F1            [12] 1369 	mov	r0,#__w5500_write_PARM_3
      001247 74 BB            [12] 1370 	mov	a,#_small_buffer
      001249 F2               [24] 1371 	movx	@r0,a
      00124A 08               [12] 1372 	inc	r0
      00124B E4               [12] 1373 	clr	a
      00124C F2               [24] 1374 	movx	@r0,a
      00124D 08               [12] 1375 	inc	r0
      00124E 74 60            [12] 1376 	mov	a,#0x60
      001250 F2               [24] 1377 	movx	@r0,a
      001251 78 F0            [12] 1378 	mov	r0,#__w5500_write_PARM_2
      001253 EE               [12] 1379 	mov	a,r6
      001254 F2               [24] 1380 	movx	@r0,a
      001255 78 F4            [12] 1381 	mov	r0,#__w5500_write_PARM_4
      001257 74 01            [12] 1382 	mov	a,#0x01
      001259 F2               [24] 1383 	movx	@r0,a
      00125A 08               [12] 1384 	inc	r0
      00125B E4               [12] 1385 	clr	a
      00125C F2               [24] 1386 	movx	@r0,a
      00125D 90 00 01         [24] 1387 	mov	dptr,#0x0001
      001260 12 13 50         [24] 1388 	lcall	__w5500_write
                                   1389 ;	W5500.c:201: return val;
      001263 78 E9            [12] 1390 	mov	r0,#__w5500_readchar_val_65536_61
      001265 E2               [24] 1391 	movx	a,@r0
      001266 F5 82            [12] 1392 	mov	dpl,a
                                   1393 ;	W5500.c:202: }
      001268 22               [24] 1394 	ret
                                   1395 ;------------------------------------------------------------
                                   1396 ;Allocation info for local variables in function '_w5500_send'
                                   1397 ;------------------------------------------------------------
                                   1398 ;	W5500.c:204: void _w5500_send(unsigned char socket) {
                                   1399 ;	-----------------------------------------
                                   1400 ;	 function _w5500_send
                                   1401 ;	-----------------------------------------
      001269                       1402 __w5500_send:
      001269 AF 82            [24] 1403 	mov	r7,dpl
                                   1404 ;	W5500.c:205: small_buffer[0] = 0x20;
      00126B 78 BB            [12] 1405 	mov	r0,#_small_buffer
      00126D 74 20            [12] 1406 	mov	a,#0x20
      00126F F2               [24] 1407 	movx	@r0,a
                                   1408 ;	W5500.c:206: _w5500_write(SOCKETN_COMMAND, (socket * 4) + 1, small_buffer, 1);
      001270 EF               [12] 1409 	mov	a,r7
      001271 2F               [12] 1410 	add	a,r7
      001272 25 E0            [12] 1411 	add	a,acc
      001274 78 F0            [12] 1412 	mov	r0,#__w5500_write_PARM_2
      001276 04               [12] 1413 	inc	a
      001277 F2               [24] 1414 	movx	@r0,a
      001278 78 F1            [12] 1415 	mov	r0,#__w5500_write_PARM_3
      00127A 74 BB            [12] 1416 	mov	a,#_small_buffer
      00127C F2               [24] 1417 	movx	@r0,a
      00127D 08               [12] 1418 	inc	r0
      00127E E4               [12] 1419 	clr	a
      00127F F2               [24] 1420 	movx	@r0,a
      001280 08               [12] 1421 	inc	r0
      001281 74 60            [12] 1422 	mov	a,#0x60
      001283 F2               [24] 1423 	movx	@r0,a
      001284 78 F4            [12] 1424 	mov	r0,#__w5500_write_PARM_4
      001286 74 01            [12] 1425 	mov	a,#0x01
      001288 F2               [24] 1426 	movx	@r0,a
      001289 08               [12] 1427 	inc	r0
      00128A E4               [12] 1428 	clr	a
      00128B F2               [24] 1429 	movx	@r0,a
      00128C 90 00 01         [24] 1430 	mov	dptr,#0x0001
                                   1431 ;	W5500.c:207: }
      00128F 02 13 50         [24] 1432 	ljmp	__w5500_write
                                   1433 ;------------------------------------------------------------
                                   1434 ;Allocation info for local variables in function '_w5500_get_version'
                                   1435 ;------------------------------------------------------------
                                   1436 ;	W5500.c:209: unsigned char _w5500_get_version() {
                                   1437 ;	-----------------------------------------
                                   1438 ;	 function _w5500_get_version
                                   1439 ;	-----------------------------------------
      001292                       1440 __w5500_get_version:
                                   1441 ;	W5500.c:210: _w5500_read(0x0039, 0x00, small_buffer, 1);
      001292 78 EB            [12] 1442 	mov	r0,#__w5500_read_PARM_3
      001294 74 BB            [12] 1443 	mov	a,#_small_buffer
      001296 F2               [24] 1444 	movx	@r0,a
      001297 08               [12] 1445 	inc	r0
      001298 E4               [12] 1446 	clr	a
      001299 F2               [24] 1447 	movx	@r0,a
      00129A 08               [12] 1448 	inc	r0
      00129B 74 60            [12] 1449 	mov	a,#0x60
      00129D F2               [24] 1450 	movx	@r0,a
      00129E 78 EA            [12] 1451 	mov	r0,#__w5500_read_PARM_2
      0012A0 E4               [12] 1452 	clr	a
      0012A1 F2               [24] 1453 	movx	@r0,a
      0012A2 78 EE            [12] 1454 	mov	r0,#__w5500_read_PARM_4
      0012A4 04               [12] 1455 	inc	a
      0012A5 F2               [24] 1456 	movx	@r0,a
      0012A6 08               [12] 1457 	inc	r0
      0012A7 E4               [12] 1458 	clr	a
      0012A8 F2               [24] 1459 	movx	@r0,a
      0012A9 90 00 39         [24] 1460 	mov	dptr,#0x0039
      0012AC 12 12 D8         [24] 1461 	lcall	__w5500_read
                                   1462 ;	W5500.c:211: return small_buffer[0];
      0012AF 78 BB            [12] 1463 	mov	r0,#_small_buffer
      0012B1 E2               [24] 1464 	movx	a,@r0
      0012B2 F5 82            [12] 1465 	mov	dpl,a
                                   1466 ;	W5500.c:212: }
      0012B4 22               [24] 1467 	ret
                                   1468 ;------------------------------------------------------------
                                   1469 ;Allocation info for local variables in function '_w5500_get_phyconfig'
                                   1470 ;------------------------------------------------------------
                                   1471 ;	W5500.c:214: unsigned char _w5500_get_phyconfig() {
                                   1472 ;	-----------------------------------------
                                   1473 ;	 function _w5500_get_phyconfig
                                   1474 ;	-----------------------------------------
      0012B5                       1475 __w5500_get_phyconfig:
                                   1476 ;	W5500.c:215: _w5500_read(0x002E, 0x00, small_buffer, 1);
      0012B5 78 EB            [12] 1477 	mov	r0,#__w5500_read_PARM_3
      0012B7 74 BB            [12] 1478 	mov	a,#_small_buffer
      0012B9 F2               [24] 1479 	movx	@r0,a
      0012BA 08               [12] 1480 	inc	r0
      0012BB E4               [12] 1481 	clr	a
      0012BC F2               [24] 1482 	movx	@r0,a
      0012BD 08               [12] 1483 	inc	r0
      0012BE 74 60            [12] 1484 	mov	a,#0x60
      0012C0 F2               [24] 1485 	movx	@r0,a
      0012C1 78 EA            [12] 1486 	mov	r0,#__w5500_read_PARM_2
      0012C3 E4               [12] 1487 	clr	a
      0012C4 F2               [24] 1488 	movx	@r0,a
      0012C5 78 EE            [12] 1489 	mov	r0,#__w5500_read_PARM_4
      0012C7 04               [12] 1490 	inc	a
      0012C8 F2               [24] 1491 	movx	@r0,a
      0012C9 08               [12] 1492 	inc	r0
      0012CA E4               [12] 1493 	clr	a
      0012CB F2               [24] 1494 	movx	@r0,a
      0012CC 90 00 2E         [24] 1495 	mov	dptr,#0x002e
      0012CF 12 12 D8         [24] 1496 	lcall	__w5500_read
                                   1497 ;	W5500.c:216: return small_buffer[0];
      0012D2 78 BB            [12] 1498 	mov	r0,#_small_buffer
      0012D4 E2               [24] 1499 	movx	a,@r0
      0012D5 F5 82            [12] 1500 	mov	dpl,a
                                   1501 ;	W5500.c:217: }
      0012D7 22               [24] 1502 	ret
                                   1503 ;------------------------------------------------------------
                                   1504 ;Allocation info for local variables in function '_w5500_read'
                                   1505 ;------------------------------------------------------------
                                   1506 ;sloc0                     Allocated with name '__w5500_read_sloc0_1_0'
                                   1507 ;------------------------------------------------------------
                                   1508 ;	W5500.c:219: void _w5500_read(unsigned int oa, unsigned char bsb, unsigned char* data, unsigned int length) {
                                   1509 ;	-----------------------------------------
                                   1510 ;	 function _w5500_read
                                   1511 ;	-----------------------------------------
      0012D8                       1512 __w5500_read:
      0012D8 AE 82            [24] 1513 	mov	r6,dpl
      0012DA AF 83            [24] 1514 	mov	r7,dph
                                   1515 ;	W5500.c:220: unsigned char oa_high = oa >> 8;
      0012DC 8F 05            [24] 1516 	mov	ar5,r7
                                   1517 ;	W5500.c:221: unsigned char oa_low = oa & 0xFF;
                                   1518 ;	W5500.c:222: unsigned char true_bsb = ((bsb << 3) | (0 << 2)); // | om, this was removed because om always == 0 in my use cases
      0012DE 78 EA            [12] 1519 	mov	r0,#__w5500_read_PARM_2
      0012E0 E2               [24] 1520 	movx	a,@r0
      0012E1 C4               [12] 1521 	swap	a
      0012E2 03               [12] 1522 	rr	a
      0012E3 54 F8            [12] 1523 	anl	a,#0xf8
      0012E5 FF               [12] 1524 	mov	r7,a
                                   1525 ;	W5500.c:224: _spigeneric_frame_start();
      0012E6 C0 07            [24] 1526 	push	ar7
      0012E8 C0 06            [24] 1527 	push	ar6
      0012EA C0 05            [24] 1528 	push	ar5
      0012EC 12 0B C2         [24] 1529 	lcall	__spigeneric_frame_start
      0012EF D0 05            [24] 1530 	pop	ar5
                                   1531 ;	W5500.c:226: _spigeneric_spit_byte(oa_high);
      0012F1 8D 82            [24] 1532 	mov	dpl,r5
      0012F3 12 0B EC         [24] 1533 	lcall	__spigeneric_spit_byte
      0012F6 D0 06            [24] 1534 	pop	ar6
                                   1535 ;	W5500.c:227: _spigeneric_spit_byte(oa_low);
      0012F8 8E 82            [24] 1536 	mov	dpl,r6
      0012FA 12 0B EC         [24] 1537 	lcall	__spigeneric_spit_byte
      0012FD D0 07            [24] 1538 	pop	ar7
                                   1539 ;	W5500.c:228: _spigeneric_spit_byte(true_bsb);
      0012FF 8F 82            [24] 1540 	mov	dpl,r7
      001301 12 0B EC         [24] 1541 	lcall	__spigeneric_spit_byte
                                   1542 ;	W5500.c:229: while (length--)    *(data++) = _spigeneric_spit_byte(0x00);
      001304 78 EB            [12] 1543 	mov	r0,#__w5500_read_PARM_3
      001306 E2               [24] 1544 	movx	a,@r0
      001307 FD               [12] 1545 	mov	r5,a
      001308 08               [12] 1546 	inc	r0
      001309 E2               [24] 1547 	movx	a,@r0
      00130A FE               [12] 1548 	mov	r6,a
      00130B 08               [12] 1549 	inc	r0
      00130C E2               [24] 1550 	movx	a,@r0
      00130D FF               [12] 1551 	mov	r7,a
      00130E 78 EE            [12] 1552 	mov	r0,#__w5500_read_PARM_4
      001310 E2               [24] 1553 	movx	a,@r0
      001311 F5 08            [12] 1554 	mov	__w5500_read_sloc0_1_0,a
      001313 08               [12] 1555 	inc	r0
      001314 E2               [24] 1556 	movx	a,@r0
      001315 F5 09            [12] 1557 	mov	(__w5500_read_sloc0_1_0 + 1),a
      001317                       1558 00101$:
      001317 AA 08            [24] 1559 	mov	r2,__w5500_read_sloc0_1_0
      001319 AC 09            [24] 1560 	mov	r4,(__w5500_read_sloc0_1_0 + 1)
      00131B 15 08            [12] 1561 	dec	__w5500_read_sloc0_1_0
      00131D 74 FF            [12] 1562 	mov	a,#0xff
      00131F B5 08 02         [24] 1563 	cjne	a,__w5500_read_sloc0_1_0,00115$
      001322 15 09            [12] 1564 	dec	(__w5500_read_sloc0_1_0 + 1)
      001324                       1565 00115$:
      001324 EA               [12] 1566 	mov	a,r2
      001325 4C               [12] 1567 	orl	a,r4
      001326 60 25            [24] 1568 	jz	00103$
      001328 75 82 00         [24] 1569 	mov	dpl,#0x00
      00132B C0 07            [24] 1570 	push	ar7
      00132D C0 06            [24] 1571 	push	ar6
      00132F C0 05            [24] 1572 	push	ar5
      001331 12 0B EC         [24] 1573 	lcall	__spigeneric_spit_byte
      001334 AC 82            [24] 1574 	mov	r4,dpl
      001336 D0 05            [24] 1575 	pop	ar5
      001338 D0 06            [24] 1576 	pop	ar6
      00133A D0 07            [24] 1577 	pop	ar7
      00133C 8D 82            [24] 1578 	mov	dpl,r5
      00133E 8E 83            [24] 1579 	mov	dph,r6
      001340 8F F0            [24] 1580 	mov	b,r7
      001342 EC               [12] 1581 	mov	a,r4
      001343 12 13 C8         [24] 1582 	lcall	__gptrput
      001346 A3               [24] 1583 	inc	dptr
      001347 AD 82            [24] 1584 	mov	r5,dpl
      001349 AE 83            [24] 1585 	mov	r6,dph
      00134B 80 CA            [24] 1586 	sjmp	00101$
      00134D                       1587 00103$:
                                   1588 ;	W5500.c:231: _spigeneric_frame_end();
                                   1589 ;	W5500.c:232: }
      00134D 02 0B CD         [24] 1590 	ljmp	__spigeneric_frame_end
                                   1591 ;------------------------------------------------------------
                                   1592 ;Allocation info for local variables in function '_w5500_write'
                                   1593 ;------------------------------------------------------------
                                   1594 ;sloc0                     Allocated with name '__w5500_write_sloc0_1_0'
                                   1595 ;------------------------------------------------------------
                                   1596 ;	W5500.c:234: void _w5500_write(unsigned int oa, unsigned char bsb, const unsigned char* data, unsigned int length) {
                                   1597 ;	-----------------------------------------
                                   1598 ;	 function _w5500_write
                                   1599 ;	-----------------------------------------
      001350                       1600 __w5500_write:
      001350 AE 82            [24] 1601 	mov	r6,dpl
      001352 AF 83            [24] 1602 	mov	r7,dph
                                   1603 ;	W5500.c:235: unsigned char oa_high = oa >> 8;
      001354 8F 05            [24] 1604 	mov	ar5,r7
                                   1605 ;	W5500.c:236: unsigned char oa_low = oa & 0xFF;
                                   1606 ;	W5500.c:237: unsigned char true_bsb = ((bsb << 3) | (1 << 2)); // | om, this was removed because om always == 0 in my use cases
      001356 78 F0            [12] 1607 	mov	r0,#__w5500_write_PARM_2
      001358 E2               [24] 1608 	movx	a,@r0
      001359 C4               [12] 1609 	swap	a
      00135A 03               [12] 1610 	rr	a
      00135B 54 F8            [12] 1611 	anl	a,#0xf8
      00135D FF               [12] 1612 	mov	r7,a
      00135E 43 07 04         [24] 1613 	orl	ar7,#0x04
                                   1614 ;	W5500.c:239: _spigeneric_frame_start();
      001361 C0 07            [24] 1615 	push	ar7
      001363 C0 06            [24] 1616 	push	ar6
      001365 C0 05            [24] 1617 	push	ar5
      001367 12 0B C2         [24] 1618 	lcall	__spigeneric_frame_start
      00136A D0 05            [24] 1619 	pop	ar5
                                   1620 ;	W5500.c:241: _spigeneric_spit_byte(oa_high);
      00136C 8D 82            [24] 1621 	mov	dpl,r5
      00136E 12 0B EC         [24] 1622 	lcall	__spigeneric_spit_byte
      001371 D0 06            [24] 1623 	pop	ar6
                                   1624 ;	W5500.c:242: _spigeneric_spit_byte(oa_low);
      001373 8E 82            [24] 1625 	mov	dpl,r6
      001375 12 0B EC         [24] 1626 	lcall	__spigeneric_spit_byte
      001378 D0 07            [24] 1627 	pop	ar7
                                   1628 ;	W5500.c:243: _spigeneric_spit_byte(true_bsb);
      00137A 8F 82            [24] 1629 	mov	dpl,r7
      00137C 12 0B EC         [24] 1630 	lcall	__spigeneric_spit_byte
                                   1631 ;	W5500.c:244: while (length--) _spigeneric_spit_byte(*(data++));
      00137F 78 F1            [12] 1632 	mov	r0,#__w5500_write_PARM_3
      001381 E2               [24] 1633 	movx	a,@r0
      001382 FD               [12] 1634 	mov	r5,a
      001383 08               [12] 1635 	inc	r0
      001384 E2               [24] 1636 	movx	a,@r0
      001385 FE               [12] 1637 	mov	r6,a
      001386 08               [12] 1638 	inc	r0
      001387 E2               [24] 1639 	movx	a,@r0
      001388 FF               [12] 1640 	mov	r7,a
      001389 78 F4            [12] 1641 	mov	r0,#__w5500_write_PARM_4
      00138B E2               [24] 1642 	movx	a,@r0
      00138C F5 0A            [12] 1643 	mov	__w5500_write_sloc0_1_0,a
      00138E 08               [12] 1644 	inc	r0
      00138F E2               [24] 1645 	movx	a,@r0
      001390 F5 0B            [12] 1646 	mov	(__w5500_write_sloc0_1_0 + 1),a
      001392                       1647 00101$:
      001392 AA 0A            [24] 1648 	mov	r2,__w5500_write_sloc0_1_0
      001394 AC 0B            [24] 1649 	mov	r4,(__w5500_write_sloc0_1_0 + 1)
      001396 15 0A            [12] 1650 	dec	__w5500_write_sloc0_1_0
      001398 74 FF            [12] 1651 	mov	a,#0xff
      00139A B5 0A 02         [24] 1652 	cjne	a,__w5500_write_sloc0_1_0,00115$
      00139D 15 0B            [12] 1653 	dec	(__w5500_write_sloc0_1_0 + 1)
      00139F                       1654 00115$:
      00139F EA               [12] 1655 	mov	a,r2
      0013A0 4C               [12] 1656 	orl	a,r4
      0013A1 60 22            [24] 1657 	jz	00103$
      0013A3 8D 82            [24] 1658 	mov	dpl,r5
      0013A5 8E 83            [24] 1659 	mov	dph,r6
      0013A7 8F F0            [24] 1660 	mov	b,r7
      0013A9 12 15 99         [24] 1661 	lcall	__gptrget
      0013AC FC               [12] 1662 	mov	r4,a
      0013AD A3               [24] 1663 	inc	dptr
      0013AE AD 82            [24] 1664 	mov	r5,dpl
      0013B0 AE 83            [24] 1665 	mov	r6,dph
      0013B2 8C 82            [24] 1666 	mov	dpl,r4
      0013B4 C0 07            [24] 1667 	push	ar7
      0013B6 C0 06            [24] 1668 	push	ar6
      0013B8 C0 05            [24] 1669 	push	ar5
      0013BA 12 0B EC         [24] 1670 	lcall	__spigeneric_spit_byte
      0013BD D0 05            [24] 1671 	pop	ar5
      0013BF D0 06            [24] 1672 	pop	ar6
      0013C1 D0 07            [24] 1673 	pop	ar7
      0013C3 80 CD            [24] 1674 	sjmp	00101$
      0013C5                       1675 00103$:
                                   1676 ;	W5500.c:246: _spigeneric_frame_end();
                                   1677 ;	W5500.c:247: }
      0013C5 02 0B CD         [24] 1678 	ljmp	__spigeneric_frame_end
                                   1679 	.area CSEG    (CODE)
                                   1680 	.area CONST   (CODE)
                                   1681 	.area XINIT   (CODE)
                                   1682 	.area CABS    (ABS,CODE)
