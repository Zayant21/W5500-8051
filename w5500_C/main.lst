                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-medium
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _loop
                                     13 	.globl _setup
                                     14 	.globl _setuptcp
                                     15 	.globl _menudisplay
                                     16 	.globl _displayMACAddress
                                     17 	.globl _displayIPAddress
                                     18 	.globl _extractAndAssign
                                     19 	.globl _parseMAC
                                     20 	.globl _hexCharToInt
                                     21 	.globl _strcmp
                                     22 	.globl _strlen
                                     23 	.globl _toupper
                                     24 	.globl __w5500_write
                                     25 	.globl __w5500_readchar
                                     26 	.globl __w5500_listen
                                     27 	.globl __w5500_close
                                     28 	.globl __w5500_open
                                     29 	.globl __w5500_set_tcp
                                     30 	.globl __w5500_set_udp
                                     31 	.globl __w5500_send
                                     32 	.globl __w5500_get_status
                                     33 	.globl __w5500_bytesinbuffer
                                     34 	.globl __w5500_writeto
                                     35 	.globl __w5500_set_destinationip
                                     36 	.globl __w5500_set_remoteport
                                     37 	.globl __w5500_set_sourceport
                                     38 	.globl __serial_putbyte_dec
                                     39 	.globl __serial_putbyte_hex
                                     40 	.globl __serial_emptybuffer
                                     41 	.globl __serial_putstr
                                     42 	.globl __serial_putchar
                                     43 	.globl __serial_begin
                                     44 	.globl _CY
                                     45 	.globl _AC
                                     46 	.globl _F0
                                     47 	.globl _RS1
                                     48 	.globl _RS0
                                     49 	.globl _OV
                                     50 	.globl _F1
                                     51 	.globl _P
                                     52 	.globl _PS
                                     53 	.globl _PT1
                                     54 	.globl _PX1
                                     55 	.globl _PT0
                                     56 	.globl _PX0
                                     57 	.globl _RD
                                     58 	.globl _WR
                                     59 	.globl _T1
                                     60 	.globl _T0
                                     61 	.globl _INT1
                                     62 	.globl _INT0
                                     63 	.globl _TXD
                                     64 	.globl _RXD
                                     65 	.globl _P3_7
                                     66 	.globl _P3_6
                                     67 	.globl _P3_5
                                     68 	.globl _P3_4
                                     69 	.globl _P3_3
                                     70 	.globl _P3_2
                                     71 	.globl _P3_1
                                     72 	.globl _P3_0
                                     73 	.globl _EA
                                     74 	.globl _ES
                                     75 	.globl _ET1
                                     76 	.globl _EX1
                                     77 	.globl _ET0
                                     78 	.globl _EX0
                                     79 	.globl _P2_7
                                     80 	.globl _P2_6
                                     81 	.globl _P2_5
                                     82 	.globl _P2_4
                                     83 	.globl _P2_3
                                     84 	.globl _P2_2
                                     85 	.globl _P2_1
                                     86 	.globl _P2_0
                                     87 	.globl _SM0
                                     88 	.globl _SM1
                                     89 	.globl _SM2
                                     90 	.globl _REN
                                     91 	.globl _TB8
                                     92 	.globl _RB8
                                     93 	.globl _TI
                                     94 	.globl _RI
                                     95 	.globl _P1_7
                                     96 	.globl _P1_6
                                     97 	.globl _P1_5
                                     98 	.globl _P1_4
                                     99 	.globl _P1_3
                                    100 	.globl _P1_2
                                    101 	.globl _P1_1
                                    102 	.globl _P1_0
                                    103 	.globl _TF1
                                    104 	.globl _TR1
                                    105 	.globl _TF0
                                    106 	.globl _TR0
                                    107 	.globl _IE1
                                    108 	.globl _IT1
                                    109 	.globl _IE0
                                    110 	.globl _IT0
                                    111 	.globl _P0_7
                                    112 	.globl _P0_6
                                    113 	.globl _P0_5
                                    114 	.globl _P0_4
                                    115 	.globl _P0_3
                                    116 	.globl _P0_2
                                    117 	.globl _P0_1
                                    118 	.globl _P0_0
                                    119 	.globl _B
                                    120 	.globl _ACC
                                    121 	.globl _PSW
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _strcmp_PARM_2
                                    141 	.globl _serialInput
                                    142 	.globl _RTU_Address
                                    143 	.globl _dest_ip
                                    144 	.globl _mac
                                    145 	.globl _ip
                                    146 	.globl _subnet
                                    147 	.globl _gateway
                                    148 ;--------------------------------------------------------
                                    149 ; special function registers
                                    150 ;--------------------------------------------------------
                                    151 	.area RSEG    (ABS,DATA)
      000000                        152 	.org 0x0000
                           000080   153 _P0	=	0x0080
                           000081   154 _SP	=	0x0081
                           000082   155 _DPL	=	0x0082
                           000083   156 _DPH	=	0x0083
                           000087   157 _PCON	=	0x0087
                           000088   158 _TCON	=	0x0088
                           000089   159 _TMOD	=	0x0089
                           00008A   160 _TL0	=	0x008a
                           00008B   161 _TL1	=	0x008b
                           00008C   162 _TH0	=	0x008c
                           00008D   163 _TH1	=	0x008d
                           000090   164 _P1	=	0x0090
                           000098   165 _SCON	=	0x0098
                           000099   166 _SBUF	=	0x0099
                           0000A0   167 _P2	=	0x00a0
                           0000A8   168 _IE	=	0x00a8
                           0000B0   169 _P3	=	0x00b0
                           0000B8   170 _IP	=	0x00b8
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000F0   173 _B	=	0x00f0
                                    174 ;--------------------------------------------------------
                                    175 ; special function bits
                                    176 ;--------------------------------------------------------
                                    177 	.area RSEG    (ABS,DATA)
      000000                        178 	.org 0x0000
                           000080   179 _P0_0	=	0x0080
                           000081   180 _P0_1	=	0x0081
                           000082   181 _P0_2	=	0x0082
                           000083   182 _P0_3	=	0x0083
                           000084   183 _P0_4	=	0x0084
                           000085   184 _P0_5	=	0x0085
                           000086   185 _P0_6	=	0x0086
                           000087   186 _P0_7	=	0x0087
                           000088   187 _IT0	=	0x0088
                           000089   188 _IE0	=	0x0089
                           00008A   189 _IT1	=	0x008a
                           00008B   190 _IE1	=	0x008b
                           00008C   191 _TR0	=	0x008c
                           00008D   192 _TF0	=	0x008d
                           00008E   193 _TR1	=	0x008e
                           00008F   194 _TF1	=	0x008f
                           000090   195 _P1_0	=	0x0090
                           000091   196 _P1_1	=	0x0091
                           000092   197 _P1_2	=	0x0092
                           000093   198 _P1_3	=	0x0093
                           000094   199 _P1_4	=	0x0094
                           000095   200 _P1_5	=	0x0095
                           000096   201 _P1_6	=	0x0096
                           000097   202 _P1_7	=	0x0097
                           000098   203 _RI	=	0x0098
                           000099   204 _TI	=	0x0099
                           00009A   205 _RB8	=	0x009a
                           00009B   206 _TB8	=	0x009b
                           00009C   207 _REN	=	0x009c
                           00009D   208 _SM2	=	0x009d
                           00009E   209 _SM1	=	0x009e
                           00009F   210 _SM0	=	0x009f
                           0000A0   211 _P2_0	=	0x00a0
                           0000A1   212 _P2_1	=	0x00a1
                           0000A2   213 _P2_2	=	0x00a2
                           0000A3   214 _P2_3	=	0x00a3
                           0000A4   215 _P2_4	=	0x00a4
                           0000A5   216 _P2_5	=	0x00a5
                           0000A6   217 _P2_6	=	0x00a6
                           0000A7   218 _P2_7	=	0x00a7
                           0000A8   219 _EX0	=	0x00a8
                           0000A9   220 _ET0	=	0x00a9
                           0000AA   221 _EX1	=	0x00aa
                           0000AB   222 _ET1	=	0x00ab
                           0000AC   223 _ES	=	0x00ac
                           0000AF   224 _EA	=	0x00af
                           0000B0   225 _P3_0	=	0x00b0
                           0000B1   226 _P3_1	=	0x00b1
                           0000B2   227 _P3_2	=	0x00b2
                           0000B3   228 _P3_3	=	0x00b3
                           0000B4   229 _P3_4	=	0x00b4
                           0000B5   230 _P3_5	=	0x00b5
                           0000B6   231 _P3_6	=	0x00b6
                           0000B7   232 _P3_7	=	0x00b7
                           0000B0   233 _RXD	=	0x00b0
                           0000B1   234 _TXD	=	0x00b1
                           0000B2   235 _INT0	=	0x00b2
                           0000B3   236 _INT1	=	0x00b3
                           0000B4   237 _T0	=	0x00b4
                           0000B5   238 _T1	=	0x00b5
                           0000B6   239 _WR	=	0x00b6
                           0000B7   240 _RD	=	0x00b7
                           0000B8   241 _PX0	=	0x00b8
                           0000B9   242 _PT0	=	0x00b9
                           0000BA   243 _PX1	=	0x00ba
                           0000BB   244 _PT1	=	0x00bb
                           0000BC   245 _PS	=	0x00bc
                           0000D0   246 _P	=	0x00d0
                           0000D1   247 _F1	=	0x00d1
                           0000D2   248 _OV	=	0x00d2
                           0000D3   249 _RS0	=	0x00d3
                           0000D4   250 _RS1	=	0x00d4
                           0000D5   251 _F0	=	0x00d5
                           0000D6   252 _AC	=	0x00d6
                           0000D7   253 _CY	=	0x00d7
                                    254 ;--------------------------------------------------------
                                    255 ; overlayable register banks
                                    256 ;--------------------------------------------------------
                                    257 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        258 	.ds 8
                                    259 ;--------------------------------------------------------
                                    260 ; internal ram data
                                    261 ;--------------------------------------------------------
                                    262 	.area DSEG    (DATA)
                                    263 ;--------------------------------------------------------
                                    264 ; overlayable items in internal ram 
                                    265 ;--------------------------------------------------------
                                    266 	.area	OSEG    (OVR,DATA)
      000000                        267 _strcmp_sloc0_1_0:
      000000                        268 	.ds 1
      000001                        269 _strcmp_sloc1_1_0:
      000001                        270 	.ds 1
      000002                        271 _strcmp_sloc2_1_0:
      000002                        272 	.ds 3
                                    273 	.area	OSEG    (OVR,DATA)
      000000                        274 _extractAndAssign_sloc0_1_0:
      000000                        275 	.ds 3
                                    276 ;--------------------------------------------------------
                                    277 ; Stack segment in internal ram 
                                    278 ;--------------------------------------------------------
                                    279 	.area	SSEG
      000000                        280 __start__stack:
      000000                        281 	.ds	1
                                    282 
                                    283 ;--------------------------------------------------------
                                    284 ; indirectly addressable internal ram data
                                    285 ;--------------------------------------------------------
                                    286 	.area ISEG    (DATA)
                                    287 ;--------------------------------------------------------
                                    288 ; absolute internal ram data
                                    289 ;--------------------------------------------------------
                                    290 	.area IABS    (ABS,DATA)
                                    291 	.area IABS    (ABS,DATA)
                                    292 ;--------------------------------------------------------
                                    293 ; bit data
                                    294 ;--------------------------------------------------------
                                    295 	.area BSEG    (BIT)
                                    296 ;--------------------------------------------------------
                                    297 ; paged external ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area PSEG    (PAG,XDATA)
      000000                        300 _gateway::
      000000                        301 	.ds 4
      000004                        302 _subnet::
      000004                        303 	.ds 4
      000008                        304 _ip::
      000008                        305 	.ds 4
      00000C                        306 _mac::
      00000C                        307 	.ds 6
      000012                        308 _dest_ip::
      000012                        309 	.ds 4
      000016                        310 _RTU_Address::
      000016                        311 	.ds 1
      000017                        312 _serialInput::
      000017                        313 	.ds 3
      00001A                        314 _strcmp_PARM_2:
      00001A                        315 	.ds 3
      00001D                        316 _parseMAC_str_65536_54:
      00001D                        317 	.ds 3
      000020                        318 _extractAndAssign_arr_65536_59:
      000020                        319 	.ds 3
      000023                        320 _extractAndAssign_curr_address_65536_60:
      000023                        321 	.ds 3
      000026                        322 _extractAndAssign_octet_65536_60:
      000026                        323 	.ds 1
      000027                        324 _extractAndAssign_value_65536_60:
      000027                        325 	.ds 1
      000028                        326 _loop_recieved_udp_65536_80:
      000028                        327 	.ds 1
      000029                        328 _loop_input_buffer_65536_80:
      000029                        329 	.ds 20
      00003D                        330 _loop_input_index_65536_80:
      00003D                        331 	.ds 1
      00003E                        332 _loop_arrbuf_65536_80:
      00003E                        333 	.ds 20
      000052                        334 _loop_serial_buffer_65536_80:
      000052                        335 	.ds 20
      000066                        336 _loop_serial_index_65536_80:
      000066                        337 	.ds 1
      000067                        338 _loop_inputLength_131073_82:
      000067                        339 	.ds 1
                                    340 ;--------------------------------------------------------
                                    341 ; external ram data
                                    342 ;--------------------------------------------------------
                                    343 	.area XSEG    (XDATA)
                                    344 ;--------------------------------------------------------
                                    345 ; absolute external ram data
                                    346 ;--------------------------------------------------------
                                    347 	.area XABS    (ABS,XDATA)
                                    348 ;--------------------------------------------------------
                                    349 ; external initialized ram data
                                    350 ;--------------------------------------------------------
                                    351 	.area XISEG   (XDATA)
                                    352 	.area HOME    (CODE)
                                    353 	.area GSINIT0 (CODE)
                                    354 	.area GSINIT1 (CODE)
                                    355 	.area GSINIT2 (CODE)
                                    356 	.area GSINIT3 (CODE)
                                    357 	.area GSINIT4 (CODE)
                                    358 	.area GSINIT5 (CODE)
                                    359 	.area GSINIT  (CODE)
                                    360 	.area GSFINAL (CODE)
                                    361 	.area CSEG    (CODE)
                                    362 ;--------------------------------------------------------
                                    363 ; interrupt vector 
                                    364 ;--------------------------------------------------------
                                    365 	.area HOME    (CODE)
      000000                        366 __interrupt_vect:
      000000 02r00r00         [24]  367 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  368 	reti
      000004                        369 	.ds	7
      00000B 32               [24]  370 	reti
      00000C                        371 	.ds	7
      000013 32               [24]  372 	reti
      000014                        373 	.ds	7
      00001B 32               [24]  374 	reti
      00001C                        375 	.ds	7
      000023 02r00r00         [24]  376 	ljmp	__serial_interrupt
                                    377 ;--------------------------------------------------------
                                    378 ; global & static initialisations
                                    379 ;--------------------------------------------------------
                                    380 	.area HOME    (CODE)
                                    381 	.area GSINIT  (CODE)
                                    382 	.area GSFINAL (CODE)
                                    383 	.area GSINIT  (CODE)
                                    384 	.globl __sdcc_gsinit_startup
                                    385 	.globl __sdcc_program_startup
                                    386 	.globl __start__stack
                                    387 	.globl __mcs51_genXINIT
                                    388 	.globl __mcs51_genXRAMCLEAR
                                    389 	.globl __mcs51_genRAMCLEAR
                                    390 ;	main.c:8: unsigned char gateway[4] = {192, 168, 16, 1};
      000000 78r00            [12]  391 	mov	r0,#_gateway
      000002 74 C0            [12]  392 	mov	a,#0xc0
      000004 F2               [24]  393 	movx	@r0,a
      000005 78r01            [12]  394 	mov	r0,#(_gateway + 0x0001)
      000007 74 A8            [12]  395 	mov	a,#0xa8
      000009 F2               [24]  396 	movx	@r0,a
      00000A 78r02            [12]  397 	mov	r0,#(_gateway + 0x0002)
      00000C 74 10            [12]  398 	mov	a,#0x10
      00000E F2               [24]  399 	movx	@r0,a
      00000F 78r03            [12]  400 	mov	r0,#(_gateway + 0x0003)
      000011 C4               [12]  401 	swap	a
      000012 F2               [24]  402 	movx	@r0,a
                                    403 ;	main.c:9: unsigned char subnet[4] = {255, 255, 255, 0};
      000013 78r04            [12]  404 	mov	r0,#_subnet
      000015 74 FF            [12]  405 	mov	a,#0xff
      000017 F2               [24]  406 	movx	@r0,a
      000018 78r05            [12]  407 	mov	r0,#(_subnet + 0x0001)
      00001A F2               [24]  408 	movx	@r0,a
      00001B 78r06            [12]  409 	mov	r0,#(_subnet + 0x0002)
      00001D F2               [24]  410 	movx	@r0,a
      00001E 78r07            [12]  411 	mov	r0,#(_subnet + 0x0003)
      000020 E4               [12]  412 	clr	a
      000021 F2               [24]  413 	movx	@r0,a
                                    414 ;	main.c:10: unsigned char ip[4] = {192, 168, 16, 69};
      000022 78r08            [12]  415 	mov	r0,#_ip
      000024 74 C0            [12]  416 	mov	a,#0xc0
      000026 F2               [24]  417 	movx	@r0,a
      000027 78r09            [12]  418 	mov	r0,#(_ip + 0x0001)
      000029 74 A8            [12]  419 	mov	a,#0xa8
      00002B F2               [24]  420 	movx	@r0,a
      00002C 78r0A            [12]  421 	mov	r0,#(_ip + 0x0002)
      00002E 74 10            [12]  422 	mov	a,#0x10
      000030 F2               [24]  423 	movx	@r0,a
      000031 78r0B            [12]  424 	mov	r0,#(_ip + 0x0003)
      000033 74 45            [12]  425 	mov	a,#0x45
      000035 F2               [24]  426 	movx	@r0,a
                                    427 ;	main.c:11: unsigned char mac[6] = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED};
      000036 78r0C            [12]  428 	mov	r0,#_mac
      000038 74 DE            [12]  429 	mov	a,#0xde
      00003A F2               [24]  430 	movx	@r0,a
      00003B 78r0D            [12]  431 	mov	r0,#(_mac + 0x0001)
      00003D 74 AD            [12]  432 	mov	a,#0xad
      00003F F2               [24]  433 	movx	@r0,a
      000040 78r0E            [12]  434 	mov	r0,#(_mac + 0x0002)
      000042 74 BE            [12]  435 	mov	a,#0xbe
      000044 F2               [24]  436 	movx	@r0,a
      000045 78r0F            [12]  437 	mov	r0,#(_mac + 0x0003)
      000047 74 EF            [12]  438 	mov	a,#0xef
      000049 F2               [24]  439 	movx	@r0,a
      00004A 78r10            [12]  440 	mov	r0,#(_mac + 0x0004)
      00004C C4               [12]  441 	swap	a
      00004D F2               [24]  442 	movx	@r0,a
      00004E 78r11            [12]  443 	mov	r0,#(_mac + 0x0005)
      000050 74 ED            [12]  444 	mov	a,#0xed
      000052 F2               [24]  445 	movx	@r0,a
                                    446 ;	main.c:12: unsigned char dest_ip[4] = {192, 168, 16, 151};
      000053 78r12            [12]  447 	mov	r0,#_dest_ip
      000055 74 C0            [12]  448 	mov	a,#0xc0
      000057 F2               [24]  449 	movx	@r0,a
      000058 78r13            [12]  450 	mov	r0,#(_dest_ip + 0x0001)
      00005A 74 A8            [12]  451 	mov	a,#0xa8
      00005C F2               [24]  452 	movx	@r0,a
      00005D 78r14            [12]  453 	mov	r0,#(_dest_ip + 0x0002)
      00005F 74 10            [12]  454 	mov	a,#0x10
      000061 F2               [24]  455 	movx	@r0,a
      000062 78r15            [12]  456 	mov	r0,#(_dest_ip + 0x0003)
      000064 74 97            [12]  457 	mov	a,#0x97
      000066 F2               [24]  458 	movx	@r0,a
                                    459 ;	main.c:16: unsigned char RTU_Address = '3';
      000067 78r16            [12]  460 	mov	r0,#_RTU_Address
      000069 74 33            [12]  461 	mov	a,#0x33
      00006B F2               [24]  462 	movx	@r0,a
                                    463 	.area GSFINAL (CODE)
      000000 02r00r26         [24]  464 	ljmp	__sdcc_program_startup
                                    465 ;--------------------------------------------------------
                                    466 ; Home
                                    467 ;--------------------------------------------------------
                                    468 	.area HOME    (CODE)
                                    469 	.area HOME    (CODE)
      000026                        470 __sdcc_program_startup:
      000026 02r09rD7         [24]  471 	ljmp	_main
                                    472 ;	return from main will return to caller
                                    473 ;--------------------------------------------------------
                                    474 ; code
                                    475 ;--------------------------------------------------------
                                    476 	.area CSEG    (CODE)
                                    477 ;------------------------------------------------------------
                                    478 ;Allocation info for local variables in function 'strlen'
                                    479 ;------------------------------------------------------------
                                    480 ;	main.c:27: unsigned char strlen(const unsigned char* str) {
                                    481 ;	-----------------------------------------
                                    482 ;	 function strlen
                                    483 ;	-----------------------------------------
      000000                        484 _strlen:
                           000007   485 	ar7 = 0x07
                           000006   486 	ar6 = 0x06
                           000005   487 	ar5 = 0x05
                           000004   488 	ar4 = 0x04
                           000003   489 	ar3 = 0x03
                           000002   490 	ar2 = 0x02
                           000001   491 	ar1 = 0x01
                           000000   492 	ar0 = 0x00
      000000 AD 82            [24]  493 	mov	r5,dpl
      000002 AE 83            [24]  494 	mov	r6,dph
      000004 AF F0            [24]  495 	mov	r7,b
                                    496 ;	main.c:29: while (*(str++)) ++ret;
      000006 7C 00            [12]  497 	mov	r4,#0x00
      000008                        498 00101$:
      000008 8D 82            [24]  499 	mov	dpl,r5
      00000A 8E 83            [24]  500 	mov	dph,r6
      00000C 8F F0            [24]  501 	mov	b,r7
      00000E 12r00r00         [24]  502 	lcall	__gptrget
      000011 FB               [12]  503 	mov	r3,a
      000012 A3               [24]  504 	inc	dptr
      000013 AD 82            [24]  505 	mov	r5,dpl
      000015 AE 83            [24]  506 	mov	r6,dph
      000017 EB               [12]  507 	mov	a,r3
      000018 60 03            [24]  508 	jz	00103$
      00001A 0C               [12]  509 	inc	r4
      00001B 80 EB            [24]  510 	sjmp	00101$
      00001D                        511 00103$:
                                    512 ;	main.c:30: return ret;
      00001D 8C 82            [24]  513 	mov	dpl,r4
                                    514 ;	main.c:31: }
      00001F 22               [24]  515 	ret
                                    516 ;------------------------------------------------------------
                                    517 ;Allocation info for local variables in function 'strcmp'
                                    518 ;------------------------------------------------------------
                                    519 ;sloc0                     Allocated with name '_strcmp_sloc0_1_0'
                                    520 ;sloc1                     Allocated with name '_strcmp_sloc1_1_0'
                                    521 ;sloc2                     Allocated with name '_strcmp_sloc2_1_0'
                                    522 ;------------------------------------------------------------
                                    523 ;	main.c:33: unsigned char strcmp(unsigned char* first, unsigned char* second) {
                                    524 ;	-----------------------------------------
                                    525 ;	 function strcmp
                                    526 ;	-----------------------------------------
      000020                        527 _strcmp:
      000020 AD 82            [24]  528 	mov	r5,dpl
      000022 AE 83            [24]  529 	mov	r6,dph
      000024 AF F0            [24]  530 	mov	r7,b
                                    531 ;	main.c:34: while (*first && *second) if (*(first++) != *(second++)) return 0;
      000026 78r1A            [12]  532 	mov	r0,#_strcmp_PARM_2
      000028 E2               [24]  533 	movx	a,@r0
      000029 F5*02            [12]  534 	mov	_strcmp_sloc2_1_0,a
      00002B 08               [12]  535 	inc	r0
      00002C E2               [24]  536 	movx	a,@r0
      00002D F5*03            [12]  537 	mov	(_strcmp_sloc2_1_0 + 1),a
      00002F 08               [12]  538 	inc	r0
      000030 E2               [24]  539 	movx	a,@r0
      000031 F5*04            [12]  540 	mov	(_strcmp_sloc2_1_0 + 2),a
      000033                        541 00104$:
      000033 8D 82            [24]  542 	mov	dpl,r5
      000035 8E 83            [24]  543 	mov	dph,r6
      000037 8F F0            [24]  544 	mov	b,r7
      000039 12r00r00         [24]  545 	lcall	__gptrget
      00003C F5*00            [12]  546 	mov	_strcmp_sloc0_1_0,a
      00003E 60 2B            [24]  547 	jz	00106$
      000040 85*02 82         [24]  548 	mov	dpl,_strcmp_sloc2_1_0
      000043 85*03 83         [24]  549 	mov	dph,(_strcmp_sloc2_1_0 + 1)
      000046 85*04 F0         [24]  550 	mov	b,(_strcmp_sloc2_1_0 + 2)
      000049 12r00r00         [24]  551 	lcall	__gptrget
      00004C F5*01            [12]  552 	mov	_strcmp_sloc1_1_0,a
      00004E 60 1B            [24]  553 	jz	00106$
      000050 AC*00            [24]  554 	mov	r4,_strcmp_sloc0_1_0
      000052 0D               [12]  555 	inc	r5
      000053 BD 00 01         [24]  556 	cjne	r5,#0x00,00127$
      000056 0E               [12]  557 	inc	r6
      000057                        558 00127$:
      000057 AB*01            [24]  559 	mov	r3,_strcmp_sloc1_1_0
      000059 05*02            [12]  560 	inc	_strcmp_sloc2_1_0
      00005B E4               [12]  561 	clr	a
      00005C B5*02 02         [24]  562 	cjne	a,_strcmp_sloc2_1_0,00128$
      00005F 05*03            [12]  563 	inc	(_strcmp_sloc2_1_0 + 1)
      000061                        564 00128$:
      000061 EC               [12]  565 	mov	a,r4
      000062 B5 03 02         [24]  566 	cjne	a,ar3,00129$
      000065 80 CC            [24]  567 	sjmp	00104$
      000067                        568 00129$:
      000067 75 82 00         [24]  569 	mov	dpl,#0x00
      00006A 22               [24]  570 	ret
      00006B                        571 00106$:
                                    572 ;	main.c:35: return 1;
      00006B 75 82 01         [24]  573 	mov	dpl,#0x01
                                    574 ;	main.c:36: }
      00006E 22               [24]  575 	ret
                                    576 ;------------------------------------------------------------
                                    577 ;Allocation info for local variables in function 'hexCharToInt'
                                    578 ;------------------------------------------------------------
                                    579 ;	main.c:38: unsigned char hexCharToInt(char c) {
                                    580 ;	-----------------------------------------
                                    581 ;	 function hexCharToInt
                                    582 ;	-----------------------------------------
      00006F                        583 _hexCharToInt:
                                    584 ;	main.c:39: return c <= '9' ? c - '0' : c <= 'F' ? c - 'A' + 10 : c - 'a' + 10;
      00006F E5 82            [12]  585 	mov	a,dpl
      000071 FF               [12]  586 	mov	r7,a
      000072 24 C6            [12]  587 	add	a,#0xff - 0x39
      000074 40 08            [24]  588 	jc	00103$
      000076 8F 06            [24]  589 	mov	ar6,r7
      000078 EE               [12]  590 	mov	a,r6
      000079 24 D0            [12]  591 	add	a,#0xd0
      00007B FE               [12]  592 	mov	r6,a
      00007C 80 13            [24]  593 	sjmp	00104$
      00007E                        594 00103$:
      00007E EF               [12]  595 	mov	a,r7
      00007F 24 B9            [12]  596 	add	a,#0xff - 0x46
      000081 40 08            [24]  597 	jc	00105$
      000083 8F 05            [24]  598 	mov	ar5,r7
      000085 74 C9            [12]  599 	mov	a,#0xc9
      000087 2D               [12]  600 	add	a,r5
      000088 FD               [12]  601 	mov	r5,a
      000089 80 04            [24]  602 	sjmp	00106$
      00008B                        603 00105$:
      00008B 74 A9            [12]  604 	mov	a,#0xa9
      00008D 2F               [12]  605 	add	a,r7
      00008E FD               [12]  606 	mov	r5,a
      00008F                        607 00106$:
      00008F 8D 06            [24]  608 	mov	ar6,r5
      000091                        609 00104$:
      000091 8E 82            [24]  610 	mov	dpl,r6
                                    611 ;	main.c:40: }
      000093 22               [24]  612 	ret
                                    613 ;------------------------------------------------------------
                                    614 ;Allocation info for local variables in function 'parseMAC'
                                    615 ;------------------------------------------------------------
                                    616 ;	main.c:42: void parseMAC(const char* str) {
                                    617 ;	-----------------------------------------
                                    618 ;	 function parseMAC
                                    619 ;	-----------------------------------------
      000094                        620 _parseMAC:
      000094 AF F0            [24]  621 	mov	r7,b
      000096 AE 83            [24]  622 	mov	r6,dph
      000098 E5 82            [12]  623 	mov	a,dpl
      00009A 78r1D            [12]  624 	mov	r0,#_parseMAC_str_65536_54
      00009C F2               [24]  625 	movx	@r0,a
      00009D 08               [12]  626 	inc	r0
      00009E EE               [12]  627 	mov	a,r6
      00009F F2               [24]  628 	movx	@r0,a
      0000A0 08               [12]  629 	inc	r0
      0000A1 EF               [12]  630 	mov	a,r7
      0000A2 F2               [24]  631 	movx	@r0,a
                                    632 ;	main.c:43: if(str[0] == 'M' && str[1] == 'A' && str[2] == 'C' && str[3] == '=') {
      0000A3 78r1D            [12]  633 	mov	r0,#_parseMAC_str_65536_54
      0000A5 E2               [24]  634 	movx	a,@r0
      0000A6 F5 82            [12]  635 	mov	dpl,a
      0000A8 08               [12]  636 	inc	r0
      0000A9 E2               [24]  637 	movx	a,@r0
      0000AA F5 83            [12]  638 	mov	dph,a
      0000AC 08               [12]  639 	inc	r0
      0000AD E2               [24]  640 	movx	a,@r0
      0000AE F5 F0            [12]  641 	mov	b,a
      0000B0 12r00r00         [24]  642 	lcall	__gptrget
      0000B3 FC               [12]  643 	mov	r4,a
      0000B4 BC 4D 02         [24]  644 	cjne	r4,#0x4d,00137$
      0000B7 80 01            [24]  645 	sjmp	00138$
      0000B9                        646 00137$:
      0000B9 22               [24]  647 	ret
      0000BA                        648 00138$:
      0000BA 78r1D            [12]  649 	mov	r0,#_parseMAC_str_65536_54
      0000BC E2               [24]  650 	movx	a,@r0
      0000BD 24 01            [12]  651 	add	a,#0x01
      0000BF FA               [12]  652 	mov	r2,a
      0000C0 08               [12]  653 	inc	r0
      0000C1 E2               [24]  654 	movx	a,@r0
      0000C2 34 00            [12]  655 	addc	a,#0x00
      0000C4 FB               [12]  656 	mov	r3,a
      0000C5 08               [12]  657 	inc	r0
      0000C6 E2               [24]  658 	movx	a,@r0
      0000C7 FC               [12]  659 	mov	r4,a
      0000C8 8A 82            [24]  660 	mov	dpl,r2
      0000CA 8B 83            [24]  661 	mov	dph,r3
      0000CC 8C F0            [24]  662 	mov	b,r4
      0000CE 12r00r00         [24]  663 	lcall	__gptrget
      0000D1 FA               [12]  664 	mov	r2,a
      0000D2 BA 41 02         [24]  665 	cjne	r2,#0x41,00139$
      0000D5 80 01            [24]  666 	sjmp	00140$
      0000D7                        667 00139$:
      0000D7 22               [24]  668 	ret
      0000D8                        669 00140$:
      0000D8 78r1D            [12]  670 	mov	r0,#_parseMAC_str_65536_54
      0000DA E2               [24]  671 	movx	a,@r0
      0000DB 24 02            [12]  672 	add	a,#0x02
      0000DD FA               [12]  673 	mov	r2,a
      0000DE 08               [12]  674 	inc	r0
      0000DF E2               [24]  675 	movx	a,@r0
      0000E0 34 00            [12]  676 	addc	a,#0x00
      0000E2 FB               [12]  677 	mov	r3,a
      0000E3 08               [12]  678 	inc	r0
      0000E4 E2               [24]  679 	movx	a,@r0
      0000E5 FC               [12]  680 	mov	r4,a
      0000E6 8A 82            [24]  681 	mov	dpl,r2
      0000E8 8B 83            [24]  682 	mov	dph,r3
      0000EA 8C F0            [24]  683 	mov	b,r4
      0000EC 12r00r00         [24]  684 	lcall	__gptrget
      0000EF FA               [12]  685 	mov	r2,a
      0000F0 BA 43 02         [24]  686 	cjne	r2,#0x43,00141$
      0000F3 80 01            [24]  687 	sjmp	00142$
      0000F5                        688 00141$:
      0000F5 22               [24]  689 	ret
      0000F6                        690 00142$:
      0000F6 78r1D            [12]  691 	mov	r0,#_parseMAC_str_65536_54
      0000F8 E2               [24]  692 	movx	a,@r0
      0000F9 24 03            [12]  693 	add	a,#0x03
      0000FB FA               [12]  694 	mov	r2,a
      0000FC 08               [12]  695 	inc	r0
      0000FD E2               [24]  696 	movx	a,@r0
      0000FE 34 00            [12]  697 	addc	a,#0x00
      000100 FB               [12]  698 	mov	r3,a
      000101 08               [12]  699 	inc	r0
      000102 E2               [24]  700 	movx	a,@r0
      000103 FC               [12]  701 	mov	r4,a
      000104 8A 82            [24]  702 	mov	dpl,r2
      000106 8B 83            [24]  703 	mov	dph,r3
      000108 8C F0            [24]  704 	mov	b,r4
      00010A 12r00r00         [24]  705 	lcall	__gptrget
      00010D FA               [12]  706 	mov	r2,a
      00010E BA 3D 02         [24]  707 	cjne	r2,#0x3d,00143$
      000111 80 01            [24]  708 	sjmp	00144$
      000113                        709 00143$:
      000113 22               [24]  710 	ret
      000114                        711 00144$:
                                    712 ;	main.c:44: for(unsigned char i = 0; i < 6; i++) {
      000114 7D 00            [12]  713 	mov	r5,#0x00
      000116                        714 00108$:
      000116 BD 06 00         [24]  715 	cjne	r5,#0x06,00145$
      000119                        716 00145$:
      000119 40 01            [24]  717 	jc	00146$
      00011B 22               [24]  718 	ret
      00011C                        719 00146$:
                                    720 ;	main.c:45: mac[i] = (hexCharToInt(str[4 + i*2]) << 4) + hexCharToInt(str[5 + i*2]);
      00011C ED               [12]  721 	mov	a,r5
      00011D 24r0C            [12]  722 	add	a,#_mac
      00011F F9               [12]  723 	mov	r1,a
      000120 8D 02            [24]  724 	mov	ar2,r5
      000122 7B 00            [12]  725 	mov	r3,#0x00
      000124 EA               [12]  726 	mov	a,r2
      000125 2A               [12]  727 	add	a,r2
      000126 FA               [12]  728 	mov	r2,a
      000127 EB               [12]  729 	mov	a,r3
      000128 33               [12]  730 	rlc	a
      000129 FB               [12]  731 	mov	r3,a
      00012A 74 04            [12]  732 	mov	a,#0x04
      00012C 2A               [12]  733 	add	a,r2
      00012D FC               [12]  734 	mov	r4,a
      00012E E4               [12]  735 	clr	a
      00012F 3B               [12]  736 	addc	a,r3
      000130 FF               [12]  737 	mov	r7,a
      000131 78r1D            [12]  738 	mov	r0,#_parseMAC_str_65536_54
      000133 E2               [24]  739 	movx	a,@r0
      000134 2C               [12]  740 	add	a,r4
      000135 FC               [12]  741 	mov	r4,a
      000136 08               [12]  742 	inc	r0
      000137 E2               [24]  743 	movx	a,@r0
      000138 3F               [12]  744 	addc	a,r7
      000139 FF               [12]  745 	mov	r7,a
      00013A 08               [12]  746 	inc	r0
      00013B E2               [24]  747 	movx	a,@r0
      00013C FE               [12]  748 	mov	r6,a
      00013D 8C 82            [24]  749 	mov	dpl,r4
      00013F 8F 83            [24]  750 	mov	dph,r7
      000141 8E F0            [24]  751 	mov	b,r6
      000143 12r00r00         [24]  752 	lcall	__gptrget
      000146 F5 82            [12]  753 	mov	dpl,a
      000148 C0 05            [24]  754 	push	ar5
      00014A C0 03            [24]  755 	push	ar3
      00014C C0 02            [24]  756 	push	ar2
      00014E C0 01            [24]  757 	push	ar1
      000150 12r00r6F         [24]  758 	lcall	_hexCharToInt
      000153 AF 82            [24]  759 	mov	r7,dpl
      000155 D0 01            [24]  760 	pop	ar1
      000157 D0 02            [24]  761 	pop	ar2
      000159 D0 03            [24]  762 	pop	ar3
      00015B D0 05            [24]  763 	pop	ar5
      00015D EF               [12]  764 	mov	a,r7
      00015E C4               [12]  765 	swap	a
      00015F 54 F0            [12]  766 	anl	a,#0xf0
      000161 FF               [12]  767 	mov	r7,a
      000162 74 05            [12]  768 	mov	a,#0x05
      000164 2A               [12]  769 	add	a,r2
      000165 FA               [12]  770 	mov	r2,a
      000166 E4               [12]  771 	clr	a
      000167 3B               [12]  772 	addc	a,r3
      000168 FB               [12]  773 	mov	r3,a
      000169 78r1D            [12]  774 	mov	r0,#_parseMAC_str_65536_54
      00016B E2               [24]  775 	movx	a,@r0
      00016C 2A               [12]  776 	add	a,r2
      00016D FA               [12]  777 	mov	r2,a
      00016E 08               [12]  778 	inc	r0
      00016F E2               [24]  779 	movx	a,@r0
      000170 3B               [12]  780 	addc	a,r3
      000171 FB               [12]  781 	mov	r3,a
      000172 08               [12]  782 	inc	r0
      000173 E2               [24]  783 	movx	a,@r0
      000174 FE               [12]  784 	mov	r6,a
      000175 8A 82            [24]  785 	mov	dpl,r2
      000177 8B 83            [24]  786 	mov	dph,r3
      000179 8E F0            [24]  787 	mov	b,r6
      00017B 12r00r00         [24]  788 	lcall	__gptrget
      00017E F5 82            [12]  789 	mov	dpl,a
      000180 C0 07            [24]  790 	push	ar7
      000182 C0 05            [24]  791 	push	ar5
      000184 C0 01            [24]  792 	push	ar1
      000186 12r00r6F         [24]  793 	lcall	_hexCharToInt
      000189 AE 82            [24]  794 	mov	r6,dpl
      00018B D0 01            [24]  795 	pop	ar1
      00018D D0 05            [24]  796 	pop	ar5
      00018F D0 07            [24]  797 	pop	ar7
      000191 EE               [12]  798 	mov	a,r6
      000192 2F               [12]  799 	add	a,r7
      000193 F3               [24]  800 	movx	@r1,a
                                    801 ;	main.c:44: for(unsigned char i = 0; i < 6; i++) {
      000194 0D               [12]  802 	inc	r5
                                    803 ;	main.c:48: }
      000195 02r01r16         [24]  804 	ljmp	00108$
                                    805 ;------------------------------------------------------------
                                    806 ;Allocation info for local variables in function 'extractAndAssign'
                                    807 ;------------------------------------------------------------
                                    808 ;sloc0                     Allocated with name '_extractAndAssign_sloc0_1_0'
                                    809 ;------------------------------------------------------------
                                    810 ;	main.c:50: void extractAndAssign(char *arr)
                                    811 ;	-----------------------------------------
                                    812 ;	 function extractAndAssign
                                    813 ;	-----------------------------------------
      000198                        814 _extractAndAssign:
      000198 AD 82            [24]  815 	mov	r5,dpl
      00019A AE 83            [24]  816 	mov	r6,dph
      00019C AF F0            [24]  817 	mov	r7,b
                                    818 ;	main.c:52: unsigned char *curr_address = NULL;
      00019E 78r23            [12]  819 	mov	r0,#_extractAndAssign_curr_address_65536_60
      0001A0 E4               [12]  820 	clr	a
      0001A1 F2               [24]  821 	movx	@r0,a
      0001A2 08               [12]  822 	inc	r0
      0001A3 F2               [24]  823 	movx	@r0,a
      0001A4 08               [12]  824 	inc	r0
      0001A5 F2               [24]  825 	movx	@r0,a
                                    826 ;	main.c:53: unsigned char octet = 0;
      0001A6 78r26            [12]  827 	mov	r0,#_extractAndAssign_octet_65536_60
      0001A8 F2               [24]  828 	movx	@r0,a
                                    829 ;	main.c:56: while (*arr)
      0001A9                        830 00128$:
      0001A9 8D 82            [24]  831 	mov	dpl,r5
      0001AB 8E 83            [24]  832 	mov	dph,r6
      0001AD 8F F0            [24]  833 	mov	b,r7
      0001AF 12r00r00         [24]  834 	lcall	__gptrget
      0001B2 FB               [12]  835 	mov	r3,a
      0001B3 70 01            [24]  836 	jnz	00234$
      0001B5 22               [24]  837 	ret
      0001B6                        838 00234$:
                                    839 ;	main.c:58: if (arr[0] == 'I' && arr[1] == 'P' && arr[2] == '=')
      0001B6 BB 49 42         [24]  840 	cjne	r3,#0x49,00114$
      0001B9 74 01            [12]  841 	mov	a,#0x01
      0001BB 2D               [12]  842 	add	a,r5
      0001BC FA               [12]  843 	mov	r2,a
      0001BD E4               [12]  844 	clr	a
      0001BE 3E               [12]  845 	addc	a,r6
      0001BF FB               [12]  846 	mov	r3,a
      0001C0 8F 04            [24]  847 	mov	ar4,r7
      0001C2 8A 82            [24]  848 	mov	dpl,r2
      0001C4 8B 83            [24]  849 	mov	dph,r3
      0001C6 8C F0            [24]  850 	mov	b,r4
      0001C8 12r00r00         [24]  851 	lcall	__gptrget
      0001CB FA               [12]  852 	mov	r2,a
      0001CC BA 50 2C         [24]  853 	cjne	r2,#0x50,00114$
      0001CF 74 02            [12]  854 	mov	a,#0x02
      0001D1 2D               [12]  855 	add	a,r5
      0001D2 FA               [12]  856 	mov	r2,a
      0001D3 E4               [12]  857 	clr	a
      0001D4 3E               [12]  858 	addc	a,r6
      0001D5 FB               [12]  859 	mov	r3,a
      0001D6 8F 04            [24]  860 	mov	ar4,r7
      0001D8 8A 82            [24]  861 	mov	dpl,r2
      0001DA 8B 83            [24]  862 	mov	dph,r3
      0001DC 8C F0            [24]  863 	mov	b,r4
      0001DE 12r00r00         [24]  864 	lcall	__gptrget
      0001E1 FA               [12]  865 	mov	r2,a
      0001E2 BA 3D 16         [24]  866 	cjne	r2,#0x3d,00114$
                                    867 ;	main.c:60: curr_address = ip;
      0001E5 78r23            [12]  868 	mov	r0,#_extractAndAssign_curr_address_65536_60
      0001E7 74r08            [12]  869 	mov	a,#_ip
      0001E9 F2               [24]  870 	movx	@r0,a
      0001EA 08               [12]  871 	inc	r0
      0001EB E4               [12]  872 	clr	a
      0001EC F2               [24]  873 	movx	@r0,a
      0001ED 08               [12]  874 	inc	r0
      0001EE 74 60            [12]  875 	mov	a,#0x60
      0001F0 F2               [24]  876 	movx	@r0,a
                                    877 ;	main.c:61: arr += 3;
      0001F1 74 03            [12]  878 	mov	a,#0x03
      0001F3 2D               [12]  879 	add	a,r5
      0001F4 FD               [12]  880 	mov	r5,a
      0001F5 E4               [12]  881 	clr	a
      0001F6 3E               [12]  882 	addc	a,r6
      0001F7 FE               [12]  883 	mov	r6,a
      0001F8 02r02rDD         [24]  884 	ljmp	00115$
      0001FB                        885 00114$:
                                    886 ;	main.c:63: else if (arr[0] == 'S' && arr[1] == 'U' && arr[2] == 'B' && arr[3] == '=')
      0001FB 8D 82            [24]  887 	mov	dpl,r5
      0001FD 8E 83            [24]  888 	mov	dph,r6
      0001FF 8F F0            [24]  889 	mov	b,r7
      000201 12r00r00         [24]  890 	lcall	__gptrget
      000204 FB               [12]  891 	mov	r3,a
      000205 BB 53 58         [24]  892 	cjne	r3,#0x53,00108$
      000208 74 01            [12]  893 	mov	a,#0x01
      00020A 2D               [12]  894 	add	a,r5
      00020B FA               [12]  895 	mov	r2,a
      00020C E4               [12]  896 	clr	a
      00020D 3E               [12]  897 	addc	a,r6
      00020E FB               [12]  898 	mov	r3,a
      00020F 8F 04            [24]  899 	mov	ar4,r7
      000211 8A 82            [24]  900 	mov	dpl,r2
      000213 8B 83            [24]  901 	mov	dph,r3
      000215 8C F0            [24]  902 	mov	b,r4
      000217 12r00r00         [24]  903 	lcall	__gptrget
      00021A FA               [12]  904 	mov	r2,a
      00021B BA 55 42         [24]  905 	cjne	r2,#0x55,00108$
      00021E 74 02            [12]  906 	mov	a,#0x02
      000220 2D               [12]  907 	add	a,r5
      000221 FA               [12]  908 	mov	r2,a
      000222 E4               [12]  909 	clr	a
      000223 3E               [12]  910 	addc	a,r6
      000224 FB               [12]  911 	mov	r3,a
      000225 8F 04            [24]  912 	mov	ar4,r7
      000227 8A 82            [24]  913 	mov	dpl,r2
      000229 8B 83            [24]  914 	mov	dph,r3
      00022B 8C F0            [24]  915 	mov	b,r4
      00022D 12r00r00         [24]  916 	lcall	__gptrget
      000230 FA               [12]  917 	mov	r2,a
      000231 BA 42 2C         [24]  918 	cjne	r2,#0x42,00108$
      000234 74 03            [12]  919 	mov	a,#0x03
      000236 2D               [12]  920 	add	a,r5
      000237 FA               [12]  921 	mov	r2,a
      000238 E4               [12]  922 	clr	a
      000239 3E               [12]  923 	addc	a,r6
      00023A FB               [12]  924 	mov	r3,a
      00023B 8F 04            [24]  925 	mov	ar4,r7
      00023D 8A 82            [24]  926 	mov	dpl,r2
      00023F 8B 83            [24]  927 	mov	dph,r3
      000241 8C F0            [24]  928 	mov	b,r4
      000243 12r00r00         [24]  929 	lcall	__gptrget
      000246 FA               [12]  930 	mov	r2,a
      000247 BA 3D 16         [24]  931 	cjne	r2,#0x3d,00108$
                                    932 ;	main.c:65: curr_address = subnet;
      00024A 78r23            [12]  933 	mov	r0,#_extractAndAssign_curr_address_65536_60
      00024C 74r04            [12]  934 	mov	a,#_subnet
      00024E F2               [24]  935 	movx	@r0,a
      00024F 08               [12]  936 	inc	r0
      000250 E4               [12]  937 	clr	a
      000251 F2               [24]  938 	movx	@r0,a
      000252 08               [12]  939 	inc	r0
      000253 74 60            [12]  940 	mov	a,#0x60
      000255 F2               [24]  941 	movx	@r0,a
                                    942 ;	main.c:66: arr += 4;
      000256 74 04            [12]  943 	mov	a,#0x04
      000258 2D               [12]  944 	add	a,r5
      000259 FD               [12]  945 	mov	r5,a
      00025A E4               [12]  946 	clr	a
      00025B 3E               [12]  947 	addc	a,r6
      00025C FE               [12]  948 	mov	r6,a
      00025D 02r02rDD         [24]  949 	ljmp	00115$
      000260                        950 00108$:
                                    951 ;	main.c:68: else if (arr[0] == 'G' && arr[1] == 'A' && arr[2] == 'T' && arr[3] == 'E' && arr[4] == '=')
      000260 8D 82            [24]  952 	mov	dpl,r5
      000262 8E 83            [24]  953 	mov	dph,r6
      000264 8F F0            [24]  954 	mov	b,r7
      000266 12r00r00         [24]  955 	lcall	__gptrget
      000269 FB               [12]  956 	mov	r3,a
      00026A BB 47 02         [24]  957 	cjne	r3,#0x47,00249$
      00026D 80 03            [24]  958 	sjmp	00250$
      00026F                        959 00249$:
      00026F 02r02rDD         [24]  960 	ljmp	00115$
      000272                        961 00250$:
      000272 74 01            [12]  962 	mov	a,#0x01
      000274 2D               [12]  963 	add	a,r5
      000275 FA               [12]  964 	mov	r2,a
      000276 E4               [12]  965 	clr	a
      000277 3E               [12]  966 	addc	a,r6
      000278 FB               [12]  967 	mov	r3,a
      000279 8F 04            [24]  968 	mov	ar4,r7
      00027B 8A 82            [24]  969 	mov	dpl,r2
      00027D 8B 83            [24]  970 	mov	dph,r3
      00027F 8C F0            [24]  971 	mov	b,r4
      000281 12r00r00         [24]  972 	lcall	__gptrget
      000284 FA               [12]  973 	mov	r2,a
      000285 BA 41 55         [24]  974 	cjne	r2,#0x41,00115$
      000288 74 02            [12]  975 	mov	a,#0x02
      00028A 2D               [12]  976 	add	a,r5
      00028B FA               [12]  977 	mov	r2,a
      00028C E4               [12]  978 	clr	a
      00028D 3E               [12]  979 	addc	a,r6
      00028E FB               [12]  980 	mov	r3,a
      00028F 8F 04            [24]  981 	mov	ar4,r7
      000291 8A 82            [24]  982 	mov	dpl,r2
      000293 8B 83            [24]  983 	mov	dph,r3
      000295 8C F0            [24]  984 	mov	b,r4
      000297 12r00r00         [24]  985 	lcall	__gptrget
      00029A FA               [12]  986 	mov	r2,a
      00029B BA 54 3F         [24]  987 	cjne	r2,#0x54,00115$
      00029E 74 03            [12]  988 	mov	a,#0x03
      0002A0 2D               [12]  989 	add	a,r5
      0002A1 FA               [12]  990 	mov	r2,a
      0002A2 E4               [12]  991 	clr	a
      0002A3 3E               [12]  992 	addc	a,r6
      0002A4 FB               [12]  993 	mov	r3,a
      0002A5 8F 04            [24]  994 	mov	ar4,r7
      0002A7 8A 82            [24]  995 	mov	dpl,r2
      0002A9 8B 83            [24]  996 	mov	dph,r3
      0002AB 8C F0            [24]  997 	mov	b,r4
      0002AD 12r00r00         [24]  998 	lcall	__gptrget
      0002B0 FA               [12]  999 	mov	r2,a
      0002B1 BA 45 29         [24] 1000 	cjne	r2,#0x45,00115$
      0002B4 74 04            [12] 1001 	mov	a,#0x04
      0002B6 2D               [12] 1002 	add	a,r5
      0002B7 FA               [12] 1003 	mov	r2,a
      0002B8 E4               [12] 1004 	clr	a
      0002B9 3E               [12] 1005 	addc	a,r6
      0002BA FB               [12] 1006 	mov	r3,a
      0002BB 8F 04            [24] 1007 	mov	ar4,r7
      0002BD 8A 82            [24] 1008 	mov	dpl,r2
      0002BF 8B 83            [24] 1009 	mov	dph,r3
      0002C1 8C F0            [24] 1010 	mov	b,r4
      0002C3 12r00r00         [24] 1011 	lcall	__gptrget
      0002C6 FA               [12] 1012 	mov	r2,a
      0002C7 BA 3D 13         [24] 1013 	cjne	r2,#0x3d,00115$
                                   1014 ;	main.c:70: curr_address = gateway;
      0002CA 78r23            [12] 1015 	mov	r0,#_extractAndAssign_curr_address_65536_60
      0002CC 74r00            [12] 1016 	mov	a,#_gateway
      0002CE F2               [24] 1017 	movx	@r0,a
      0002CF 08               [12] 1018 	inc	r0
      0002D0 E4               [12] 1019 	clr	a
      0002D1 F2               [24] 1020 	movx	@r0,a
      0002D2 08               [12] 1021 	inc	r0
      0002D3 74 60            [12] 1022 	mov	a,#0x60
      0002D5 F2               [24] 1023 	movx	@r0,a
                                   1024 ;	main.c:71: arr += 5;
      0002D6 74 05            [12] 1025 	mov	a,#0x05
      0002D8 2D               [12] 1026 	add	a,r5
      0002D9 FD               [12] 1027 	mov	r5,a
      0002DA E4               [12] 1028 	clr	a
      0002DB 3E               [12] 1029 	addc	a,r6
      0002DC FE               [12] 1030 	mov	r6,a
      0002DD                       1031 00115$:
                                   1032 ;	main.c:73: value = 0;
      0002DD 78r27            [12] 1033 	mov	r0,#_extractAndAssign_value_65536_60
      0002DF E4               [12] 1034 	clr	a
      0002E0 F2               [24] 1035 	movx	@r0,a
                                   1036 ;	main.c:74: while (*arr >= '0' && *arr <= '9')
      0002E1 8D*00            [24] 1037 	mov	_extractAndAssign_sloc0_1_0,r5
      0002E3 8E*01            [24] 1038 	mov	(_extractAndAssign_sloc0_1_0 + 1),r6
      0002E5 8F*02            [24] 1039 	mov	(_extractAndAssign_sloc0_1_0 + 2),r7
      0002E7                       1040 00119$:
      0002E7 85*00 82         [24] 1041 	mov	dpl,_extractAndAssign_sloc0_1_0
      0002EA 85*01 83         [24] 1042 	mov	dph,(_extractAndAssign_sloc0_1_0 + 1)
      0002ED 85*02 F0         [24] 1043 	mov	b,(_extractAndAssign_sloc0_1_0 + 2)
      0002F0 12r00r00         [24] 1044 	lcall	__gptrget
      0002F3 FA               [12] 1045 	mov	r2,a
      0002F4 BA 30 00         [24] 1046 	cjne	r2,#0x30,00259$
      0002F7                       1047 00259$:
      0002F7 40 1E            [24] 1048 	jc	00153$
      0002F9 EA               [12] 1049 	mov	a,r2
      0002FA 24 C6            [12] 1050 	add	a,#0xff - 0x39
      0002FC 40 19            [24] 1051 	jc	00153$
                                   1052 ;	main.c:76: value = value * 10 + (*arr - '0');
      0002FE 78r27            [12] 1053 	mov	r0,#_extractAndAssign_value_65536_60
      000300 E2               [24] 1054 	movx	a,@r0
      000301 75 F0 0A         [24] 1055 	mov	b,#0x0a
      000304 A4               [48] 1056 	mul	ab
      000305 FC               [12] 1057 	mov	r4,a
      000306 EA               [12] 1058 	mov	a,r2
      000307 24 D0            [12] 1059 	add	a,#0xd0
      000309 78r27            [12] 1060 	mov	r0,#_extractAndAssign_value_65536_60
      00030B 2C               [12] 1061 	add	a,r4
      00030C F2               [24] 1062 	movx	@r0,a
                                   1063 ;	main.c:77: arr++;
      00030D 05*00            [12] 1064 	inc	_extractAndAssign_sloc0_1_0
      00030F E4               [12] 1065 	clr	a
      000310 B5*00 D4         [24] 1066 	cjne	a,_extractAndAssign_sloc0_1_0,00119$
      000313 05*01            [12] 1067 	inc	(_extractAndAssign_sloc0_1_0 + 1)
      000315 80 D0            [24] 1068 	sjmp	00119$
      000317                       1069 00153$:
      000317 78r20            [12] 1070 	mov	r0,#_extractAndAssign_arr_65536_59
      000319 E5*00            [12] 1071 	mov	a,_extractAndAssign_sloc0_1_0
      00031B F2               [24] 1072 	movx	@r0,a
      00031C 08               [12] 1073 	inc	r0
      00031D E5*01            [12] 1074 	mov	a,(_extractAndAssign_sloc0_1_0 + 1)
      00031F F2               [24] 1075 	movx	@r0,a
      000320 08               [12] 1076 	inc	r0
      000321 E5*02            [12] 1077 	mov	a,(_extractAndAssign_sloc0_1_0 + 2)
      000323 F2               [24] 1078 	movx	@r0,a
                                   1079 ;	main.c:80: if (curr_address && octet < 4)
      000324 78r23            [12] 1080 	mov	r0,#_extractAndAssign_curr_address_65536_60
      000326 E2               [24] 1081 	movx	a,@r0
      000327 F5 F0            [12] 1082 	mov	b,a
      000329 08               [12] 1083 	inc	r0
      00032A E2               [24] 1084 	movx	a,@r0
      00032B 45 F0            [12] 1085 	orl	a,b
      00032D 60 4F            [24] 1086 	jz	00126$
      00032F 78r26            [12] 1087 	mov	r0,#_extractAndAssign_octet_65536_60
      000331 E2               [24] 1088 	movx	a,@r0
      000332 B4 04 00         [24] 1089 	cjne	a,#0x04,00264$
      000335                       1090 00264$:
      000335 50 47            [24] 1091 	jnc	00126$
                                   1092 ;	main.c:82: curr_address[octet] = value;
      000337 78r23            [12] 1093 	mov	r0,#_extractAndAssign_curr_address_65536_60
      000339 79r26            [12] 1094 	mov	r1,#_extractAndAssign_octet_65536_60
      00033B E3               [24] 1095 	movx	a,@r1
      00033C C5 F0            [12] 1096 	xch	a,b
      00033E E2               [24] 1097 	movx	a,@r0
      00033F 25 F0            [12] 1098 	add	a,b
      000341 FA               [12] 1099 	mov	r2,a
      000342 08               [12] 1100 	inc	r0
      000343 E2               [24] 1101 	movx	a,@r0
      000344 34 00            [12] 1102 	addc	a,#0x00
      000346 FB               [12] 1103 	mov	r3,a
      000347 08               [12] 1104 	inc	r0
      000348 E2               [24] 1105 	movx	a,@r0
      000349 FC               [12] 1106 	mov	r4,a
      00034A 8A 82            [24] 1107 	mov	dpl,r2
      00034C 8B 83            [24] 1108 	mov	dph,r3
      00034E 8C F0            [24] 1109 	mov	b,r4
      000350 78r27            [12] 1110 	mov	r0,#_extractAndAssign_value_65536_60
      000352 E2               [24] 1111 	movx	a,@r0
      000353 12r00r00         [24] 1112 	lcall	__gptrput
                                   1113 ;	main.c:83: octet++;
      000356 78r26            [12] 1114 	mov	r0,#_extractAndAssign_octet_65536_60
      000358 E2               [24] 1115 	movx	a,@r0
      000359 24 01            [12] 1116 	add	a,#0x01
      00035B F2               [24] 1117 	movx	@r0,a
                                   1118 ;	main.c:85: if (*arr == '.')
      00035C 85*00 82         [24] 1119 	mov	dpl,_extractAndAssign_sloc0_1_0
      00035F 85*01 83         [24] 1120 	mov	dph,(_extractAndAssign_sloc0_1_0 + 1)
      000362 85*02 F0         [24] 1121 	mov	b,(_extractAndAssign_sloc0_1_0 + 2)
      000365 12r00r00         [24] 1122 	lcall	__gptrget
      000368 FC               [12] 1123 	mov	r4,a
      000369 BC 2E 0E         [24] 1124 	cjne	r4,#0x2e,00123$
                                   1125 ;	main.c:87: arr++;
      00036C 74 01            [12] 1126 	mov	a,#0x01
      00036E 25*00            [12] 1127 	add	a,_extractAndAssign_sloc0_1_0
      000370 FD               [12] 1128 	mov	r5,a
      000371 E4               [12] 1129 	clr	a
      000372 35*01            [12] 1130 	addc	a,(_extractAndAssign_sloc0_1_0 + 1)
      000374 FE               [12] 1131 	mov	r6,a
      000375 AF*02            [24] 1132 	mov	r7,(_extractAndAssign_sloc0_1_0 + 2)
                                   1133 ;	main.c:88: continue;
      000377 02r01rA9         [24] 1134 	ljmp	00128$
      00037A                       1135 00123$:
                                   1136 ;	main.c:92: octet = 0; // Reset octet count for the next IP address
      00037A 78r26            [12] 1137 	mov	r0,#_extractAndAssign_octet_65536_60
      00037C E4               [12] 1138 	clr	a
      00037D F2               [24] 1139 	movx	@r0,a
      00037E                       1140 00126$:
                                   1141 ;	main.c:95: arr++;
      00037E 78r20            [12] 1142 	mov	r0,#_extractAndAssign_arr_65536_59
      000380 E2               [24] 1143 	movx	a,@r0
      000381 24 01            [12] 1144 	add	a,#0x01
      000383 FD               [12] 1145 	mov	r5,a
      000384 08               [12] 1146 	inc	r0
      000385 E2               [24] 1147 	movx	a,@r0
      000386 34 00            [12] 1148 	addc	a,#0x00
      000388 FE               [12] 1149 	mov	r6,a
      000389 08               [12] 1150 	inc	r0
      00038A E2               [24] 1151 	movx	a,@r0
      00038B FF               [12] 1152 	mov	r7,a
                                   1153 ;	main.c:97: }
      00038C 02r01rA9         [24] 1154 	ljmp	00128$
                                   1155 ;------------------------------------------------------------
                                   1156 ;Allocation info for local variables in function 'displayIPAddress'
                                   1157 ;------------------------------------------------------------
                                   1158 ;	main.c:101: void displayIPAddress(unsigned char *address)
                                   1159 ;	-----------------------------------------
                                   1160 ;	 function displayIPAddress
                                   1161 ;	-----------------------------------------
      00038F                       1162 _displayIPAddress:
      00038F AD 82            [24] 1163 	mov	r5,dpl
      000391 AE 83            [24] 1164 	mov	r6,dph
      000393 AF F0            [24] 1165 	mov	r7,b
                                   1166 ;	main.c:103: for (unsigned char i = 0; i < 4; i++)
      000395 7C 00            [12] 1167 	mov	r4,#0x00
      000397                       1168 00105$:
      000397 BC 04 00         [24] 1169 	cjne	r4,#0x04,00122$
      00039A                       1170 00122$:
      00039A 50 44            [24] 1171 	jnc	00107$
                                   1172 ;	main.c:105: _serial_putbyte_dec(address[i]);
      00039C EC               [12] 1173 	mov	a,r4
      00039D 2D               [12] 1174 	add	a,r5
      00039E F9               [12] 1175 	mov	r1,a
      00039F E4               [12] 1176 	clr	a
      0003A0 3E               [12] 1177 	addc	a,r6
      0003A1 FA               [12] 1178 	mov	r2,a
      0003A2 8F 03            [24] 1179 	mov	ar3,r7
      0003A4 89 82            [24] 1180 	mov	dpl,r1
      0003A6 8A 83            [24] 1181 	mov	dph,r2
      0003A8 8B F0            [24] 1182 	mov	b,r3
      0003AA 12r00r00         [24] 1183 	lcall	__gptrget
      0003AD F5 82            [12] 1184 	mov	dpl,a
      0003AF C0 07            [24] 1185 	push	ar7
      0003B1 C0 06            [24] 1186 	push	ar6
      0003B3 C0 05            [24] 1187 	push	ar5
      0003B5 C0 04            [24] 1188 	push	ar4
      0003B7 12r00r00         [24] 1189 	lcall	__serial_putbyte_dec
      0003BA D0 04            [24] 1190 	pop	ar4
      0003BC D0 05            [24] 1191 	pop	ar5
      0003BE D0 06            [24] 1192 	pop	ar6
      0003C0 D0 07            [24] 1193 	pop	ar7
                                   1194 ;	main.c:106: if (i != 3)
      0003C2 BC 03 02         [24] 1195 	cjne	r4,#0x03,00124$
      0003C5 80 16            [24] 1196 	sjmp	00106$
      0003C7                       1197 00124$:
                                   1198 ;	main.c:107: _serial_putchar('.');
      0003C7 75 82 2E         [24] 1199 	mov	dpl,#0x2e
      0003CA C0 07            [24] 1200 	push	ar7
      0003CC C0 06            [24] 1201 	push	ar6
      0003CE C0 05            [24] 1202 	push	ar5
      0003D0 C0 04            [24] 1203 	push	ar4
      0003D2 12r00r00         [24] 1204 	lcall	__serial_putchar
      0003D5 D0 04            [24] 1205 	pop	ar4
      0003D7 D0 05            [24] 1206 	pop	ar5
      0003D9 D0 06            [24] 1207 	pop	ar6
      0003DB D0 07            [24] 1208 	pop	ar7
      0003DD                       1209 00106$:
                                   1210 ;	main.c:103: for (unsigned char i = 0; i < 4; i++)
      0003DD 0C               [12] 1211 	inc	r4
      0003DE 80 B7            [24] 1212 	sjmp	00105$
      0003E0                       1213 00107$:
                                   1214 ;	main.c:109: }
      0003E0 22               [24] 1215 	ret
                                   1216 ;------------------------------------------------------------
                                   1217 ;Allocation info for local variables in function 'displayMACAddress'
                                   1218 ;------------------------------------------------------------
                                   1219 ;	main.c:112: void displayMACAddress(unsigned char *address)
                                   1220 ;	-----------------------------------------
                                   1221 ;	 function displayMACAddress
                                   1222 ;	-----------------------------------------
      0003E1                       1223 _displayMACAddress:
      0003E1 AD 82            [24] 1224 	mov	r5,dpl
      0003E3 AE 83            [24] 1225 	mov	r6,dph
      0003E5 AF F0            [24] 1226 	mov	r7,b
                                   1227 ;	main.c:114: for (unsigned char i = 0; i < 6; i++)
      0003E7 7C 00            [12] 1228 	mov	r4,#0x00
      0003E9                       1229 00105$:
      0003E9 BC 06 00         [24] 1230 	cjne	r4,#0x06,00122$
      0003EC                       1231 00122$:
      0003EC 50 47            [24] 1232 	jnc	00107$
                                   1233 ;	main.c:116: _serial_putbyte_hex(address[i]);
      0003EE EC               [12] 1234 	mov	a,r4
      0003EF 2D               [12] 1235 	add	a,r5
      0003F0 F9               [12] 1236 	mov	r1,a
      0003F1 E4               [12] 1237 	clr	a
      0003F2 3E               [12] 1238 	addc	a,r6
      0003F3 FA               [12] 1239 	mov	r2,a
      0003F4 8F 03            [24] 1240 	mov	ar3,r7
      0003F6 89 82            [24] 1241 	mov	dpl,r1
      0003F8 8A 83            [24] 1242 	mov	dph,r2
      0003FA 8B F0            [24] 1243 	mov	b,r3
      0003FC 12r00r00         [24] 1244 	lcall	__gptrget
      0003FF F5 82            [12] 1245 	mov	dpl,a
      000401 C0 07            [24] 1246 	push	ar7
      000403 C0 06            [24] 1247 	push	ar6
      000405 C0 05            [24] 1248 	push	ar5
      000407 C0 04            [24] 1249 	push	ar4
      000409 12r00r00         [24] 1250 	lcall	__serial_putbyte_hex
      00040C D0 04            [24] 1251 	pop	ar4
      00040E D0 05            [24] 1252 	pop	ar5
      000410 D0 06            [24] 1253 	pop	ar6
      000412 D0 07            [24] 1254 	pop	ar7
                                   1255 ;	main.c:117: if (i != 5)
      000414 BC 05 02         [24] 1256 	cjne	r4,#0x05,00124$
      000417 80 19            [24] 1257 	sjmp	00106$
      000419                       1258 00124$:
                                   1259 ;	main.c:118: _serial_putstr(" ");
      000419 90r00r00         [24] 1260 	mov	dptr,#___str_0
      00041C 75 F0 80         [24] 1261 	mov	b,#0x80
      00041F C0 07            [24] 1262 	push	ar7
      000421 C0 06            [24] 1263 	push	ar6
      000423 C0 05            [24] 1264 	push	ar5
      000425 C0 04            [24] 1265 	push	ar4
      000427 12r00r00         [24] 1266 	lcall	__serial_putstr
      00042A D0 04            [24] 1267 	pop	ar4
      00042C D0 05            [24] 1268 	pop	ar5
      00042E D0 06            [24] 1269 	pop	ar6
      000430 D0 07            [24] 1270 	pop	ar7
      000432                       1271 00106$:
                                   1272 ;	main.c:114: for (unsigned char i = 0; i < 6; i++)
      000432 0C               [12] 1273 	inc	r4
      000433 80 B4            [24] 1274 	sjmp	00105$
      000435                       1275 00107$:
                                   1276 ;	main.c:120: }
      000435 22               [24] 1277 	ret
                                   1278 ;------------------------------------------------------------
                                   1279 ;Allocation info for local variables in function 'menudisplay'
                                   1280 ;------------------------------------------------------------
                                   1281 ;	main.c:124: void menudisplay()
                                   1282 ;	-----------------------------------------
                                   1283 ;	 function menudisplay
                                   1284 ;	-----------------------------------------
      000436                       1285 _menudisplay:
                                   1286 ;	main.c:128: _serial_putstr("\n\rCURRENT CONFIG:                    CHANGE CMD:\n\r");
      000436 90r00r02         [24] 1287 	mov	dptr,#___str_1
      000439 75 F0 80         [24] 1288 	mov	b,#0x80
      00043C 12r00r00         [24] 1289 	lcall	__serial_putstr
                                   1290 ;	main.c:129: _serial_putstr("RTU Addr (0-9): ");
      00043F 90r00r35         [24] 1291 	mov	dptr,#___str_2
      000442 75 F0 80         [24] 1292 	mov	b,#0x80
      000445 12r00r00         [24] 1293 	lcall	__serial_putstr
                                   1294 ;	main.c:130: _serial_putchar(RTU_Address);
      000448 78r16            [12] 1295 	mov	r0,#_RTU_Address
      00044A E2               [24] 1296 	movx	a,@r0
      00044B F5 82            [12] 1297 	mov	dpl,a
      00044D 12r00r00         [24] 1298 	lcall	__serial_putchar
                                   1299 ;	main.c:131: _serial_putstr("                  RTU=#\n\r");
      000450 90r00r46         [24] 1300 	mov	dptr,#___str_3
      000453 75 F0 80         [24] 1301 	mov	b,#0x80
      000456 12r00r00         [24] 1302 	lcall	__serial_putstr
                                   1303 ;	main.c:134: _serial_putstr("IP Addr: ");
      000459 90r00r60         [24] 1304 	mov	dptr,#___str_4
      00045C 75 F0 80         [24] 1305 	mov	b,#0x80
      00045F 12r00r00         [24] 1306 	lcall	__serial_putstr
                                   1307 ;	main.c:135: displayIPAddress(ip);
      000462 90r00r08         [24] 1308 	mov	dptr,#_ip
      000465 75 F0 60         [24] 1309 	mov	b,#0x60
      000468 12r03r8F         [24] 1310 	lcall	_displayIPAddress
                                   1311 ;	main.c:136: _serial_putstr("             IP=###.###.###.###\n\r");
      00046B 90r00r6A         [24] 1312 	mov	dptr,#___str_5
      00046E 75 F0 80         [24] 1313 	mov	b,#0x80
      000471 12r00r00         [24] 1314 	lcall	__serial_putstr
                                   1315 ;	main.c:139: _serial_putstr("Subnet Mask: ");
      000474 90r00r8C         [24] 1316 	mov	dptr,#___str_6
      000477 75 F0 80         [24] 1317 	mov	b,#0x80
      00047A 12r00r00         [24] 1318 	lcall	__serial_putstr
                                   1319 ;	main.c:140: displayIPAddress(subnet);
      00047D 90r00r04         [24] 1320 	mov	dptr,#_subnet
      000480 75 F0 60         [24] 1321 	mov	b,#0x60
      000483 12r03r8F         [24] 1322 	lcall	_displayIPAddress
                                   1323 ;	main.c:141: _serial_putstr("         SUB=###.###.###.###\n\r");
      000486 90r00r9A         [24] 1324 	mov	dptr,#___str_7
      000489 75 F0 80         [24] 1325 	mov	b,#0x80
      00048C 12r00r00         [24] 1326 	lcall	__serial_putstr
                                   1327 ;	main.c:144: _serial_putstr("Gateway: ");
      00048F 90r00rB9         [24] 1328 	mov	dptr,#___str_8
      000492 75 F0 80         [24] 1329 	mov	b,#0x80
      000495 12r00r00         [24] 1330 	lcall	__serial_putstr
                                   1331 ;	main.c:145: displayIPAddress(gateway);
      000498 90r00r00         [24] 1332 	mov	dptr,#_gateway
      00049B 75 F0 60         [24] 1333 	mov	b,#0x60
      00049E 12r03r8F         [24] 1334 	lcall	_displayIPAddress
                                   1335 ;	main.c:146: _serial_putstr("              GATE=###.###.###.###\n\r");
      0004A1 90r00rC3         [24] 1336 	mov	dptr,#___str_9
      0004A4 75 F0 80         [24] 1337 	mov	b,#0x80
      0004A7 12r00r00         [24] 1338 	lcall	__serial_putstr
                                   1339 ;	main.c:149: _serial_putstr("MAC Addr: ");
      0004AA 90r00rE8         [24] 1340 	mov	dptr,#___str_10
      0004AD 75 F0 80         [24] 1341 	mov	b,#0x80
      0004B0 12r00r00         [24] 1342 	lcall	__serial_putstr
                                   1343 ;	main.c:150: displayMACAddress(mac);
      0004B3 90r00r0C         [24] 1344 	mov	dptr,#_mac
      0004B6 75 F0 60         [24] 1345 	mov	b,#0x60
      0004B9 12r03rE1         [24] 1346 	lcall	_displayMACAddress
                                   1347 ;	main.c:151: _serial_putstr("        MAC=FF FF FF FF FF FF\n\r");
      0004BC 90r00rF3         [24] 1348 	mov	dptr,#___str_11
      0004BF 75 F0 80         [24] 1349 	mov	b,#0x80
                                   1350 ;	main.c:152: }
      0004C2 02r00r00         [24] 1351 	ljmp	__serial_putstr
                                   1352 ;------------------------------------------------------------
                                   1353 ;Allocation info for local variables in function 'setuptcp'
                                   1354 ;------------------------------------------------------------
                                   1355 ;	main.c:155: void setuptcp(){
                                   1356 ;	-----------------------------------------
                                   1357 ;	 function setuptcp
                                   1358 ;	-----------------------------------------
      0004C5                       1359 _setuptcp:
                                   1360 ;	main.c:156: _w5500_set_tcp(SOCKET1);
      0004C5 75 82 01         [24] 1361 	mov	dpl,#0x01
      0004C8 12r00r00         [24] 1362 	lcall	__w5500_set_tcp
                                   1363 ;	main.c:157: _w5500_set_sourceport(SOCKET1, 5002);
      0004CB 78r00            [12] 1364 	mov	r0,#__w5500_set_sourceport_PARM_2
      0004CD 74 8A            [12] 1365 	mov	a,#0x8a
      0004CF F2               [24] 1366 	movx	@r0,a
      0004D0 08               [12] 1367 	inc	r0
      0004D1 74 13            [12] 1368 	mov	a,#0x13
      0004D3 F2               [24] 1369 	movx	@r0,a
      0004D4 75 82 01         [24] 1370 	mov	dpl,#0x01
      0004D7 12r00r00         [24] 1371 	lcall	__w5500_set_sourceport
                                   1372 ;	main.c:158: _w5500_open(SOCKET1);
      0004DA 75 82 01         [24] 1373 	mov	dpl,#0x01
      0004DD 12r00r00         [24] 1374 	lcall	__w5500_open
                                   1375 ;	main.c:159: _w5500_listen(SOCKET1);
      0004E0 75 82 01         [24] 1376 	mov	dpl,#0x01
                                   1377 ;	main.c:160: }
      0004E3 02r00r00         [24] 1378 	ljmp	__w5500_listen
                                   1379 ;------------------------------------------------------------
                                   1380 ;Allocation info for local variables in function 'setup'
                                   1381 ;------------------------------------------------------------
                                   1382 ;	main.c:163: void setup() {
                                   1383 ;	-----------------------------------------
                                   1384 ;	 function setup
                                   1385 ;	-----------------------------------------
      0004E6                       1386 _setup:
                                   1387 ;	main.c:164: _serial_begin();
      0004E6 12r00r00         [24] 1388 	lcall	__serial_begin
                                   1389 ;	main.c:166: _w5500_set_gateway(gateway);
      0004E9 78r00            [12] 1390 	mov	r0,#__w5500_write_PARM_3
      0004EB 74r00            [12] 1391 	mov	a,#_gateway
      0004ED F2               [24] 1392 	movx	@r0,a
      0004EE 08               [12] 1393 	inc	r0
      0004EF E4               [12] 1394 	clr	a
      0004F0 F2               [24] 1395 	movx	@r0,a
      0004F1 08               [12] 1396 	inc	r0
      0004F2 74 60            [12] 1397 	mov	a,#0x60
      0004F4 F2               [24] 1398 	movx	@r0,a
      0004F5 78r00            [12] 1399 	mov	r0,#__w5500_write_PARM_2
      0004F7 E4               [12] 1400 	clr	a
      0004F8 F2               [24] 1401 	movx	@r0,a
      0004F9 78r00            [12] 1402 	mov	r0,#__w5500_write_PARM_4
      0004FB 74 04            [12] 1403 	mov	a,#0x04
      0004FD F2               [24] 1404 	movx	@r0,a
      0004FE 08               [12] 1405 	inc	r0
      0004FF E4               [12] 1406 	clr	a
      000500 F2               [24] 1407 	movx	@r0,a
      000501 90 00 01         [24] 1408 	mov	dptr,#0x0001
      000504 12r00r00         [24] 1409 	lcall	__w5500_write
                                   1410 ;	main.c:167: _w5500_set_subnet(subnet);
      000507 78r00            [12] 1411 	mov	r0,#__w5500_write_PARM_3
      000509 74r04            [12] 1412 	mov	a,#_subnet
      00050B F2               [24] 1413 	movx	@r0,a
      00050C 08               [12] 1414 	inc	r0
      00050D E4               [12] 1415 	clr	a
      00050E F2               [24] 1416 	movx	@r0,a
      00050F 08               [12] 1417 	inc	r0
      000510 74 60            [12] 1418 	mov	a,#0x60
      000512 F2               [24] 1419 	movx	@r0,a
      000513 78r00            [12] 1420 	mov	r0,#__w5500_write_PARM_2
      000515 E4               [12] 1421 	clr	a
      000516 F2               [24] 1422 	movx	@r0,a
      000517 78r00            [12] 1423 	mov	r0,#__w5500_write_PARM_4
      000519 74 04            [12] 1424 	mov	a,#0x04
      00051B F2               [24] 1425 	movx	@r0,a
      00051C 08               [12] 1426 	inc	r0
      00051D E4               [12] 1427 	clr	a
      00051E F2               [24] 1428 	movx	@r0,a
      00051F 90 00 05         [24] 1429 	mov	dptr,#0x0005
      000522 12r00r00         [24] 1430 	lcall	__w5500_write
                                   1431 ;	main.c:168: _w5500_set_ip(ip);
      000525 78r00            [12] 1432 	mov	r0,#__w5500_write_PARM_3
      000527 74r08            [12] 1433 	mov	a,#_ip
      000529 F2               [24] 1434 	movx	@r0,a
      00052A 08               [12] 1435 	inc	r0
      00052B E4               [12] 1436 	clr	a
      00052C F2               [24] 1437 	movx	@r0,a
      00052D 08               [12] 1438 	inc	r0
      00052E 74 60            [12] 1439 	mov	a,#0x60
      000530 F2               [24] 1440 	movx	@r0,a
      000531 78r00            [12] 1441 	mov	r0,#__w5500_write_PARM_2
      000533 E4               [12] 1442 	clr	a
      000534 F2               [24] 1443 	movx	@r0,a
      000535 78r00            [12] 1444 	mov	r0,#__w5500_write_PARM_4
      000537 74 04            [12] 1445 	mov	a,#0x04
      000539 F2               [24] 1446 	movx	@r0,a
      00053A 08               [12] 1447 	inc	r0
      00053B E4               [12] 1448 	clr	a
      00053C F2               [24] 1449 	movx	@r0,a
      00053D 90 00 0F         [24] 1450 	mov	dptr,#0x000f
      000540 12r00r00         [24] 1451 	lcall	__w5500_write
                                   1452 ;	main.c:169: _w5500_set_mac(mac);
      000543 78r00            [12] 1453 	mov	r0,#__w5500_write_PARM_3
      000545 74r0C            [12] 1454 	mov	a,#_mac
      000547 F2               [24] 1455 	movx	@r0,a
      000548 08               [12] 1456 	inc	r0
      000549 E4               [12] 1457 	clr	a
      00054A F2               [24] 1458 	movx	@r0,a
      00054B 08               [12] 1459 	inc	r0
      00054C 74 60            [12] 1460 	mov	a,#0x60
      00054E F2               [24] 1461 	movx	@r0,a
      00054F 78r00            [12] 1462 	mov	r0,#__w5500_write_PARM_2
      000551 E4               [12] 1463 	clr	a
      000552 F2               [24] 1464 	movx	@r0,a
      000553 78r00            [12] 1465 	mov	r0,#__w5500_write_PARM_4
      000555 74 06            [12] 1466 	mov	a,#0x06
      000557 F2               [24] 1467 	movx	@r0,a
      000558 08               [12] 1468 	inc	r0
      000559 E4               [12] 1469 	clr	a
      00055A F2               [24] 1470 	movx	@r0,a
      00055B 90 00 09         [24] 1471 	mov	dptr,#0x0009
      00055E 12r00r00         [24] 1472 	lcall	__w5500_write
                                   1473 ;	main.c:173: setuptcp();
      000561 12r04rC5         [24] 1474 	lcall	_setuptcp
                                   1475 ;	main.c:174: _w5500_set_destinationip(SOCKET0, dest_ip);
      000564 78r00            [12] 1476 	mov	r0,#__w5500_set_destinationip_PARM_2
      000566 74r12            [12] 1477 	mov	a,#_dest_ip
      000568 F2               [24] 1478 	movx	@r0,a
      000569 08               [12] 1479 	inc	r0
      00056A E4               [12] 1480 	clr	a
      00056B F2               [24] 1481 	movx	@r0,a
      00056C 08               [12] 1482 	inc	r0
      00056D 74 60            [12] 1483 	mov	a,#0x60
      00056F F2               [24] 1484 	movx	@r0,a
      000570 75 82 00         [24] 1485 	mov	dpl,#0x00
      000573 12r00r00         [24] 1486 	lcall	__w5500_set_destinationip
                                   1487 ;	main.c:175: _w5500_set_sourceport(SOCKET0, 5001);
      000576 78r00            [12] 1488 	mov	r0,#__w5500_set_sourceport_PARM_2
      000578 74 89            [12] 1489 	mov	a,#0x89
      00057A F2               [24] 1490 	movx	@r0,a
      00057B 08               [12] 1491 	inc	r0
      00057C 23               [12] 1492 	rl	a
      00057D F2               [24] 1493 	movx	@r0,a
      00057E 75 82 00         [24] 1494 	mov	dpl,#0x00
      000581 12r00r00         [24] 1495 	lcall	__w5500_set_sourceport
                                   1496 ;	main.c:176: _w5500_set_remoteport(SOCKET0, 37052);
      000584 78r00            [12] 1497 	mov	r0,#__w5500_set_remoteport_PARM_2
      000586 74 BC            [12] 1498 	mov	a,#0xbc
      000588 F2               [24] 1499 	movx	@r0,a
      000589 08               [12] 1500 	inc	r0
      00058A 74 90            [12] 1501 	mov	a,#0x90
      00058C F2               [24] 1502 	movx	@r0,a
      00058D 75 82 00         [24] 1503 	mov	dpl,#0x00
      000590 12r00r00         [24] 1504 	lcall	__w5500_set_remoteport
                                   1505 ;	main.c:177: _w5500_set_udp(SOCKET0);
      000593 75 82 00         [24] 1506 	mov	dpl,#0x00
      000596 12r00r00         [24] 1507 	lcall	__w5500_set_udp
                                   1508 ;	main.c:178: _w5500_open(SOCKET0);
      000599 75 82 00         [24] 1509 	mov	dpl,#0x00
      00059C 12r00r00         [24] 1510 	lcall	__w5500_open
                                   1511 ;	main.c:180: P1_0 = 1;
                                   1512 ;	assignBit
      00059F D2 90            [12] 1513 	setb	_P1_0
                                   1514 ;	main.c:181: P1_1 = 1;
                                   1515 ;	assignBit
      0005A1 D2 91            [12] 1516 	setb	_P1_1
                                   1517 ;	main.c:182: }
      0005A3 22               [24] 1518 	ret
                                   1519 ;------------------------------------------------------------
                                   1520 ;Allocation info for local variables in function 'loop'
                                   1521 ;------------------------------------------------------------
                                   1522 ;	main.c:184: void loop() {
                                   1523 ;	-----------------------------------------
                                   1524 ;	 function loop
                                   1525 ;	-----------------------------------------
      0005A4                       1526 _loop:
                                   1527 ;	main.c:187: unsigned char recieved_udp = 0;
      0005A4 78r28            [12] 1528 	mov	r0,#_loop_recieved_udp_65536_80
      0005A6 E4               [12] 1529 	clr	a
      0005A7 F2               [24] 1530 	movx	@r0,a
                                   1531 ;	main.c:188: unsigned char recieved_tcp = 0;
      0005A8 7E 00            [12] 1532 	mov	r6,#0x00
                                   1533 ;	main.c:190: unsigned char input_index = 0;
      0005AA 78r3D            [12] 1534 	mov	r0,#_loop_input_index_65536_80
      0005AC F2               [24] 1535 	movx	@r0,a
                                   1536 ;	main.c:194: unsigned char serial_index = 0;
      0005AD 78r66            [12] 1537 	mov	r0,#_loop_serial_index_65536_80
      0005AF F2               [24] 1538 	movx	@r0,a
                                   1539 ;	main.c:198: while(1){
      0005B0                       1540 00166$:
                                   1541 ;	main.c:200: serialInput = _serial_emptybuffer();
      0005B0 C0 06            [24] 1542 	push	ar6
      0005B2 12r00r00         [24] 1543 	lcall	__serial_emptybuffer
      0005B5 AA 82            [24] 1544 	mov	r2,dpl
      0005B7 AB 83            [24] 1545 	mov	r3,dph
      0005B9 AC F0            [24] 1546 	mov	r4,b
      0005BB 78r17            [12] 1547 	mov	r0,#_serialInput
      0005BD EA               [12] 1548 	mov	a,r2
      0005BE F2               [24] 1549 	movx	@r0,a
      0005BF 08               [12] 1550 	inc	r0
      0005C0 EB               [12] 1551 	mov	a,r3
      0005C1 F2               [24] 1552 	movx	@r0,a
      0005C2 08               [12] 1553 	inc	r0
      0005C3 EC               [12] 1554 	mov	a,r4
      0005C4 F2               [24] 1555 	movx	@r0,a
                                   1556 ;	main.c:201: unsigned char inputLength = strlen(serialInput);
      0005C5 8A 82            [24] 1557 	mov	dpl,r2
      0005C7 8B 83            [24] 1558 	mov	dph,r3
      0005C9 8C F0            [24] 1559 	mov	b,r4
      0005CB 12r00r00         [24] 1560 	lcall	_strlen
      0005CE AC 82            [24] 1561 	mov	r4,dpl
      0005D0 D0 06            [24] 1562 	pop	ar6
      0005D2 78r67            [12] 1563 	mov	r0,#_loop_inputLength_131073_82
      0005D4 EC               [12] 1564 	mov	a,r4
      0005D5 F2               [24] 1565 	movx	@r0,a
                                   1566 ;	main.c:202: if (inputLength) {
      0005D6 EC               [12] 1567 	mov	a,r4
      0005D7 70 03            [24] 1568 	jnz	00340$
      0005D9 02r07rB5         [24] 1569 	ljmp	00203$
      0005DC                       1570 00340$:
                                   1571 ;	main.c:203: if(strcmp(serialInput, "?")){
      0005DC 78r1A            [12] 1572 	mov	r0,#_strcmp_PARM_2
      0005DE 74r13            [12] 1573 	mov	a,#___str_12
      0005E0 F2               [24] 1574 	movx	@r0,a
      0005E1 08               [12] 1575 	inc	r0
      0005E2 74s01            [12] 1576 	mov	a,#(___str_12 >> 8)
      0005E4 F2               [24] 1577 	movx	@r0,a
      0005E5 08               [12] 1578 	inc	r0
      0005E6 74 80            [12] 1579 	mov	a,#0x80
      0005E8 F2               [24] 1580 	movx	@r0,a
      0005E9 78r17            [12] 1581 	mov	r0,#_serialInput
      0005EB E2               [24] 1582 	movx	a,@r0
      0005EC F5 82            [12] 1583 	mov	dpl,a
      0005EE 08               [12] 1584 	inc	r0
      0005EF E2               [24] 1585 	movx	a,@r0
      0005F0 F5 83            [12] 1586 	mov	dph,a
      0005F2 08               [12] 1587 	inc	r0
      0005F3 E2               [24] 1588 	movx	a,@r0
      0005F4 F5 F0            [12] 1589 	mov	b,a
      0005F6 C0 06            [24] 1590 	push	ar6
      0005F8 12r00r20         [24] 1591 	lcall	_strcmp
      0005FB E5 82            [12] 1592 	mov	a,dpl
      0005FD D0 06            [24] 1593 	pop	ar6
      0005FF 60 0A            [24] 1594 	jz	00127$
                                   1595 ;	main.c:204: menudisplay();
      000601 C0 06            [24] 1596 	push	ar6
      000603 12r04r36         [24] 1597 	lcall	_menudisplay
      000606 D0 06            [24] 1598 	pop	ar6
      000608 02r07rB5         [24] 1599 	ljmp	00203$
      00060B                       1600 00127$:
                                   1601 ;	main.c:208: if(strcmp(serialInput, "\r")){
      00060B 78r1A            [12] 1602 	mov	r0,#_strcmp_PARM_2
      00060D 74r15            [12] 1603 	mov	a,#___str_13
      00060F F2               [24] 1604 	movx	@r0,a
      000610 08               [12] 1605 	inc	r0
      000611 74s01            [12] 1606 	mov	a,#(___str_13 >> 8)
      000613 F2               [24] 1607 	movx	@r0,a
      000614 08               [12] 1608 	inc	r0
      000615 74 80            [12] 1609 	mov	a,#0x80
      000617 F2               [24] 1610 	movx	@r0,a
      000618 78r17            [12] 1611 	mov	r0,#_serialInput
      00061A E2               [24] 1612 	movx	a,@r0
      00061B F5 82            [12] 1613 	mov	dpl,a
      00061D 08               [12] 1614 	inc	r0
      00061E E2               [24] 1615 	movx	a,@r0
      00061F F5 83            [12] 1616 	mov	dph,a
      000621 08               [12] 1617 	inc	r0
      000622 E2               [24] 1618 	movx	a,@r0
      000623 F5 F0            [12] 1619 	mov	b,a
      000625 C0 06            [24] 1620 	push	ar6
      000627 12r00r20         [24] 1621 	lcall	_strcmp
      00062A E5 82            [12] 1622 	mov	a,dpl
      00062C D0 06            [24] 1623 	pop	ar6
      00062E 70 03            [24] 1624 	jnz	00342$
      000630 02r07r68         [24] 1625 	ljmp	00200$
      000633                       1626 00342$:
                                   1627 ;	main.c:209: if(serial_buffer[0]=='I' && serial_buffer[2]=='='){
      000633 78r52            [12] 1628 	mov	r0,#_loop_serial_buffer_65536_80
      000635 E2               [24] 1629 	movx	a,@r0
      000636 FB               [12] 1630 	mov	r3,a
      000637 BB 49 35         [24] 1631 	cjne	r3,#0x49,00118$
      00063A 78r54            [12] 1632 	mov	r0,#(_loop_serial_buffer_65536_80 + 0x0002)
      00063C E2               [24] 1633 	movx	a,@r0
      00063D FB               [12] 1634 	mov	r3,a
      00063E BB 3D 2E         [24] 1635 	cjne	r3,#0x3d,00118$
                                   1636 ;	main.c:210: extractAndAssign(serial_buffer);
      000641 90r00r52         [24] 1637 	mov	dptr,#_loop_serial_buffer_65536_80
      000644 75 F0 60         [24] 1638 	mov	b,#0x60
      000647 C0 06            [24] 1639 	push	ar6
      000649 12r01r98         [24] 1640 	lcall	_extractAndAssign
                                   1641 ;	main.c:211: _w5500_set_ip(ip);
      00064C 78r00            [12] 1642 	mov	r0,#__w5500_write_PARM_3
      00064E 74r08            [12] 1643 	mov	a,#_ip
      000650 F2               [24] 1644 	movx	@r0,a
      000651 08               [12] 1645 	inc	r0
      000652 E4               [12] 1646 	clr	a
      000653 F2               [24] 1647 	movx	@r0,a
      000654 08               [12] 1648 	inc	r0
      000655 74 60            [12] 1649 	mov	a,#0x60
      000657 F2               [24] 1650 	movx	@r0,a
      000658 78r00            [12] 1651 	mov	r0,#__w5500_write_PARM_2
      00065A E4               [12] 1652 	clr	a
      00065B F2               [24] 1653 	movx	@r0,a
      00065C 78r00            [12] 1654 	mov	r0,#__w5500_write_PARM_4
      00065E 74 04            [12] 1655 	mov	a,#0x04
      000660 F2               [24] 1656 	movx	@r0,a
      000661 08               [12] 1657 	inc	r0
      000662 E4               [12] 1658 	clr	a
      000663 F2               [24] 1659 	movx	@r0,a
      000664 90 00 0F         [24] 1660 	mov	dptr,#0x000f
      000667 12r00r00         [24] 1661 	lcall	__w5500_write
      00066A D0 06            [24] 1662 	pop	ar6
      00066C 02r07r45         [24] 1663 	ljmp	00198$
      00066F                       1664 00118$:
                                   1665 ;	main.c:212: } else if(serial_buffer[0]=='R' && serial_buffer[3]=='='){
      00066F 78r52            [12] 1666 	mov	r0,#_loop_serial_buffer_65536_80
      000671 E2               [24] 1667 	movx	a,@r0
      000672 FB               [12] 1668 	mov	r3,a
      000673 BB 52 10         [24] 1669 	cjne	r3,#0x52,00114$
      000676 78r55            [12] 1670 	mov	r0,#(_loop_serial_buffer_65536_80 + 0x0003)
      000678 E2               [24] 1671 	movx	a,@r0
      000679 FB               [12] 1672 	mov	r3,a
      00067A BB 3D 09         [24] 1673 	cjne	r3,#0x3d,00114$
                                   1674 ;	main.c:213: RTU_Address = serial_buffer[4];
      00067D 78r56            [12] 1675 	mov	r0,#(_loop_serial_buffer_65536_80 + 0x0004)
      00067F 79r16            [12] 1676 	mov	r1,#_RTU_Address
      000681 E2               [24] 1677 	movx	a,@r0
      000682 F3               [24] 1678 	movx	@r1,a
      000683 02r07r45         [24] 1679 	ljmp	00198$
      000686                       1680 00114$:
                                   1681 ;	main.c:214: } else if(serial_buffer[0]=='G' && serial_buffer[4]=='='){
      000686 78r52            [12] 1682 	mov	r0,#_loop_serial_buffer_65536_80
      000688 E2               [24] 1683 	movx	a,@r0
      000689 FB               [12] 1684 	mov	r3,a
      00068A BB 47 35         [24] 1685 	cjne	r3,#0x47,00110$
      00068D 78r56            [12] 1686 	mov	r0,#(_loop_serial_buffer_65536_80 + 0x0004)
      00068F E2               [24] 1687 	movx	a,@r0
      000690 FB               [12] 1688 	mov	r3,a
      000691 BB 3D 2E         [24] 1689 	cjne	r3,#0x3d,00110$
                                   1690 ;	main.c:215: extractAndAssign(serial_buffer);
      000694 90r00r52         [24] 1691 	mov	dptr,#_loop_serial_buffer_65536_80
      000697 75 F0 60         [24] 1692 	mov	b,#0x60
      00069A C0 06            [24] 1693 	push	ar6
      00069C 12r01r98         [24] 1694 	lcall	_extractAndAssign
                                   1695 ;	main.c:216: _w5500_set_gateway(gateway);
      00069F 78r00            [12] 1696 	mov	r0,#__w5500_write_PARM_3
      0006A1 74r00            [12] 1697 	mov	a,#_gateway
      0006A3 F2               [24] 1698 	movx	@r0,a
      0006A4 08               [12] 1699 	inc	r0
      0006A5 E4               [12] 1700 	clr	a
      0006A6 F2               [24] 1701 	movx	@r0,a
      0006A7 08               [12] 1702 	inc	r0
      0006A8 74 60            [12] 1703 	mov	a,#0x60
      0006AA F2               [24] 1704 	movx	@r0,a
      0006AB 78r00            [12] 1705 	mov	r0,#__w5500_write_PARM_2
      0006AD E4               [12] 1706 	clr	a
      0006AE F2               [24] 1707 	movx	@r0,a
      0006AF 78r00            [12] 1708 	mov	r0,#__w5500_write_PARM_4
      0006B1 74 04            [12] 1709 	mov	a,#0x04
      0006B3 F2               [24] 1710 	movx	@r0,a
      0006B4 08               [12] 1711 	inc	r0
      0006B5 E4               [12] 1712 	clr	a
      0006B6 F2               [24] 1713 	movx	@r0,a
      0006B7 90 00 01         [24] 1714 	mov	dptr,#0x0001
      0006BA 12r00r00         [24] 1715 	lcall	__w5500_write
      0006BD D0 06            [24] 1716 	pop	ar6
      0006BF 02r07r45         [24] 1717 	ljmp	00198$
      0006C2                       1718 00110$:
                                   1719 ;	main.c:217: } else if(serial_buffer[0]=='S' && serial_buffer[3]=='='){
      0006C2 78r52            [12] 1720 	mov	r0,#_loop_serial_buffer_65536_80
      0006C4 E2               [24] 1721 	movx	a,@r0
      0006C5 FB               [12] 1722 	mov	r3,a
      0006C6 BB 53 34         [24] 1723 	cjne	r3,#0x53,00106$
      0006C9 78r55            [12] 1724 	mov	r0,#(_loop_serial_buffer_65536_80 + 0x0003)
      0006CB E2               [24] 1725 	movx	a,@r0
      0006CC FB               [12] 1726 	mov	r3,a
      0006CD BB 3D 2D         [24] 1727 	cjne	r3,#0x3d,00106$
                                   1728 ;	main.c:218: extractAndAssign(serial_buffer);
      0006D0 90r00r52         [24] 1729 	mov	dptr,#_loop_serial_buffer_65536_80
      0006D3 75 F0 60         [24] 1730 	mov	b,#0x60
      0006D6 C0 06            [24] 1731 	push	ar6
      0006D8 12r01r98         [24] 1732 	lcall	_extractAndAssign
                                   1733 ;	main.c:219: _w5500_set_subnet(subnet);
      0006DB 78r00            [12] 1734 	mov	r0,#__w5500_write_PARM_3
      0006DD 74r04            [12] 1735 	mov	a,#_subnet
      0006DF F2               [24] 1736 	movx	@r0,a
      0006E0 08               [12] 1737 	inc	r0
      0006E1 E4               [12] 1738 	clr	a
      0006E2 F2               [24] 1739 	movx	@r0,a
      0006E3 08               [12] 1740 	inc	r0
      0006E4 74 60            [12] 1741 	mov	a,#0x60
      0006E6 F2               [24] 1742 	movx	@r0,a
      0006E7 78r00            [12] 1743 	mov	r0,#__w5500_write_PARM_2
      0006E9 E4               [12] 1744 	clr	a
      0006EA F2               [24] 1745 	movx	@r0,a
      0006EB 78r00            [12] 1746 	mov	r0,#__w5500_write_PARM_4
      0006ED 74 04            [12] 1747 	mov	a,#0x04
      0006EF F2               [24] 1748 	movx	@r0,a
      0006F0 08               [12] 1749 	inc	r0
      0006F1 E4               [12] 1750 	clr	a
      0006F2 F2               [24] 1751 	movx	@r0,a
      0006F3 90 00 05         [24] 1752 	mov	dptr,#0x0005
      0006F6 12r00r00         [24] 1753 	lcall	__w5500_write
      0006F9 D0 06            [24] 1754 	pop	ar6
      0006FB 80 48            [24] 1755 	sjmp	00198$
      0006FD                       1756 00106$:
                                   1757 ;	main.c:220: } else if(serial_buffer[0]=='M' && serial_buffer[3]=='='){
      0006FD 78r52            [12] 1758 	mov	r0,#_loop_serial_buffer_65536_80
      0006FF E2               [24] 1759 	movx	a,@r0
      000700 FB               [12] 1760 	mov	r3,a
      000701 BB 4D 34         [24] 1761 	cjne	r3,#0x4d,00102$
      000704 78r55            [12] 1762 	mov	r0,#(_loop_serial_buffer_65536_80 + 0x0003)
      000706 E2               [24] 1763 	movx	a,@r0
      000707 FB               [12] 1764 	mov	r3,a
      000708 BB 3D 2D         [24] 1765 	cjne	r3,#0x3d,00102$
                                   1766 ;	main.c:221: parseMAC(serial_buffer);
      00070B 90r00r52         [24] 1767 	mov	dptr,#_loop_serial_buffer_65536_80
      00070E 75 F0 60         [24] 1768 	mov	b,#0x60
      000711 C0 06            [24] 1769 	push	ar6
      000713 12r00r94         [24] 1770 	lcall	_parseMAC
                                   1771 ;	main.c:222: _w5500_set_mac(mac);
      000716 78r00            [12] 1772 	mov	r0,#__w5500_write_PARM_3
      000718 74r0C            [12] 1773 	mov	a,#_mac
      00071A F2               [24] 1774 	movx	@r0,a
      00071B 08               [12] 1775 	inc	r0
      00071C E4               [12] 1776 	clr	a
      00071D F2               [24] 1777 	movx	@r0,a
      00071E 08               [12] 1778 	inc	r0
      00071F 74 60            [12] 1779 	mov	a,#0x60
      000721 F2               [24] 1780 	movx	@r0,a
      000722 78r00            [12] 1781 	mov	r0,#__w5500_write_PARM_2
      000724 E4               [12] 1782 	clr	a
      000725 F2               [24] 1783 	movx	@r0,a
      000726 78r00            [12] 1784 	mov	r0,#__w5500_write_PARM_4
      000728 74 06            [12] 1785 	mov	a,#0x06
      00072A F2               [24] 1786 	movx	@r0,a
      00072B 08               [12] 1787 	inc	r0
      00072C E4               [12] 1788 	clr	a
      00072D F2               [24] 1789 	movx	@r0,a
      00072E 90 00 09         [24] 1790 	mov	dptr,#0x0009
      000731 12r00r00         [24] 1791 	lcall	__w5500_write
      000734 D0 06            [24] 1792 	pop	ar6
      000736 80 0D            [24] 1793 	sjmp	00198$
      000738                       1794 00102$:
                                   1795 ;	main.c:224: _serial_putstr("\n\rInvalid Command");
      000738 90r01r17         [24] 1796 	mov	dptr,#___str_14
      00073B 75 F0 80         [24] 1797 	mov	b,#0x80
      00073E C0 06            [24] 1798 	push	ar6
      000740 12r00r00         [24] 1799 	lcall	__serial_putstr
      000743 D0 06            [24] 1800 	pop	ar6
                                   1801 ;	main.c:227: for(unsigned char i = 0; i< 20; i++){
      000745                       1802 00198$:
      000745 7B 00            [12] 1803 	mov	r3,#0x00
      000747                       1804 00171$:
      000747 BB 14 00         [24] 1805 	cjne	r3,#0x14,00363$
      00074A                       1806 00363$:
      00074A 50 09            [24] 1807 	jnc	00121$
                                   1808 ;	main.c:228: serial_buffer[i] = '\0';
      00074C EB               [12] 1809 	mov	a,r3
      00074D 24r52            [12] 1810 	add	a,#_loop_serial_buffer_65536_80
      00074F F8               [12] 1811 	mov	r0,a
      000750 E4               [12] 1812 	clr	a
      000751 F2               [24] 1813 	movx	@r0,a
                                   1814 ;	main.c:227: for(unsigned char i = 0; i< 20; i++){
      000752 0B               [12] 1815 	inc	r3
      000753 80 F2            [24] 1816 	sjmp	00171$
      000755                       1817 00121$:
                                   1818 ;	main.c:230: _serial_putstr("\n");
      000755 90r01r29         [24] 1819 	mov	dptr,#___str_15
      000758 75 F0 80         [24] 1820 	mov	b,#0x80
      00075B C0 06            [24] 1821 	push	ar6
      00075D 12r00r00         [24] 1822 	lcall	__serial_putstr
      000760 D0 06            [24] 1823 	pop	ar6
                                   1824 ;	main.c:231: serial_index=0;
      000762 78r66            [12] 1825 	mov	r0,#_loop_serial_index_65536_80
      000764 E4               [12] 1826 	clr	a
      000765 F2               [24] 1827 	movx	@r0,a
                                   1828 ;	main.c:233: for (unsigned char charIndex = 0; charIndex < inputLength; charIndex++)
      000766 80 39            [24] 1829 	sjmp	00125$
      000768                       1830 00200$:
      000768 78r66            [12] 1831 	mov	r0,#_loop_serial_index_65536_80
      00076A E2               [24] 1832 	movx	a,@r0
      00076B FB               [12] 1833 	mov	r3,a
      00076C 7A 00            [12] 1834 	mov	r2,#0x00
      00076E                       1835 00174$:
      00076E 78r67            [12] 1836 	mov	r0,#_loop_inputLength_131073_82
      000770 C3               [12] 1837 	clr	c
      000771 E2               [24] 1838 	movx	a,@r0
      000772 F5 F0            [12] 1839 	mov	b,a
      000774 EA               [12] 1840 	mov	a,r2
      000775 95 F0            [12] 1841 	subb	a,b
      000777 50 24            [24] 1842 	jnc	00223$
                                   1843 ;	main.c:235: serial_buffer[serial_index] = serialInput[charIndex];
      000779 C0 06            [24] 1844 	push	ar6
      00077B EB               [12] 1845 	mov	a,r3
      00077C 24r52            [12] 1846 	add	a,#_loop_serial_buffer_65536_80
      00077E F9               [12] 1847 	mov	r1,a
      00077F 78r17            [12] 1848 	mov	r0,#_serialInput
      000781 E2               [24] 1849 	movx	a,@r0
      000782 2A               [12] 1850 	add	a,r2
      000783 FD               [12] 1851 	mov	r5,a
      000784 08               [12] 1852 	inc	r0
      000785 E2               [24] 1853 	movx	a,@r0
      000786 34 00            [12] 1854 	addc	a,#0x00
      000788 FE               [12] 1855 	mov	r6,a
      000789 08               [12] 1856 	inc	r0
      00078A E2               [24] 1857 	movx	a,@r0
      00078B FF               [12] 1858 	mov	r7,a
      00078C 8D 82            [24] 1859 	mov	dpl,r5
      00078E 8E 83            [24] 1860 	mov	dph,r6
      000790 8F F0            [24] 1861 	mov	b,r7
      000792 12r00r00         [24] 1862 	lcall	__gptrget
      000795 FD               [12] 1863 	mov	r5,a
      000796 F3               [24] 1864 	movx	@r1,a
                                   1865 ;	main.c:236: serial_index++;
      000797 0B               [12] 1866 	inc	r3
                                   1867 ;	main.c:233: for (unsigned char charIndex = 0; charIndex < inputLength; charIndex++)
      000798 0A               [12] 1868 	inc	r2
      000799 D0 06            [24] 1869 	pop	ar6
      00079B 80 D1            [24] 1870 	sjmp	00174$
      00079D                       1871 00223$:
      00079D 78r66            [12] 1872 	mov	r0,#_loop_serial_index_65536_80
      00079F EB               [12] 1873 	mov	a,r3
      0007A0 F2               [24] 1874 	movx	@r0,a
      0007A1                       1875 00125$:
                                   1876 ;	main.c:239: _serial_putstr(serialInput);
      0007A1 78r17            [12] 1877 	mov	r0,#_serialInput
      0007A3 E2               [24] 1878 	movx	a,@r0
      0007A4 F5 82            [12] 1879 	mov	dpl,a
      0007A6 08               [12] 1880 	inc	r0
      0007A7 E2               [24] 1881 	movx	a,@r0
      0007A8 F5 83            [12] 1882 	mov	dph,a
      0007AA 08               [12] 1883 	inc	r0
      0007AB E2               [24] 1884 	movx	a,@r0
      0007AC F5 F0            [12] 1885 	mov	b,a
      0007AE C0 06            [24] 1886 	push	ar6
      0007B0 12r00r00         [24] 1887 	lcall	__serial_putstr
      0007B3 D0 06            [24] 1888 	pop	ar6
                                   1889 ;	main.c:246: while (_w5500_bytesinbuffer(SOCKET0)) {
      0007B5                       1890 00203$:
      0007B5 7F 00            [12] 1891 	mov	r7,#0x00
      0007B7 78r3D            [12] 1892 	mov	r0,#_loop_input_index_65536_80
      0007B9 E2               [24] 1893 	movx	a,@r0
      0007BA FD               [12] 1894 	mov	r5,a
      0007BB                       1895 00135$:
      0007BB 75 82 00         [24] 1896 	mov	dpl,#0x00
      0007BE C0 07            [24] 1897 	push	ar7
      0007C0 C0 06            [24] 1898 	push	ar6
      0007C2 C0 05            [24] 1899 	push	ar5
      0007C4 12r00r00         [24] 1900 	lcall	__w5500_bytesinbuffer
      0007C7 E5 82            [12] 1901 	mov	a,dpl
      0007C9 85 83 F0         [24] 1902 	mov	b,dph
      0007CC D0 05            [24] 1903 	pop	ar5
      0007CE D0 06            [24] 1904 	pop	ar6
      0007D0 D0 07            [24] 1905 	pop	ar7
      0007D2 45 F0            [12] 1906 	orl	a,b
      0007D4 60 6A            [24] 1907 	jz	00224$
                                   1908 ;	main.c:248: P1_0 = 0;
                                   1909 ;	assignBit
      0007D6 C2 90            [12] 1910 	clr	_P1_0
                                   1911 ;	main.c:249: P1_1 = 1;
                                   1912 ;	assignBit
      0007D8 D2 91            [12] 1913 	setb	_P1_1
                                   1914 ;	main.c:250: ++read;
      0007DA 0F               [12] 1915 	inc	r7
                                   1916 ;	main.c:251: if (read < 9) {
      0007DB BF 09 00         [24] 1917 	cjne	r7,#0x09,00367$
      0007DE                       1918 00367$:
      0007DE 50 14            [24] 1919 	jnc	00132$
                                   1920 ;	main.c:252: _w5500_readchar(SOCKET0);
      0007E0 75 82 00         [24] 1921 	mov	dpl,#0x00
      0007E3 C0 07            [24] 1922 	push	ar7
      0007E5 C0 06            [24] 1923 	push	ar6
      0007E7 C0 05            [24] 1924 	push	ar5
      0007E9 12r00r00         [24] 1925 	lcall	__w5500_readchar
      0007EC D0 05            [24] 1926 	pop	ar5
      0007EE D0 06            [24] 1927 	pop	ar6
      0007F0 D0 07            [24] 1928 	pop	ar7
                                   1929 ;	main.c:253: continue;
      0007F2 80 C7            [24] 1930 	sjmp	00135$
      0007F4                       1931 00132$:
                                   1932 ;	main.c:255: rec_char_byte = _w5500_readchar(SOCKET0);
      0007F4 75 82 00         [24] 1933 	mov	dpl,#0x00
      0007F7 C0 07            [24] 1934 	push	ar7
      0007F9 C0 06            [24] 1935 	push	ar6
      0007FB C0 05            [24] 1936 	push	ar5
      0007FD 12r00r00         [24] 1937 	lcall	__w5500_readchar
      000800 AB 82            [24] 1938 	mov	r3,dpl
      000802 D0 05            [24] 1939 	pop	ar5
      000804 D0 06            [24] 1940 	pop	ar6
      000806 D0 07            [24] 1941 	pop	ar7
                                   1942 ;	main.c:256: if (islower(rec_char_byte)) {
      000808 8B 02            [24] 1943 	mov	ar2,r3
                                   1944 ;	/usr/bin/../share/sdcc/include/ctype.h:71: return ((unsigned char)c >= 'a' && (unsigned char)c <= 'z');
      00080A BA 61 00         [24] 1945 	cjne	r2,#0x61,00369$
      00080D                       1946 00369$:
      00080D 40 22            [24] 1947 	jc	00134$
      00080F EA               [12] 1948 	mov	a,r2
      000810 24 85            [12] 1949 	add	a,#0xff - 0x7a
      000812 40 1D            [24] 1950 	jc	00134$
                                   1951 ;	main.c:257: rec_char_byte = toupper(rec_char_byte);
      000814 8B 02            [24] 1952 	mov	ar2,r3
      000816 7C 00            [12] 1953 	mov	r4,#0x00
      000818 8A 82            [24] 1954 	mov	dpl,r2
      00081A 8C 83            [24] 1955 	mov	dph,r4
      00081C C0 07            [24] 1956 	push	ar7
      00081E C0 06            [24] 1957 	push	ar6
      000820 C0 05            [24] 1958 	push	ar5
      000822 12r00r00         [24] 1959 	lcall	_toupper
      000825 AA 82            [24] 1960 	mov	r2,dpl
      000827 AC 83            [24] 1961 	mov	r4,dph
      000829 D0 05            [24] 1962 	pop	ar5
      00082B D0 06            [24] 1963 	pop	ar6
      00082D D0 07            [24] 1964 	pop	ar7
      00082F 8A 03            [24] 1965 	mov	ar3,r2
      000831                       1966 00134$:
                                   1967 ;	main.c:259: input_buffer[input_index] = rec_char_byte;
      000831 ED               [12] 1968 	mov	a,r5
      000832 24r29            [12] 1969 	add	a,#_loop_input_buffer_65536_80
      000834 F8               [12] 1970 	mov	r0,a
      000835 EB               [12] 1971 	mov	a,r3
      000836 F2               [24] 1972 	movx	@r0,a
                                   1973 ;	main.c:260: input_index++;
      000837 0D               [12] 1974 	inc	r5
                                   1975 ;	main.c:261: recieved_udp = 1;
      000838 78r28            [12] 1976 	mov	r0,#_loop_recieved_udp_65536_80
      00083A 74 01            [12] 1977 	mov	a,#0x01
      00083C F2               [24] 1978 	movx	@r0,a
      00083D 02r07rBB         [24] 1979 	ljmp	00135$
      000840                       1980 00224$:
      000840 78r3D            [12] 1981 	mov	r0,#_loop_input_index_65536_80
      000842 ED               [12] 1982 	mov	a,r5
      000843 F2               [24] 1983 	movx	@r0,a
                                   1984 ;	main.c:263: if(recieved_udp){
      000844 78r28            [12] 1985 	mov	r0,#_loop_recieved_udp_65536_80
      000846 E2               [24] 1986 	movx	a,@r0
      000847 70 03            [24] 1987 	jnz	00372$
      000849 02r08rCC         [24] 1988 	ljmp	00146$
      00084C                       1989 00372$:
                                   1990 ;	main.c:264: P1_0 = 1;
                                   1991 ;	assignBit
      00084C D2 90            [12] 1992 	setb	_P1_0
                                   1993 ;	main.c:265: P1_1 = 0;
                                   1994 ;	assignBit
      00084E C2 91            [12] 1995 	clr	_P1_1
                                   1996 ;	main.c:266: if(input_buffer[0] == ':' && input_buffer[1] == '<' && input_buffer[input_index-1] == '>'){
      000850 78r29            [12] 1997 	mov	r0,#_loop_input_buffer_65536_80
      000852 E2               [24] 1998 	movx	a,@r0
      000853 FF               [12] 1999 	mov	r7,a
      000854 BF 3A 4C         [24] 2000 	cjne	r7,#0x3a,00141$
      000857 78r2A            [12] 2001 	mov	r0,#(_loop_input_buffer_65536_80 + 0x0001)
      000859 E2               [24] 2002 	movx	a,@r0
      00085A FF               [12] 2003 	mov	r7,a
      00085B BF 3C 45         [24] 2004 	cjne	r7,#0x3c,00141$
      00085E 8D 07            [24] 2005 	mov	ar7,r5
      000860 EF               [12] 2006 	mov	a,r7
      000861 14               [12] 2007 	dec	a
      000862 24r29            [12] 2008 	add	a,#_loop_input_buffer_65536_80
      000864 F9               [12] 2009 	mov	r1,a
      000865 E3               [24] 2010 	movx	a,@r1
      000866 FC               [12] 2011 	mov	r4,a
      000867 BC 3E 39         [24] 2012 	cjne	r4,#0x3e,00141$
                                   2013 ;	main.c:267: input_buffer[1] = '[';
      00086A 78r2A            [12] 2014 	mov	r0,#(_loop_input_buffer_65536_80 + 0x0001)
      00086C 74 5B            [12] 2015 	mov	a,#0x5b
      00086E F2               [24] 2016 	movx	@r0,a
                                   2017 ;	main.c:268: input_buffer[input_index-1] = ']';
      00086F EF               [12] 2018 	mov	a,r7
      000870 14               [12] 2019 	dec	a
      000871 24r29            [12] 2020 	add	a,#_loop_input_buffer_65536_80
      000873 F8               [12] 2021 	mov	r0,a
      000874 74 5D            [12] 2022 	mov	a,#0x5d
      000876 F2               [24] 2023 	movx	@r0,a
                                   2024 ;	main.c:269: if(input_buffer[2] == RTU_Address){
      000877 78r2B            [12] 2025 	mov	r0,#(_loop_input_buffer_65536_80 + 0x0002)
      000879 E2               [24] 2026 	movx	a,@r0
      00087A FF               [12] 2027 	mov	r7,a
      00087B 78r16            [12] 2028 	mov	r0,#_RTU_Address
      00087D E2               [24] 2029 	movx	a,@r0
      00087E B5 07 44         [24] 2030 	cjne	a,ar7,00142$
                                   2031 ;	main.c:270: _w5500_writeto(SOCKET0, input_buffer, input_index);
      000881 78r00            [12] 2032 	mov	r0,#__w5500_writeto_PARM_2
      000883 74r29            [12] 2033 	mov	a,#_loop_input_buffer_65536_80
      000885 F2               [24] 2034 	movx	@r0,a
      000886 08               [12] 2035 	inc	r0
      000887 E4               [12] 2036 	clr	a
      000888 F2               [24] 2037 	movx	@r0,a
      000889 08               [12] 2038 	inc	r0
      00088A 74 60            [12] 2039 	mov	a,#0x60
      00088C F2               [24] 2040 	movx	@r0,a
      00088D 78r00            [12] 2041 	mov	r0,#__w5500_writeto_PARM_3
      00088F ED               [12] 2042 	mov	a,r5
      000890 F2               [24] 2043 	movx	@r0,a
      000891 75 82 00         [24] 2044 	mov	dpl,#0x00
      000894 C0 06            [24] 2045 	push	ar6
      000896 12r00r00         [24] 2046 	lcall	__w5500_writeto
                                   2047 ;	main.c:271: _w5500_send(SOCKET0);
      000899 75 82 00         [24] 2048 	mov	dpl,#0x00
      00089C 12r00r00         [24] 2049 	lcall	__w5500_send
      00089F D0 06            [24] 2050 	pop	ar6
      0008A1 80 22            [24] 2051 	sjmp	00142$
      0008A3                       2052 00141$:
                                   2053 ;	main.c:274: _w5500_writeto(SOCKET0, input_buffer, input_index);
      0008A3 78r00            [12] 2054 	mov	r0,#__w5500_writeto_PARM_2
      0008A5 74r29            [12] 2055 	mov	a,#_loop_input_buffer_65536_80
      0008A7 F2               [24] 2056 	movx	@r0,a
      0008A8 08               [12] 2057 	inc	r0
      0008A9 E4               [12] 2058 	clr	a
      0008AA F2               [24] 2059 	movx	@r0,a
      0008AB 08               [12] 2060 	inc	r0
      0008AC 74 60            [12] 2061 	mov	a,#0x60
      0008AE F2               [24] 2062 	movx	@r0,a
      0008AF 78r3D            [12] 2063 	mov	r0,#_loop_input_index_65536_80
      0008B1 79r00            [12] 2064 	mov	r1,#__w5500_writeto_PARM_3
      0008B3 E2               [24] 2065 	movx	a,@r0
      0008B4 F3               [24] 2066 	movx	@r1,a
      0008B5 75 82 00         [24] 2067 	mov	dpl,#0x00
      0008B8 C0 06            [24] 2068 	push	ar6
      0008BA 12r00r00         [24] 2069 	lcall	__w5500_writeto
                                   2070 ;	main.c:275: _w5500_send(SOCKET0);
      0008BD 75 82 00         [24] 2071 	mov	dpl,#0x00
      0008C0 12r00r00         [24] 2072 	lcall	__w5500_send
      0008C3 D0 06            [24] 2073 	pop	ar6
      0008C5                       2074 00142$:
                                   2075 ;	main.c:277: input_index = 0;
      0008C5 78r3D            [12] 2076 	mov	r0,#_loop_input_index_65536_80
      0008C7 E4               [12] 2077 	clr	a
      0008C8 F2               [24] 2078 	movx	@r0,a
                                   2079 ;	main.c:278: recieved_udp = 0;
      0008C9 78r28            [12] 2080 	mov	r0,#_loop_recieved_udp_65536_80
      0008CB F2               [24] 2081 	movx	@r0,a
      0008CC                       2082 00146$:
                                   2083 ;	main.c:283: unsigned char status = _w5500_get_status(SOCKET1);
      0008CC 75 82 01         [24] 2084 	mov	dpl,#0x01
      0008CF C0 06            [24] 2085 	push	ar6
      0008D1 12r00r00         [24] 2086 	lcall	__w5500_get_status
      0008D4 AF 82            [24] 2087 	mov	r7,dpl
      0008D6 D0 06            [24] 2088 	pop	ar6
                                   2089 ;	main.c:284: count=0;
      0008D8 7D 00            [12] 2090 	mov	r5,#0x00
                                   2091 ;	main.c:285: if (status == SOCK_ESTABLISHED) {
      0008DA BF 17 02         [24] 2092 	cjne	r7,#0x17,00381$
      0008DD 80 03            [24] 2093 	sjmp	00382$
      0008DF                       2094 00381$:
      0008DF 02r09rBF         [24] 2095 	ljmp	00162$
      0008E2                       2096 00382$:
                                   2097 ;	main.c:286: while (_w5500_bytesinbuffer(SOCKET1)) {
      0008E2                       2098 00149$:
      0008E2 75 82 01         [24] 2099 	mov	dpl,#0x01
      0008E5 C0 07            [24] 2100 	push	ar7
      0008E7 C0 06            [24] 2101 	push	ar6
      0008E9 C0 05            [24] 2102 	push	ar5
      0008EB 12r00r00         [24] 2103 	lcall	__w5500_bytesinbuffer
      0008EE E5 82            [12] 2104 	mov	a,dpl
      0008F0 85 83 F0         [24] 2105 	mov	b,dph
      0008F3 D0 05            [24] 2106 	pop	ar5
      0008F5 D0 06            [24] 2107 	pop	ar6
      0008F7 D0 07            [24] 2108 	pop	ar7
      0008F9 45 F0            [12] 2109 	orl	a,b
      0008FB 60 48            [24] 2110 	jz	00151$
                                   2111 ;	main.c:287: P1_0 = 0;
                                   2112 ;	assignBit
      0008FD C2 90            [12] 2113 	clr	_P1_0
                                   2114 ;	main.c:288: P1_1 = 1;
                                   2115 ;	assignBit
      0008FF D2 91            [12] 2116 	setb	_P1_1
                                   2117 ;	main.c:289: rec_char_byte_tcp = _w5500_readchar(SOCKET1);
      000901 75 82 01         [24] 2118 	mov	dpl,#0x01
      000904 C0 07            [24] 2119 	push	ar7
      000906 C0 05            [24] 2120 	push	ar5
      000908 12r00r00         [24] 2121 	lcall	__w5500_readchar
      00090B AC 82            [24] 2122 	mov	r4,dpl
      00090D D0 05            [24] 2123 	pop	ar5
      00090F D0 07            [24] 2124 	pop	ar7
                                   2125 ;	main.c:290: if (islower(rec_char_byte_tcp)) {
      000911 8C 03            [24] 2126 	mov	ar3,r4
                                   2127 ;	/usr/bin/../share/sdcc/include/ctype.h:71: return ((unsigned char)c >= 'a' && (unsigned char)c <= 'z');
      000913 BB 61 00         [24] 2128 	cjne	r3,#0x61,00384$
      000916                       2129 00384$:
      000916 40 1E            [24] 2130 	jc	00148$
      000918 EB               [12] 2131 	mov	a,r3
      000919 24 85            [12] 2132 	add	a,#0xff - 0x7a
      00091B 40 19            [24] 2133 	jc	00148$
                                   2134 ;	main.c:291: rec_char_byte_tcp = toupper(rec_char_byte_tcp);
      00091D 8C 02            [24] 2135 	mov	ar2,r4
      00091F 7B 00            [12] 2136 	mov	r3,#0x00
      000921 8A 82            [24] 2137 	mov	dpl,r2
      000923 8B 83            [24] 2138 	mov	dph,r3
      000925 C0 07            [24] 2139 	push	ar7
      000927 C0 05            [24] 2140 	push	ar5
      000929 12r00r00         [24] 2141 	lcall	_toupper
      00092C AA 82            [24] 2142 	mov	r2,dpl
      00092E AB 83            [24] 2143 	mov	r3,dph
      000930 D0 05            [24] 2144 	pop	ar5
      000932 D0 07            [24] 2145 	pop	ar7
      000934 8A 04            [24] 2146 	mov	ar4,r2
      000936                       2147 00148$:
                                   2148 ;	main.c:293: arrbuf[count] = rec_char_byte_tcp;
      000936 ED               [12] 2149 	mov	a,r5
      000937 24r3E            [12] 2150 	add	a,#_loop_arrbuf_65536_80
      000939 F8               [12] 2151 	mov	r0,a
      00093A EC               [12] 2152 	mov	a,r4
      00093B F2               [24] 2153 	movx	@r0,a
                                   2154 ;	main.c:294: recieved_tcp = 1;
      00093C 7E 01            [12] 2155 	mov	r6,#0x01
                                   2156 ;	main.c:295: count = count + 1;
      00093E 8D 04            [24] 2157 	mov	ar4,r5
      000940 EC               [12] 2158 	mov	a,r4
      000941 04               [12] 2159 	inc	a
      000942 FD               [12] 2160 	mov	r5,a
      000943 80 9D            [24] 2161 	sjmp	00149$
      000945                       2162 00151$:
                                   2163 ;	main.c:297: if(recieved_tcp){
      000945 EE               [12] 2164 	mov	a,r6
      000946 60 77            [24] 2165 	jz	00162$
                                   2166 ;	main.c:298: P1_0 = 1;
                                   2167 ;	assignBit
      000948 D2 90            [12] 2168 	setb	_P1_0
                                   2169 ;	main.c:299: P1_1 = 0;
                                   2170 ;	assignBit
      00094A C2 91            [12] 2171 	clr	_P1_1
                                   2172 ;	main.c:300: if (arrbuf[0] == ':' && arrbuf[1] == '<' && arrbuf[count-1] == '>') {
      00094C 78r3E            [12] 2173 	mov	r0,#_loop_arrbuf_65536_80
      00094E E2               [24] 2174 	movx	a,@r0
      00094F FC               [12] 2175 	mov	r4,a
      000950 BC 3A 6C         [24] 2176 	cjne	r4,#0x3a,00162$
      000953 78r3F            [12] 2177 	mov	r0,#(_loop_arrbuf_65536_80 + 0x0001)
      000955 E2               [24] 2178 	movx	a,@r0
      000956 FC               [12] 2179 	mov	r4,a
      000957 BC 3C 65         [24] 2180 	cjne	r4,#0x3c,00162$
      00095A 8D 04            [24] 2181 	mov	ar4,r5
      00095C EC               [12] 2182 	mov	a,r4
      00095D 14               [12] 2183 	dec	a
      00095E 24r3E            [12] 2184 	add	a,#_loop_arrbuf_65536_80
      000960 F9               [12] 2185 	mov	r1,a
      000961 E3               [24] 2186 	movx	a,@r1
      000962 FB               [12] 2187 	mov	r3,a
      000963 BB 3E 59         [24] 2188 	cjne	r3,#0x3e,00162$
                                   2189 ;	main.c:301: arrbuf[1] = '[';
      000966 78r3F            [12] 2190 	mov	r0,#(_loop_arrbuf_65536_80 + 0x0001)
      000968 74 5B            [12] 2191 	mov	a,#0x5b
      00096A F2               [24] 2192 	movx	@r0,a
                                   2193 ;	main.c:302: arrbuf[count - 1] = ']';
      00096B EC               [12] 2194 	mov	a,r4
      00096C 14               [12] 2195 	dec	a
      00096D 24r3E            [12] 2196 	add	a,#_loop_arrbuf_65536_80
      00096F F8               [12] 2197 	mov	r0,a
      000970 74 5D            [12] 2198 	mov	a,#0x5d
      000972 F2               [24] 2199 	movx	@r0,a
                                   2200 ;	main.c:303: if(arrbuf[2] == RTU_Address){
      000973 78r40            [12] 2201 	mov	r0,#(_loop_arrbuf_65536_80 + 0x0002)
      000975 E2               [24] 2202 	movx	a,@r0
      000976 FC               [12] 2203 	mov	r4,a
      000977 78r16            [12] 2204 	mov	r0,#_RTU_Address
      000979 E2               [24] 2205 	movx	a,@r0
      00097A B5 04 1C         [24] 2206 	cjne	a,ar4,00153$
                                   2207 ;	main.c:304: _w5500_writeto(SOCKET1, arrbuf, count);  
      00097D 78r00            [12] 2208 	mov	r0,#__w5500_writeto_PARM_2
      00097F 74r3E            [12] 2209 	mov	a,#_loop_arrbuf_65536_80
      000981 F2               [24] 2210 	movx	@r0,a
      000982 08               [12] 2211 	inc	r0
      000983 E4               [12] 2212 	clr	a
      000984 F2               [24] 2213 	movx	@r0,a
      000985 08               [12] 2214 	inc	r0
      000986 74 60            [12] 2215 	mov	a,#0x60
      000988 F2               [24] 2216 	movx	@r0,a
      000989 78r00            [12] 2217 	mov	r0,#__w5500_writeto_PARM_3
      00098B ED               [12] 2218 	mov	a,r5
      00098C F2               [24] 2219 	movx	@r0,a
      00098D 75 82 01         [24] 2220 	mov	dpl,#0x01
      000990 C0 07            [24] 2221 	push	ar7
      000992 12r00r00         [24] 2222 	lcall	__w5500_writeto
      000995 D0 07            [24] 2223 	pop	ar7
      000997 80 1A            [24] 2224 	sjmp	00154$
      000999                       2225 00153$:
                                   2226 ;	main.c:306: _w5500_writeto(SOCKET1, arrbuf, count);  
      000999 78r00            [12] 2227 	mov	r0,#__w5500_writeto_PARM_2
      00099B 74r3E            [12] 2228 	mov	a,#_loop_arrbuf_65536_80
      00099D F2               [24] 2229 	movx	@r0,a
      00099E 08               [12] 2230 	inc	r0
      00099F E4               [12] 2231 	clr	a
      0009A0 F2               [24] 2232 	movx	@r0,a
      0009A1 08               [12] 2233 	inc	r0
      0009A2 74 60            [12] 2234 	mov	a,#0x60
      0009A4 F2               [24] 2235 	movx	@r0,a
      0009A5 78r00            [12] 2236 	mov	r0,#__w5500_writeto_PARM_3
      0009A7 ED               [12] 2237 	mov	a,r5
      0009A8 F2               [24] 2238 	movx	@r0,a
      0009A9 75 82 01         [24] 2239 	mov	dpl,#0x01
      0009AC C0 07            [24] 2240 	push	ar7
      0009AE 12r00r00         [24] 2241 	lcall	__w5500_writeto
      0009B1 D0 07            [24] 2242 	pop	ar7
      0009B3                       2243 00154$:
                                   2244 ;	main.c:308: _w5500_send(SOCKET1);
      0009B3 75 82 01         [24] 2245 	mov	dpl,#0x01
      0009B6 C0 07            [24] 2246 	push	ar7
      0009B8 12r00r00         [24] 2247 	lcall	__w5500_send
      0009BB D0 07            [24] 2248 	pop	ar7
                                   2249 ;	main.c:309: recieved_tcp = 0;
      0009BD 7E 00            [12] 2250 	mov	r6,#0x00
      0009BF                       2251 00162$:
                                   2252 ;	main.c:313: if(status == SOCK_CLOSE_WAIT){
      0009BF BF 1C 02         [24] 2253 	cjne	r7,#0x1c,00396$
      0009C2 80 03            [24] 2254 	sjmp	00397$
      0009C4                       2255 00396$:
      0009C4 02r05rB0         [24] 2256 	ljmp	00166$
      0009C7                       2257 00397$:
                                   2258 ;	main.c:314: _w5500_close(SOCKET1);
      0009C7 75 82 01         [24] 2259 	mov	dpl,#0x01
      0009CA C0 06            [24] 2260 	push	ar6
      0009CC 12r00r00         [24] 2261 	lcall	__w5500_close
                                   2262 ;	main.c:315: setuptcp();
      0009CF 12r04rC5         [24] 2263 	lcall	_setuptcp
      0009D2 D0 06            [24] 2264 	pop	ar6
                                   2265 ;	main.c:319: }
      0009D4 02r05rB0         [24] 2266 	ljmp	00166$
                                   2267 ;------------------------------------------------------------
                                   2268 ;Allocation info for local variables in function 'main'
                                   2269 ;------------------------------------------------------------
                                   2270 ;	main.c:321: void main(void) {
                                   2271 ;	-----------------------------------------
                                   2272 ;	 function main
                                   2273 ;	-----------------------------------------
      0009D7                       2274 _main:
                                   2275 ;	main.c:322: setup();
      0009D7 12r04rE6         [24] 2276 	lcall	_setup
                                   2277 ;	main.c:323: while(1) {
      0009DA                       2278 00102$:
                                   2279 ;	main.c:324: loop();
      0009DA 12r05rA4         [24] 2280 	lcall	_loop
                                   2281 ;	main.c:326: }
      0009DD 80 FB            [24] 2282 	sjmp	00102$
                                   2283 	.area CSEG    (CODE)
                                   2284 	.area CONST   (CODE)
                                   2285 	.area CONST   (CODE)
      000000                       2286 ___str_0:
      000000 20                    2287 	.ascii " "
      000001 00                    2288 	.db 0x00
                                   2289 	.area CSEG    (CODE)
                                   2290 	.area CONST   (CODE)
      000002                       2291 ___str_1:
      000002 0A                    2292 	.db 0x0a
      000003 0D                    2293 	.db 0x0d
      000004 43 55 52 52 45 4E 54  2294 	.ascii "CURRENT CONFIG:                    CHANGE CMD:"
             20 43 4F 4E 46 49 47
             3A 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             43 48 41 4E 47 45 20
             43 4D 44 3A
      000032 0A                    2295 	.db 0x0a
      000033 0D                    2296 	.db 0x0d
      000034 00                    2297 	.db 0x00
                                   2298 	.area CSEG    (CODE)
                                   2299 	.area CONST   (CODE)
      000035                       2300 ___str_2:
      000035 52 54 55 20 41 64 64  2301 	.ascii "RTU Addr (0-9): "
             72 20 28 30 2D 39 29
             3A 20
      000045 00                    2302 	.db 0x00
                                   2303 	.area CSEG    (CODE)
                                   2304 	.area CONST   (CODE)
      000046                       2305 ___str_3:
      000046 20 20 20 20 20 20 20  2306 	.ascii "                  RTU=#"
             20 20 20 20 20 20 20
             20 20 20 20 52 54 55
             3D 23
      00005D 0A                    2307 	.db 0x0a
      00005E 0D                    2308 	.db 0x0d
      00005F 00                    2309 	.db 0x00
                                   2310 	.area CSEG    (CODE)
                                   2311 	.area CONST   (CODE)
      000060                       2312 ___str_4:
      000060 49 50 20 41 64 64 72  2313 	.ascii "IP Addr: "
             3A 20
      000069 00                    2314 	.db 0x00
                                   2315 	.area CSEG    (CODE)
                                   2316 	.area CONST   (CODE)
      00006A                       2317 ___str_5:
      00006A 20 20 20 20 20 20 20  2318 	.ascii "             IP=###.###.###.###"
             20 20 20 20 20 20 49
             50 3D 23 23 23 2E 23
             23 23 2E 23 23 23 2E
             23 23 23
      000089 0A                    2319 	.db 0x0a
      00008A 0D                    2320 	.db 0x0d
      00008B 00                    2321 	.db 0x00
                                   2322 	.area CSEG    (CODE)
                                   2323 	.area CONST   (CODE)
      00008C                       2324 ___str_6:
      00008C 53 75 62 6E 65 74 20  2325 	.ascii "Subnet Mask: "
             4D 61 73 6B 3A 20
      000099 00                    2326 	.db 0x00
                                   2327 	.area CSEG    (CODE)
                                   2328 	.area CONST   (CODE)
      00009A                       2329 ___str_7:
      00009A 20 20 20 20 20 20 20  2330 	.ascii "         SUB=###.###.###.###"
             20 20 53 55 42 3D 23
             23 23 2E 23 23 23 2E
             23 23 23 2E 23 23 23
      0000B6 0A                    2331 	.db 0x0a
      0000B7 0D                    2332 	.db 0x0d
      0000B8 00                    2333 	.db 0x00
                                   2334 	.area CSEG    (CODE)
                                   2335 	.area CONST   (CODE)
      0000B9                       2336 ___str_8:
      0000B9 47 61 74 65 77 61 79  2337 	.ascii "Gateway: "
             3A 20
      0000C2 00                    2338 	.db 0x00
                                   2339 	.area CSEG    (CODE)
                                   2340 	.area CONST   (CODE)
      0000C3                       2341 ___str_9:
      0000C3 20 20 20 20 20 20 20  2342 	.ascii "              GATE=###.###.###.###"
             20 20 20 20 20 20 20
             47 41 54 45 3D 23 23
             23 2E 23 23 23 2E 23
             23 23 2E 23 23 23
      0000E5 0A                    2343 	.db 0x0a
      0000E6 0D                    2344 	.db 0x0d
      0000E7 00                    2345 	.db 0x00
                                   2346 	.area CSEG    (CODE)
                                   2347 	.area CONST   (CODE)
      0000E8                       2348 ___str_10:
      0000E8 4D 41 43 20 41 64 64  2349 	.ascii "MAC Addr: "
             72 3A 20
      0000F2 00                    2350 	.db 0x00
                                   2351 	.area CSEG    (CODE)
                                   2352 	.area CONST   (CODE)
      0000F3                       2353 ___str_11:
      0000F3 20 20 20 20 20 20 20  2354 	.ascii "        MAC=FF FF FF FF FF FF"
             20 4D 41 43 3D 46 46
             20 46 46 20 46 46 20
             46 46 20 46 46 20 46
             46
      000110 0A                    2355 	.db 0x0a
      000111 0D                    2356 	.db 0x0d
      000112 00                    2357 	.db 0x00
                                   2358 	.area CSEG    (CODE)
                                   2359 	.area CONST   (CODE)
      000113                       2360 ___str_12:
      000113 3F                    2361 	.ascii "?"
      000114 00                    2362 	.db 0x00
                                   2363 	.area CSEG    (CODE)
                                   2364 	.area CONST   (CODE)
      000115                       2365 ___str_13:
      000115 0D                    2366 	.db 0x0d
      000116 00                    2367 	.db 0x00
                                   2368 	.area CSEG    (CODE)
                                   2369 	.area CONST   (CODE)
      000117                       2370 ___str_14:
      000117 0A                    2371 	.db 0x0a
      000118 0D                    2372 	.db 0x0d
      000119 49 6E 76 61 6C 69 64  2373 	.ascii "Invalid Command"
             20 43 6F 6D 6D 61 6E
             64
      000128 00                    2374 	.db 0x00
                                   2375 	.area CSEG    (CODE)
                                   2376 	.area CONST   (CODE)
      000129                       2377 ___str_15:
      000129 0A                    2378 	.db 0x0a
      00012A 00                    2379 	.db 0x00
                                   2380 	.area CSEG    (CODE)
                                   2381 	.area XINIT   (CODE)
                                   2382 	.area CABS    (ABS,CODE)
