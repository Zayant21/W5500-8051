                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module W5500
                                      6 	.optsdcc -mmcs51 --model-medium
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __w5500_get_SNIR
                                     12 	.globl __w5500_clear_SNIR
                                     13 	.globl __w5500_get_SIMR
                                     14 	.globl __w5500_get_SIR
                                     15 	.globl __w5500_get_IMR
                                     16 	.globl __spigeneric_frame_end
                                     17 	.globl __spigeneric_frame_start
                                     18 	.globl __spigeneric_spit_byte
                                     19 	.globl _CY
                                     20 	.globl _AC
                                     21 	.globl _F0
                                     22 	.globl _RS1
                                     23 	.globl _RS0
                                     24 	.globl _OV
                                     25 	.globl _F1
                                     26 	.globl _P
                                     27 	.globl _PS
                                     28 	.globl _PT1
                                     29 	.globl _PX1
                                     30 	.globl _PT0
                                     31 	.globl _PX0
                                     32 	.globl _RD
                                     33 	.globl _WR
                                     34 	.globl _T1
                                     35 	.globl _T0
                                     36 	.globl _INT1
                                     37 	.globl _INT0
                                     38 	.globl _TXD
                                     39 	.globl _RXD
                                     40 	.globl _P3_7
                                     41 	.globl _P3_6
                                     42 	.globl _P3_5
                                     43 	.globl _P3_4
                                     44 	.globl _P3_3
                                     45 	.globl _P3_2
                                     46 	.globl _P3_1
                                     47 	.globl _P3_0
                                     48 	.globl _EA
                                     49 	.globl _ES
                                     50 	.globl _ET1
                                     51 	.globl _EX1
                                     52 	.globl _ET0
                                     53 	.globl _EX0
                                     54 	.globl _P2_7
                                     55 	.globl _P2_6
                                     56 	.globl _P2_5
                                     57 	.globl _P2_4
                                     58 	.globl _P2_3
                                     59 	.globl _P2_2
                                     60 	.globl _P2_1
                                     61 	.globl _P2_0
                                     62 	.globl _SM0
                                     63 	.globl _SM1
                                     64 	.globl _SM2
                                     65 	.globl _REN
                                     66 	.globl _TB8
                                     67 	.globl _RB8
                                     68 	.globl _TI
                                     69 	.globl _RI
                                     70 	.globl _P1_7
                                     71 	.globl _P1_6
                                     72 	.globl _P1_5
                                     73 	.globl _P1_4
                                     74 	.globl _P1_3
                                     75 	.globl _P1_2
                                     76 	.globl _P1_1
                                     77 	.globl _P1_0
                                     78 	.globl _TF1
                                     79 	.globl _TR1
                                     80 	.globl _TF0
                                     81 	.globl _TR0
                                     82 	.globl _IE1
                                     83 	.globl _IT1
                                     84 	.globl _IE0
                                     85 	.globl _IT0
                                     86 	.globl _P0_7
                                     87 	.globl _P0_6
                                     88 	.globl _P0_5
                                     89 	.globl _P0_4
                                     90 	.globl _P0_3
                                     91 	.globl _P0_2
                                     92 	.globl _P0_1
                                     93 	.globl _P0_0
                                     94 	.globl _B
                                     95 	.globl _ACC
                                     96 	.globl _PSW
                                     97 	.globl _IP
                                     98 	.globl _P3
                                     99 	.globl _IE
                                    100 	.globl _P2
                                    101 	.globl _SBUF
                                    102 	.globl _SCON
                                    103 	.globl _P1
                                    104 	.globl _TH1
                                    105 	.globl _TH0
                                    106 	.globl _TL1
                                    107 	.globl _TL0
                                    108 	.globl _TMOD
                                    109 	.globl _TCON
                                    110 	.globl _PCON
                                    111 	.globl _DPH
                                    112 	.globl _DPL
                                    113 	.globl _SP
                                    114 	.globl _P0
                                    115 	.globl __w5500_write_PARM_4
                                    116 	.globl __w5500_write_PARM_3
                                    117 	.globl __w5500_write_PARM_2
                                    118 	.globl __w5500_read_PARM_4
                                    119 	.globl __w5500_read_PARM_3
                                    120 	.globl __w5500_read_PARM_2
                                    121 	.globl __w5500_writeto_PARM_3
                                    122 	.globl __w5500_writeto_PARM_2
                                    123 	.globl __w5500_set_destinationip_PARM_2
                                    124 	.globl __w5500_set_remoteport_PARM_2
                                    125 	.globl __w5500_set_sourceport_PARM_2
                                    126 	.globl __w5500_input_buffer
                                    127 	.globl _small_buffer
                                    128 	.globl __w5500_open
                                    129 	.globl __w5500_reset
                                    130 	.globl __w5500_close
                                    131 	.globl __w5500_discon
                                    132 	.globl __w5500_set_udp
                                    133 	.globl __w5500_set_tcp
                                    134 	.globl __w5500_set_IMR
                                    135 	.globl __w5500_get_status
                                    136 	.globl __w5500_listen
                                    137 	.globl __w5500_set_sourceport
                                    138 	.globl __w5500_set_remoteport
                                    139 	.globl __w5500_set_destinationip
                                    140 	.globl __w5500_writeto
                                    141 	.globl __w5500_bytesinbuffer
                                    142 	.globl __w5500_readchar
                                    143 	.globl __w5500_send
                                    144 	.globl __w5500_get_version
                                    145 	.globl __w5500_get_phyconfig
                                    146 	.globl __w5500_read
                                    147 	.globl __w5500_write
                                    148 ;--------------------------------------------------------
                                    149 ; special function registers
                                    150 ;--------------------------------------------------------
                                    151 	.area RSEG    (ABS,DATA)
      000000                        152 	.org 0x0000
                           000080   153 _P0	=	0x0080
                           000081   154 _SP	=	0x0081
                           000082   155 _DPL	=	0x0082
                           000083   156 _DPH	=	0x0083
                           000087   157 _PCON	=	0x0087
                           000088   158 _TCON	=	0x0088
                           000089   159 _TMOD	=	0x0089
                           00008A   160 _TL0	=	0x008a
                           00008B   161 _TL1	=	0x008b
                           00008C   162 _TH0	=	0x008c
                           00008D   163 _TH1	=	0x008d
                           000090   164 _P1	=	0x0090
                           000098   165 _SCON	=	0x0098
                           000099   166 _SBUF	=	0x0099
                           0000A0   167 _P2	=	0x00a0
                           0000A8   168 _IE	=	0x00a8
                           0000B0   169 _P3	=	0x00b0
                           0000B8   170 _IP	=	0x00b8
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000F0   173 _B	=	0x00f0
                                    174 ;--------------------------------------------------------
                                    175 ; special function bits
                                    176 ;--------------------------------------------------------
                                    177 	.area RSEG    (ABS,DATA)
      000000                        178 	.org 0x0000
                           000080   179 _P0_0	=	0x0080
                           000081   180 _P0_1	=	0x0081
                           000082   181 _P0_2	=	0x0082
                           000083   182 _P0_3	=	0x0083
                           000084   183 _P0_4	=	0x0084
                           000085   184 _P0_5	=	0x0085
                           000086   185 _P0_6	=	0x0086
                           000087   186 _P0_7	=	0x0087
                           000088   187 _IT0	=	0x0088
                           000089   188 _IE0	=	0x0089
                           00008A   189 _IT1	=	0x008a
                           00008B   190 _IE1	=	0x008b
                           00008C   191 _TR0	=	0x008c
                           00008D   192 _TF0	=	0x008d
                           00008E   193 _TR1	=	0x008e
                           00008F   194 _TF1	=	0x008f
                           000090   195 _P1_0	=	0x0090
                           000091   196 _P1_1	=	0x0091
                           000092   197 _P1_2	=	0x0092
                           000093   198 _P1_3	=	0x0093
                           000094   199 _P1_4	=	0x0094
                           000095   200 _P1_5	=	0x0095
                           000096   201 _P1_6	=	0x0096
                           000097   202 _P1_7	=	0x0097
                           000098   203 _RI	=	0x0098
                           000099   204 _TI	=	0x0099
                           00009A   205 _RB8	=	0x009a
                           00009B   206 _TB8	=	0x009b
                           00009C   207 _REN	=	0x009c
                           00009D   208 _SM2	=	0x009d
                           00009E   209 _SM1	=	0x009e
                           00009F   210 _SM0	=	0x009f
                           0000A0   211 _P2_0	=	0x00a0
                           0000A1   212 _P2_1	=	0x00a1
                           0000A2   213 _P2_2	=	0x00a2
                           0000A3   214 _P2_3	=	0x00a3
                           0000A4   215 _P2_4	=	0x00a4
                           0000A5   216 _P2_5	=	0x00a5
                           0000A6   217 _P2_6	=	0x00a6
                           0000A7   218 _P2_7	=	0x00a7
                           0000A8   219 _EX0	=	0x00a8
                           0000A9   220 _ET0	=	0x00a9
                           0000AA   221 _EX1	=	0x00aa
                           0000AB   222 _ET1	=	0x00ab
                           0000AC   223 _ES	=	0x00ac
                           0000AF   224 _EA	=	0x00af
                           0000B0   225 _P3_0	=	0x00b0
                           0000B1   226 _P3_1	=	0x00b1
                           0000B2   227 _P3_2	=	0x00b2
                           0000B3   228 _P3_3	=	0x00b3
                           0000B4   229 _P3_4	=	0x00b4
                           0000B5   230 _P3_5	=	0x00b5
                           0000B6   231 _P3_6	=	0x00b6
                           0000B7   232 _P3_7	=	0x00b7
                           0000B0   233 _RXD	=	0x00b0
                           0000B1   234 _TXD	=	0x00b1
                           0000B2   235 _INT0	=	0x00b2
                           0000B3   236 _INT1	=	0x00b3
                           0000B4   237 _T0	=	0x00b4
                           0000B5   238 _T1	=	0x00b5
                           0000B6   239 _WR	=	0x00b6
                           0000B7   240 _RD	=	0x00b7
                           0000B8   241 _PX0	=	0x00b8
                           0000B9   242 _PT0	=	0x00b9
                           0000BA   243 _PX1	=	0x00ba
                           0000BB   244 _PT1	=	0x00bb
                           0000BC   245 _PS	=	0x00bc
                           0000D0   246 _P	=	0x00d0
                           0000D1   247 _F1	=	0x00d1
                           0000D2   248 _OV	=	0x00d2
                           0000D3   249 _RS0	=	0x00d3
                           0000D4   250 _RS1	=	0x00d4
                           0000D5   251 _F0	=	0x00d5
                           0000D6   252 _AC	=	0x00d6
                           0000D7   253 _CY	=	0x00d7
                                    254 ;--------------------------------------------------------
                                    255 ; overlayable register banks
                                    256 ;--------------------------------------------------------
                                    257 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        258 	.ds 8
                                    259 ;--------------------------------------------------------
                                    260 ; internal ram data
                                    261 ;--------------------------------------------------------
                                    262 	.area DSEG    (DATA)
      000008                        263 __w5500_read_sloc0_1_0:
      000008                        264 	.ds 2
      00000A                        265 __w5500_write_sloc0_1_0:
      00000A                        266 	.ds 2
                                    267 ;--------------------------------------------------------
                                    268 ; overlayable items in internal ram 
                                    269 ;--------------------------------------------------------
                                    270 ;--------------------------------------------------------
                                    271 ; indirectly addressable internal ram data
                                    272 ;--------------------------------------------------------
                                    273 	.area ISEG    (DATA)
                                    274 ;--------------------------------------------------------
                                    275 ; absolute internal ram data
                                    276 ;--------------------------------------------------------
                                    277 	.area IABS    (ABS,DATA)
                                    278 	.area IABS    (ABS,DATA)
                                    279 ;--------------------------------------------------------
                                    280 ; bit data
                                    281 ;--------------------------------------------------------
                                    282 	.area BSEG    (BIT)
                                    283 ;--------------------------------------------------------
                                    284 ; paged external ram data
                                    285 ;--------------------------------------------------------
                                    286 	.area PSEG    (PAG,XDATA)
      0000AD                        287 _small_buffer::
      0000AD                        288 	.ds 2
      0000AF                        289 __w5500_input_buffer::
      0000AF                        290 	.ds 33
      0000D0                        291 __w5500_set_sourceport_PARM_2:
      0000D0                        292 	.ds 2
      0000D2                        293 __w5500_set_remoteport_PARM_2:
      0000D2                        294 	.ds 2
      0000D4                        295 __w5500_set_destinationip_PARM_2:
      0000D4                        296 	.ds 3
      0000D7                        297 __w5500_writeto_PARM_2:
      0000D7                        298 	.ds 3
      0000DA                        299 __w5500_writeto_PARM_3:
      0000DA                        300 	.ds 1
      0000DB                        301 __w5500_readchar_val_65536_58:
      0000DB                        302 	.ds 1
      0000DC                        303 __w5500_read_PARM_2:
      0000DC                        304 	.ds 1
      0000DD                        305 __w5500_read_PARM_3:
      0000DD                        306 	.ds 3
      0000E0                        307 __w5500_read_PARM_4:
      0000E0                        308 	.ds 2
      0000E2                        309 __w5500_write_PARM_2:
      0000E2                        310 	.ds 1
      0000E3                        311 __w5500_write_PARM_3:
      0000E3                        312 	.ds 3
      0000E6                        313 __w5500_write_PARM_4:
      0000E6                        314 	.ds 2
                                    315 ;--------------------------------------------------------
                                    316 ; external ram data
                                    317 ;--------------------------------------------------------
                                    318 	.area XSEG    (XDATA)
                                    319 ;--------------------------------------------------------
                                    320 ; absolute external ram data
                                    321 ;--------------------------------------------------------
                                    322 	.area XABS    (ABS,XDATA)
                                    323 ;--------------------------------------------------------
                                    324 ; external initialized ram data
                                    325 ;--------------------------------------------------------
                                    326 	.area XISEG   (XDATA)
                                    327 	.area HOME    (CODE)
                                    328 	.area GSINIT0 (CODE)
                                    329 	.area GSINIT1 (CODE)
                                    330 	.area GSINIT2 (CODE)
                                    331 	.area GSINIT3 (CODE)
                                    332 	.area GSINIT4 (CODE)
                                    333 	.area GSINIT5 (CODE)
                                    334 	.area GSINIT  (CODE)
                                    335 	.area GSFINAL (CODE)
                                    336 	.area CSEG    (CODE)
                                    337 ;--------------------------------------------------------
                                    338 ; global & static initialisations
                                    339 ;--------------------------------------------------------
                                    340 	.area HOME    (CODE)
                                    341 	.area GSINIT  (CODE)
                                    342 	.area GSFINAL (CODE)
                                    343 	.area GSINIT  (CODE)
                                    344 ;--------------------------------------------------------
                                    345 ; Home
                                    346 ;--------------------------------------------------------
                                    347 	.area HOME    (CODE)
                                    348 	.area HOME    (CODE)
                                    349 ;--------------------------------------------------------
                                    350 ; code
                                    351 ;--------------------------------------------------------
                                    352 	.area CSEG    (CODE)
                                    353 ;------------------------------------------------------------
                                    354 ;Allocation info for local variables in function '_w5500_open'
                                    355 ;------------------------------------------------------------
                                    356 ;	W5500.c:6: void _w5500_open(unsigned char socket) {
                                    357 ;	-----------------------------------------
                                    358 ;	 function _w5500_open
                                    359 ;	-----------------------------------------
      000CE2                        360 __w5500_open:
                           000007   361 	ar7 = 0x07
                           000006   362 	ar6 = 0x06
                           000005   363 	ar5 = 0x05
                           000004   364 	ar4 = 0x04
                           000003   365 	ar3 = 0x03
                           000002   366 	ar2 = 0x02
                           000001   367 	ar1 = 0x01
                           000000   368 	ar0 = 0x00
      000CE2 AF 82            [24]  369 	mov	r7,dpl
                                    370 ;	W5500.c:7: small_buffer[0] = 0x1;
      000CE4 78 AD            [12]  371 	mov	r0,#_small_buffer
      000CE6 74 01            [12]  372 	mov	a,#0x01
      000CE8 F2               [24]  373 	movx	@r0,a
                                    374 ;	W5500.c:8: _w5500_write(SOCKETN_COMMAND, (socket * 4) + 1, small_buffer, 1);
      000CE9 EF               [12]  375 	mov	a,r7
      000CEA 2F               [12]  376 	add	a,r7
      000CEB 25 E0            [12]  377 	add	a,acc
      000CED 78 E2            [12]  378 	mov	r0,#__w5500_write_PARM_2
      000CEF 04               [12]  379 	inc	a
      000CF0 F2               [24]  380 	movx	@r0,a
      000CF1 78 E3            [12]  381 	mov	r0,#__w5500_write_PARM_3
      000CF3 74 AD            [12]  382 	mov	a,#_small_buffer
      000CF5 F2               [24]  383 	movx	@r0,a
      000CF6 08               [12]  384 	inc	r0
      000CF7 E4               [12]  385 	clr	a
      000CF8 F2               [24]  386 	movx	@r0,a
      000CF9 08               [12]  387 	inc	r0
      000CFA 74 60            [12]  388 	mov	a,#0x60
      000CFC F2               [24]  389 	movx	@r0,a
      000CFD 78 E6            [12]  390 	mov	r0,#__w5500_write_PARM_4
      000CFF 74 01            [12]  391 	mov	a,#0x01
      000D01 F2               [24]  392 	movx	@r0,a
      000D02 08               [12]  393 	inc	r0
      000D03 E4               [12]  394 	clr	a
      000D04 F2               [24]  395 	movx	@r0,a
      000D05 90 00 01         [24]  396 	mov	dptr,#0x0001
                                    397 ;	W5500.c:9: }
      000D08 02 12 7E         [24]  398 	ljmp	__w5500_write
                                    399 ;------------------------------------------------------------
                                    400 ;Allocation info for local variables in function '_w5500_reset'
                                    401 ;------------------------------------------------------------
                                    402 ;	W5500.c:11: void _w5500_reset() {
                                    403 ;	-----------------------------------------
                                    404 ;	 function _w5500_reset
                                    405 ;	-----------------------------------------
      000D0B                        406 __w5500_reset:
                                    407 ;	W5500.c:12: small_buffer[0] = 0x80;
      000D0B 78 AD            [12]  408 	mov	r0,#_small_buffer
      000D0D 74 80            [12]  409 	mov	a,#0x80
      000D0F F2               [24]  410 	movx	@r0,a
                                    411 ;	W5500.c:13: _w5500_write(0x00, 0x00, small_buffer, 1);
      000D10 78 E3            [12]  412 	mov	r0,#__w5500_write_PARM_3
      000D12 74 AD            [12]  413 	mov	a,#_small_buffer
      000D14 F2               [24]  414 	movx	@r0,a
      000D15 08               [12]  415 	inc	r0
      000D16 E4               [12]  416 	clr	a
      000D17 F2               [24]  417 	movx	@r0,a
      000D18 08               [12]  418 	inc	r0
      000D19 74 60            [12]  419 	mov	a,#0x60
      000D1B F2               [24]  420 	movx	@r0,a
      000D1C 78 E2            [12]  421 	mov	r0,#__w5500_write_PARM_2
      000D1E E4               [12]  422 	clr	a
      000D1F F2               [24]  423 	movx	@r0,a
      000D20 78 E6            [12]  424 	mov	r0,#__w5500_write_PARM_4
      000D22 04               [12]  425 	inc	a
      000D23 F2               [24]  426 	movx	@r0,a
      000D24 08               [12]  427 	inc	r0
      000D25 E4               [12]  428 	clr	a
      000D26 F2               [24]  429 	movx	@r0,a
      000D27 90 00 00         [24]  430 	mov	dptr,#0x0000
                                    431 ;	W5500.c:14: }
      000D2A 02 12 7E         [24]  432 	ljmp	__w5500_write
                                    433 ;------------------------------------------------------------
                                    434 ;Allocation info for local variables in function '_w5500_close'
                                    435 ;------------------------------------------------------------
                                    436 ;	W5500.c:16: void _w5500_close(unsigned char socket) {
                                    437 ;	-----------------------------------------
                                    438 ;	 function _w5500_close
                                    439 ;	-----------------------------------------
      000D2D                        440 __w5500_close:
      000D2D AF 82            [24]  441 	mov	r7,dpl
                                    442 ;	W5500.c:17: small_buffer[0] = 0x10;
      000D2F 78 AD            [12]  443 	mov	r0,#_small_buffer
      000D31 74 10            [12]  444 	mov	a,#0x10
      000D33 F2               [24]  445 	movx	@r0,a
                                    446 ;	W5500.c:18: _w5500_write(SOCKETN_COMMAND, (socket * 4) + 1, small_buffer, 1);
      000D34 EF               [12]  447 	mov	a,r7
      000D35 2F               [12]  448 	add	a,r7
      000D36 25 E0            [12]  449 	add	a,acc
      000D38 78 E2            [12]  450 	mov	r0,#__w5500_write_PARM_2
      000D3A 04               [12]  451 	inc	a
      000D3B F2               [24]  452 	movx	@r0,a
      000D3C 78 E3            [12]  453 	mov	r0,#__w5500_write_PARM_3
      000D3E 74 AD            [12]  454 	mov	a,#_small_buffer
      000D40 F2               [24]  455 	movx	@r0,a
      000D41 08               [12]  456 	inc	r0
      000D42 E4               [12]  457 	clr	a
      000D43 F2               [24]  458 	movx	@r0,a
      000D44 08               [12]  459 	inc	r0
      000D45 74 60            [12]  460 	mov	a,#0x60
      000D47 F2               [24]  461 	movx	@r0,a
      000D48 78 E6            [12]  462 	mov	r0,#__w5500_write_PARM_4
      000D4A 74 01            [12]  463 	mov	a,#0x01
      000D4C F2               [24]  464 	movx	@r0,a
      000D4D 08               [12]  465 	inc	r0
      000D4E E4               [12]  466 	clr	a
      000D4F F2               [24]  467 	movx	@r0,a
      000D50 90 00 01         [24]  468 	mov	dptr,#0x0001
                                    469 ;	W5500.c:19: }
      000D53 02 12 7E         [24]  470 	ljmp	__w5500_write
                                    471 ;------------------------------------------------------------
                                    472 ;Allocation info for local variables in function '_w5500_discon'
                                    473 ;------------------------------------------------------------
                                    474 ;	W5500.c:21: void _w5500_discon(unsigned char socket) {
                                    475 ;	-----------------------------------------
                                    476 ;	 function _w5500_discon
                                    477 ;	-----------------------------------------
      000D56                        478 __w5500_discon:
      000D56 AF 82            [24]  479 	mov	r7,dpl
                                    480 ;	W5500.c:22: small_buffer[0] = 0x08;
      000D58 78 AD            [12]  481 	mov	r0,#_small_buffer
      000D5A 74 08            [12]  482 	mov	a,#0x08
      000D5C F2               [24]  483 	movx	@r0,a
                                    484 ;	W5500.c:23: _w5500_write(SOCKETN_COMMAND, (socket * 4) + 1, small_buffer, 1);
      000D5D EF               [12]  485 	mov	a,r7
      000D5E 2F               [12]  486 	add	a,r7
      000D5F 25 E0            [12]  487 	add	a,acc
      000D61 78 E2            [12]  488 	mov	r0,#__w5500_write_PARM_2
      000D63 04               [12]  489 	inc	a
      000D64 F2               [24]  490 	movx	@r0,a
      000D65 78 E3            [12]  491 	mov	r0,#__w5500_write_PARM_3
      000D67 74 AD            [12]  492 	mov	a,#_small_buffer
      000D69 F2               [24]  493 	movx	@r0,a
      000D6A 08               [12]  494 	inc	r0
      000D6B E4               [12]  495 	clr	a
      000D6C F2               [24]  496 	movx	@r0,a
      000D6D 08               [12]  497 	inc	r0
      000D6E 74 60            [12]  498 	mov	a,#0x60
      000D70 F2               [24]  499 	movx	@r0,a
      000D71 78 E6            [12]  500 	mov	r0,#__w5500_write_PARM_4
      000D73 74 01            [12]  501 	mov	a,#0x01
      000D75 F2               [24]  502 	movx	@r0,a
      000D76 08               [12]  503 	inc	r0
      000D77 E4               [12]  504 	clr	a
      000D78 F2               [24]  505 	movx	@r0,a
      000D79 90 00 01         [24]  506 	mov	dptr,#0x0001
                                    507 ;	W5500.c:24: }
      000D7C 02 12 7E         [24]  508 	ljmp	__w5500_write
                                    509 ;------------------------------------------------------------
                                    510 ;Allocation info for local variables in function '_w5500_set_udp'
                                    511 ;------------------------------------------------------------
                                    512 ;	W5500.c:26: void _w5500_set_udp(unsigned char socket) {
                                    513 ;	-----------------------------------------
                                    514 ;	 function _w5500_set_udp
                                    515 ;	-----------------------------------------
      000D7F                        516 __w5500_set_udp:
                                    517 ;	W5500.c:27: _w5500_read(0x00, (socket * 4) + 1, small_buffer, 1);
      000D7F E5 82            [12]  518 	mov	a,dpl
      000D81 25 82            [12]  519 	add	a,dpl
      000D83 25 E0            [12]  520 	add	a,acc
      000D85 FF               [12]  521 	mov	r7,a
      000D86 0F               [12]  522 	inc	r7
      000D87 78 DD            [12]  523 	mov	r0,#__w5500_read_PARM_3
      000D89 74 AD            [12]  524 	mov	a,#_small_buffer
      000D8B F2               [24]  525 	movx	@r0,a
      000D8C 08               [12]  526 	inc	r0
      000D8D E4               [12]  527 	clr	a
      000D8E F2               [24]  528 	movx	@r0,a
      000D8F 08               [12]  529 	inc	r0
      000D90 74 60            [12]  530 	mov	a,#0x60
      000D92 F2               [24]  531 	movx	@r0,a
      000D93 78 DC            [12]  532 	mov	r0,#__w5500_read_PARM_2
      000D95 EF               [12]  533 	mov	a,r7
      000D96 F2               [24]  534 	movx	@r0,a
      000D97 78 E0            [12]  535 	mov	r0,#__w5500_read_PARM_4
      000D99 74 01            [12]  536 	mov	a,#0x01
      000D9B F2               [24]  537 	movx	@r0,a
      000D9C 08               [12]  538 	inc	r0
      000D9D E4               [12]  539 	clr	a
      000D9E F2               [24]  540 	movx	@r0,a
      000D9F 90 00 00         [24]  541 	mov	dptr,#0x0000
      000DA2 C0 07            [24]  542 	push	ar7
      000DA4 12 12 06         [24]  543 	lcall	__w5500_read
      000DA7 D0 07            [24]  544 	pop	ar7
                                    545 ;	W5500.c:28: small_buffer[0] &= 0xF0;
      000DA9 78 AD            [12]  546 	mov	r0,#_small_buffer
      000DAB E2               [24]  547 	movx	a,@r0
      000DAC FE               [12]  548 	mov	r6,a
      000DAD 53 06 F0         [24]  549 	anl	ar6,#0xf0
      000DB0 78 AD            [12]  550 	mov	r0,#_small_buffer
      000DB2 EE               [12]  551 	mov	a,r6
      000DB3 F2               [24]  552 	movx	@r0,a
                                    553 ;	W5500.c:29: small_buffer[0] |= PROTOCOL_UDP;
      000DB4 74 02            [12]  554 	mov	a,#0x02
      000DB6 4E               [12]  555 	orl	a,r6
      000DB7 78 AD            [12]  556 	mov	r0,#_small_buffer
      000DB9 F2               [24]  557 	movx	@r0,a
                                    558 ;	W5500.c:30: _w5500_write(0x00, (socket * 4) + 1, small_buffer, 1);
      000DBA 78 E3            [12]  559 	mov	r0,#__w5500_write_PARM_3
      000DBC 74 AD            [12]  560 	mov	a,#_small_buffer
      000DBE F2               [24]  561 	movx	@r0,a
      000DBF 08               [12]  562 	inc	r0
      000DC0 E4               [12]  563 	clr	a
      000DC1 F2               [24]  564 	movx	@r0,a
      000DC2 08               [12]  565 	inc	r0
      000DC3 74 60            [12]  566 	mov	a,#0x60
      000DC5 F2               [24]  567 	movx	@r0,a
      000DC6 78 E2            [12]  568 	mov	r0,#__w5500_write_PARM_2
      000DC8 EF               [12]  569 	mov	a,r7
      000DC9 F2               [24]  570 	movx	@r0,a
      000DCA 78 E6            [12]  571 	mov	r0,#__w5500_write_PARM_4
      000DCC 74 01            [12]  572 	mov	a,#0x01
      000DCE F2               [24]  573 	movx	@r0,a
      000DCF 08               [12]  574 	inc	r0
      000DD0 E4               [12]  575 	clr	a
      000DD1 F2               [24]  576 	movx	@r0,a
      000DD2 90 00 00         [24]  577 	mov	dptr,#0x0000
                                    578 ;	W5500.c:31: }
      000DD5 02 12 7E         [24]  579 	ljmp	__w5500_write
                                    580 ;------------------------------------------------------------
                                    581 ;Allocation info for local variables in function '_w5500_set_tcp'
                                    582 ;------------------------------------------------------------
                                    583 ;	W5500.c:33: void _w5500_set_tcp(unsigned char socket) {
                                    584 ;	-----------------------------------------
                                    585 ;	 function _w5500_set_tcp
                                    586 ;	-----------------------------------------
      000DD8                        587 __w5500_set_tcp:
                                    588 ;	W5500.c:34: _w5500_read(0x00, (socket * 4) + 1, small_buffer, 1);
      000DD8 E5 82            [12]  589 	mov	a,dpl
      000DDA 25 82            [12]  590 	add	a,dpl
      000DDC 25 E0            [12]  591 	add	a,acc
      000DDE FF               [12]  592 	mov	r7,a
      000DDF 0F               [12]  593 	inc	r7
      000DE0 78 DD            [12]  594 	mov	r0,#__w5500_read_PARM_3
      000DE2 74 AD            [12]  595 	mov	a,#_small_buffer
      000DE4 F2               [24]  596 	movx	@r0,a
      000DE5 08               [12]  597 	inc	r0
      000DE6 E4               [12]  598 	clr	a
      000DE7 F2               [24]  599 	movx	@r0,a
      000DE8 08               [12]  600 	inc	r0
      000DE9 74 60            [12]  601 	mov	a,#0x60
      000DEB F2               [24]  602 	movx	@r0,a
      000DEC 78 DC            [12]  603 	mov	r0,#__w5500_read_PARM_2
      000DEE EF               [12]  604 	mov	a,r7
      000DEF F2               [24]  605 	movx	@r0,a
      000DF0 78 E0            [12]  606 	mov	r0,#__w5500_read_PARM_4
      000DF2 74 01            [12]  607 	mov	a,#0x01
      000DF4 F2               [24]  608 	movx	@r0,a
      000DF5 08               [12]  609 	inc	r0
      000DF6 E4               [12]  610 	clr	a
      000DF7 F2               [24]  611 	movx	@r0,a
      000DF8 90 00 00         [24]  612 	mov	dptr,#0x0000
      000DFB C0 07            [24]  613 	push	ar7
      000DFD 12 12 06         [24]  614 	lcall	__w5500_read
      000E00 D0 07            [24]  615 	pop	ar7
                                    616 ;	W5500.c:35: small_buffer[0] &= 0xF0;
      000E02 78 AD            [12]  617 	mov	r0,#_small_buffer
      000E04 E2               [24]  618 	movx	a,@r0
      000E05 FE               [12]  619 	mov	r6,a
      000E06 53 06 F0         [24]  620 	anl	ar6,#0xf0
      000E09 78 AD            [12]  621 	mov	r0,#_small_buffer
      000E0B EE               [12]  622 	mov	a,r6
      000E0C F2               [24]  623 	movx	@r0,a
                                    624 ;	W5500.c:36: small_buffer[0] |= PROTOCOL_TCP;
      000E0D 74 01            [12]  625 	mov	a,#0x01
      000E0F 4E               [12]  626 	orl	a,r6
      000E10 78 AD            [12]  627 	mov	r0,#_small_buffer
      000E12 F2               [24]  628 	movx	@r0,a
                                    629 ;	W5500.c:37: _w5500_write(0x00, (socket * 4) + 1, small_buffer, 1);
      000E13 78 E3            [12]  630 	mov	r0,#__w5500_write_PARM_3
      000E15 74 AD            [12]  631 	mov	a,#_small_buffer
      000E17 F2               [24]  632 	movx	@r0,a
      000E18 08               [12]  633 	inc	r0
      000E19 E4               [12]  634 	clr	a
      000E1A F2               [24]  635 	movx	@r0,a
      000E1B 08               [12]  636 	inc	r0
      000E1C 74 60            [12]  637 	mov	a,#0x60
      000E1E F2               [24]  638 	movx	@r0,a
      000E1F 78 E2            [12]  639 	mov	r0,#__w5500_write_PARM_2
      000E21 EF               [12]  640 	mov	a,r7
      000E22 F2               [24]  641 	movx	@r0,a
      000E23 78 E6            [12]  642 	mov	r0,#__w5500_write_PARM_4
      000E25 74 01            [12]  643 	mov	a,#0x01
      000E27 F2               [24]  644 	movx	@r0,a
      000E28 08               [12]  645 	inc	r0
      000E29 E4               [12]  646 	clr	a
      000E2A F2               [24]  647 	movx	@r0,a
      000E2B 90 00 00         [24]  648 	mov	dptr,#0x0000
                                    649 ;	W5500.c:38: }
      000E2E 02 12 7E         [24]  650 	ljmp	__w5500_write
                                    651 ;------------------------------------------------------------
                                    652 ;Allocation info for local variables in function '_w5500_get_IMR'
                                    653 ;------------------------------------------------------------
                                    654 ;	W5500.c:41: unsigned char _w5500_get_IMR(unsigned char socket) {
                                    655 ;	-----------------------------------------
                                    656 ;	 function _w5500_get_IMR
                                    657 ;	-----------------------------------------
      000E31                        658 __w5500_get_IMR:
                                    659 ;	W5500.c:42: _w5500_read(SOCKETN_IMR, (socket * 4) + 1, small_buffer, 1);
      000E31 E5 82            [12]  660 	mov	a,dpl
      000E33 25 82            [12]  661 	add	a,dpl
      000E35 25 E0            [12]  662 	add	a,acc
      000E37 78 DC            [12]  663 	mov	r0,#__w5500_read_PARM_2
      000E39 04               [12]  664 	inc	a
      000E3A F2               [24]  665 	movx	@r0,a
      000E3B 78 DD            [12]  666 	mov	r0,#__w5500_read_PARM_3
      000E3D 74 AD            [12]  667 	mov	a,#_small_buffer
      000E3F F2               [24]  668 	movx	@r0,a
      000E40 08               [12]  669 	inc	r0
      000E41 E4               [12]  670 	clr	a
      000E42 F2               [24]  671 	movx	@r0,a
      000E43 08               [12]  672 	inc	r0
      000E44 74 60            [12]  673 	mov	a,#0x60
      000E46 F2               [24]  674 	movx	@r0,a
      000E47 78 E0            [12]  675 	mov	r0,#__w5500_read_PARM_4
      000E49 74 01            [12]  676 	mov	a,#0x01
      000E4B F2               [24]  677 	movx	@r0,a
      000E4C 08               [12]  678 	inc	r0
      000E4D E4               [12]  679 	clr	a
      000E4E F2               [24]  680 	movx	@r0,a
      000E4F 90 00 2C         [24]  681 	mov	dptr,#0x002c
      000E52 12 12 06         [24]  682 	lcall	__w5500_read
                                    683 ;	W5500.c:43: return (small_buffer[0]);
      000E55 78 AD            [12]  684 	mov	r0,#_small_buffer
      000E57 E2               [24]  685 	movx	a,@r0
      000E58 F5 82            [12]  686 	mov	dpl,a
                                    687 ;	W5500.c:44: }
      000E5A 22               [24]  688 	ret
                                    689 ;------------------------------------------------------------
                                    690 ;Allocation info for local variables in function '_w5500_get_SIR'
                                    691 ;------------------------------------------------------------
                                    692 ;	W5500.c:46: unsigned char _w5500_get_SIR() {
                                    693 ;	-----------------------------------------
                                    694 ;	 function _w5500_get_SIR
                                    695 ;	-----------------------------------------
      000E5B                        696 __w5500_get_SIR:
                                    697 ;	W5500.c:47: _w5500_read(0x0017, 0x00, small_buffer, 1);
      000E5B 78 DD            [12]  698 	mov	r0,#__w5500_read_PARM_3
      000E5D 74 AD            [12]  699 	mov	a,#_small_buffer
      000E5F F2               [24]  700 	movx	@r0,a
      000E60 08               [12]  701 	inc	r0
      000E61 E4               [12]  702 	clr	a
      000E62 F2               [24]  703 	movx	@r0,a
      000E63 08               [12]  704 	inc	r0
      000E64 74 60            [12]  705 	mov	a,#0x60
      000E66 F2               [24]  706 	movx	@r0,a
      000E67 78 DC            [12]  707 	mov	r0,#__w5500_read_PARM_2
      000E69 E4               [12]  708 	clr	a
      000E6A F2               [24]  709 	movx	@r0,a
      000E6B 78 E0            [12]  710 	mov	r0,#__w5500_read_PARM_4
      000E6D 04               [12]  711 	inc	a
      000E6E F2               [24]  712 	movx	@r0,a
      000E6F 08               [12]  713 	inc	r0
      000E70 E4               [12]  714 	clr	a
      000E71 F2               [24]  715 	movx	@r0,a
      000E72 90 00 17         [24]  716 	mov	dptr,#0x0017
      000E75 12 12 06         [24]  717 	lcall	__w5500_read
                                    718 ;	W5500.c:48: return (small_buffer[0]);
      000E78 78 AD            [12]  719 	mov	r0,#_small_buffer
      000E7A E2               [24]  720 	movx	a,@r0
      000E7B F5 82            [12]  721 	mov	dpl,a
                                    722 ;	W5500.c:49: }
      000E7D 22               [24]  723 	ret
                                    724 ;------------------------------------------------------------
                                    725 ;Allocation info for local variables in function '_w5500_set_IMR'
                                    726 ;------------------------------------------------------------
                                    727 ;	W5500.c:52: void _w5500_set_IMR(unsigned char socket) {
                                    728 ;	-----------------------------------------
                                    729 ;	 function _w5500_set_IMR
                                    730 ;	-----------------------------------------
      000E7E                        731 __w5500_set_IMR:
      000E7E AF 82            [24]  732 	mov	r7,dpl
                                    733 ;	W5500.c:53: small_buffer[0] = 0x04;
      000E80 78 AD            [12]  734 	mov	r0,#_small_buffer
      000E82 74 04            [12]  735 	mov	a,#0x04
      000E84 F2               [24]  736 	movx	@r0,a
                                    737 ;	W5500.c:54: _w5500_write(SOCKETN_IMR, (socket * 4) + 1, small_buffer, 1);
      000E85 EF               [12]  738 	mov	a,r7
      000E86 2F               [12]  739 	add	a,r7
      000E87 25 E0            [12]  740 	add	a,acc
      000E89 78 E2            [12]  741 	mov	r0,#__w5500_write_PARM_2
      000E8B 04               [12]  742 	inc	a
      000E8C F2               [24]  743 	movx	@r0,a
      000E8D 78 E3            [12]  744 	mov	r0,#__w5500_write_PARM_3
      000E8F 74 AD            [12]  745 	mov	a,#_small_buffer
      000E91 F2               [24]  746 	movx	@r0,a
      000E92 08               [12]  747 	inc	r0
      000E93 E4               [12]  748 	clr	a
      000E94 F2               [24]  749 	movx	@r0,a
      000E95 08               [12]  750 	inc	r0
      000E96 74 60            [12]  751 	mov	a,#0x60
      000E98 F2               [24]  752 	movx	@r0,a
      000E99 78 E6            [12]  753 	mov	r0,#__w5500_write_PARM_4
      000E9B 74 01            [12]  754 	mov	a,#0x01
      000E9D F2               [24]  755 	movx	@r0,a
      000E9E 08               [12]  756 	inc	r0
      000E9F E4               [12]  757 	clr	a
      000EA0 F2               [24]  758 	movx	@r0,a
      000EA1 90 00 2C         [24]  759 	mov	dptr,#0x002c
                                    760 ;	W5500.c:55: }
      000EA4 02 12 7E         [24]  761 	ljmp	__w5500_write
                                    762 ;------------------------------------------------------------
                                    763 ;Allocation info for local variables in function '_w5500_get_SIMR'
                                    764 ;------------------------------------------------------------
                                    765 ;	W5500.c:58: unsigned char _w5500_get_SIMR() {
                                    766 ;	-----------------------------------------
                                    767 ;	 function _w5500_get_SIMR
                                    768 ;	-----------------------------------------
      000EA7                        769 __w5500_get_SIMR:
                                    770 ;	W5500.c:59: _w5500_read(0x0018, 0x00, small_buffer, 1);
      000EA7 78 DD            [12]  771 	mov	r0,#__w5500_read_PARM_3
      000EA9 74 AD            [12]  772 	mov	a,#_small_buffer
      000EAB F2               [24]  773 	movx	@r0,a
      000EAC 08               [12]  774 	inc	r0
      000EAD E4               [12]  775 	clr	a
      000EAE F2               [24]  776 	movx	@r0,a
      000EAF 08               [12]  777 	inc	r0
      000EB0 74 60            [12]  778 	mov	a,#0x60
      000EB2 F2               [24]  779 	movx	@r0,a
      000EB3 78 DC            [12]  780 	mov	r0,#__w5500_read_PARM_2
      000EB5 E4               [12]  781 	clr	a
      000EB6 F2               [24]  782 	movx	@r0,a
      000EB7 78 E0            [12]  783 	mov	r0,#__w5500_read_PARM_4
      000EB9 04               [12]  784 	inc	a
      000EBA F2               [24]  785 	movx	@r0,a
      000EBB 08               [12]  786 	inc	r0
      000EBC E4               [12]  787 	clr	a
      000EBD F2               [24]  788 	movx	@r0,a
      000EBE 90 00 18         [24]  789 	mov	dptr,#0x0018
      000EC1 12 12 06         [24]  790 	lcall	__w5500_read
                                    791 ;	W5500.c:60: return (small_buffer[0]);
      000EC4 78 AD            [12]  792 	mov	r0,#_small_buffer
      000EC6 E2               [24]  793 	movx	a,@r0
      000EC7 F5 82            [12]  794 	mov	dpl,a
                                    795 ;	W5500.c:61: }
      000EC9 22               [24]  796 	ret
                                    797 ;------------------------------------------------------------
                                    798 ;Allocation info for local variables in function '_w5500_clear_SNIR'
                                    799 ;------------------------------------------------------------
                                    800 ;	W5500.c:63: void _w5500_clear_SNIR(unsigned char socket) {
                                    801 ;	-----------------------------------------
                                    802 ;	 function _w5500_clear_SNIR
                                    803 ;	-----------------------------------------
      000ECA                        804 __w5500_clear_SNIR:
      000ECA AF 82            [24]  805 	mov	r7,dpl
                                    806 ;	W5500.c:64: small_buffer[0] = 0xFF;
      000ECC 78 AD            [12]  807 	mov	r0,#_small_buffer
      000ECE 74 FF            [12]  808 	mov	a,#0xff
      000ED0 F2               [24]  809 	movx	@r0,a
                                    810 ;	W5500.c:65: _w5500_write(0x0002, (socket * 4) + 1, small_buffer, 1);
      000ED1 EF               [12]  811 	mov	a,r7
      000ED2 2F               [12]  812 	add	a,r7
      000ED3 25 E0            [12]  813 	add	a,acc
      000ED5 78 E2            [12]  814 	mov	r0,#__w5500_write_PARM_2
      000ED7 04               [12]  815 	inc	a
      000ED8 F2               [24]  816 	movx	@r0,a
      000ED9 78 E3            [12]  817 	mov	r0,#__w5500_write_PARM_3
      000EDB 74 AD            [12]  818 	mov	a,#_small_buffer
      000EDD F2               [24]  819 	movx	@r0,a
      000EDE 08               [12]  820 	inc	r0
      000EDF E4               [12]  821 	clr	a
      000EE0 F2               [24]  822 	movx	@r0,a
      000EE1 08               [12]  823 	inc	r0
      000EE2 74 60            [12]  824 	mov	a,#0x60
      000EE4 F2               [24]  825 	movx	@r0,a
      000EE5 78 E6            [12]  826 	mov	r0,#__w5500_write_PARM_4
      000EE7 74 01            [12]  827 	mov	a,#0x01
      000EE9 F2               [24]  828 	movx	@r0,a
      000EEA 08               [12]  829 	inc	r0
      000EEB E4               [12]  830 	clr	a
      000EEC F2               [24]  831 	movx	@r0,a
      000EED 90 00 02         [24]  832 	mov	dptr,#0x0002
                                    833 ;	W5500.c:66: }
      000EF0 02 12 7E         [24]  834 	ljmp	__w5500_write
                                    835 ;------------------------------------------------------------
                                    836 ;Allocation info for local variables in function '_w5500_get_SNIR'
                                    837 ;------------------------------------------------------------
                                    838 ;	W5500.c:68: unsigned char _w5500_get_SNIR(unsigned char socket) {
                                    839 ;	-----------------------------------------
                                    840 ;	 function _w5500_get_SNIR
                                    841 ;	-----------------------------------------
      000EF3                        842 __w5500_get_SNIR:
                                    843 ;	W5500.c:69: _w5500_read(0x0002, (socket * 4) + 1, small_buffer, 1);
      000EF3 E5 82            [12]  844 	mov	a,dpl
      000EF5 25 82            [12]  845 	add	a,dpl
      000EF7 25 E0            [12]  846 	add	a,acc
      000EF9 78 DC            [12]  847 	mov	r0,#__w5500_read_PARM_2
      000EFB 04               [12]  848 	inc	a
      000EFC F2               [24]  849 	movx	@r0,a
      000EFD 78 DD            [12]  850 	mov	r0,#__w5500_read_PARM_3
      000EFF 74 AD            [12]  851 	mov	a,#_small_buffer
      000F01 F2               [24]  852 	movx	@r0,a
      000F02 08               [12]  853 	inc	r0
      000F03 E4               [12]  854 	clr	a
      000F04 F2               [24]  855 	movx	@r0,a
      000F05 08               [12]  856 	inc	r0
      000F06 74 60            [12]  857 	mov	a,#0x60
      000F08 F2               [24]  858 	movx	@r0,a
      000F09 78 E0            [12]  859 	mov	r0,#__w5500_read_PARM_4
      000F0B 74 01            [12]  860 	mov	a,#0x01
      000F0D F2               [24]  861 	movx	@r0,a
      000F0E 08               [12]  862 	inc	r0
      000F0F E4               [12]  863 	clr	a
      000F10 F2               [24]  864 	movx	@r0,a
      000F11 90 00 02         [24]  865 	mov	dptr,#0x0002
      000F14 12 12 06         [24]  866 	lcall	__w5500_read
                                    867 ;	W5500.c:70: return (small_buffer[0]);
      000F17 78 AD            [12]  868 	mov	r0,#_small_buffer
      000F19 E2               [24]  869 	movx	a,@r0
      000F1A F5 82            [12]  870 	mov	dpl,a
                                    871 ;	W5500.c:71: }
      000F1C 22               [24]  872 	ret
                                    873 ;------------------------------------------------------------
                                    874 ;Allocation info for local variables in function '_w5500_get_status'
                                    875 ;------------------------------------------------------------
                                    876 ;	W5500.c:74: unsigned char _w5500_get_status(unsigned char socket) {
                                    877 ;	-----------------------------------------
                                    878 ;	 function _w5500_get_status
                                    879 ;	-----------------------------------------
      000F1D                        880 __w5500_get_status:
                                    881 ;	W5500.c:75: _w5500_read(0x03, (socket * 4) + 1, small_buffer, 1);
      000F1D E5 82            [12]  882 	mov	a,dpl
      000F1F 25 82            [12]  883 	add	a,dpl
      000F21 25 E0            [12]  884 	add	a,acc
      000F23 78 DC            [12]  885 	mov	r0,#__w5500_read_PARM_2
      000F25 04               [12]  886 	inc	a
      000F26 F2               [24]  887 	movx	@r0,a
      000F27 78 DD            [12]  888 	mov	r0,#__w5500_read_PARM_3
      000F29 74 AD            [12]  889 	mov	a,#_small_buffer
      000F2B F2               [24]  890 	movx	@r0,a
      000F2C 08               [12]  891 	inc	r0
      000F2D E4               [12]  892 	clr	a
      000F2E F2               [24]  893 	movx	@r0,a
      000F2F 08               [12]  894 	inc	r0
      000F30 74 60            [12]  895 	mov	a,#0x60
      000F32 F2               [24]  896 	movx	@r0,a
      000F33 78 E0            [12]  897 	mov	r0,#__w5500_read_PARM_4
      000F35 74 01            [12]  898 	mov	a,#0x01
      000F37 F2               [24]  899 	movx	@r0,a
      000F38 08               [12]  900 	inc	r0
      000F39 E4               [12]  901 	clr	a
      000F3A F2               [24]  902 	movx	@r0,a
      000F3B 90 00 03         [24]  903 	mov	dptr,#0x0003
      000F3E 12 12 06         [24]  904 	lcall	__w5500_read
                                    905 ;	W5500.c:76: return small_buffer[0];
      000F41 78 AD            [12]  906 	mov	r0,#_small_buffer
      000F43 E2               [24]  907 	movx	a,@r0
      000F44 F5 82            [12]  908 	mov	dpl,a
                                    909 ;	W5500.c:77: }
      000F46 22               [24]  910 	ret
                                    911 ;------------------------------------------------------------
                                    912 ;Allocation info for local variables in function '_w5500_listen'
                                    913 ;------------------------------------------------------------
                                    914 ;	W5500.c:79: void _w5500_listen(unsigned char socket) {
                                    915 ;	-----------------------------------------
                                    916 ;	 function _w5500_listen
                                    917 ;	-----------------------------------------
      000F47                        918 __w5500_listen:
      000F47 AF 82            [24]  919 	mov	r7,dpl
                                    920 ;	W5500.c:80: small_buffer[0] = 0x02;
      000F49 78 AD            [12]  921 	mov	r0,#_small_buffer
      000F4B 74 02            [12]  922 	mov	a,#0x02
      000F4D F2               [24]  923 	movx	@r0,a
                                    924 ;	W5500.c:81: _w5500_write(SOCKETN_COMMAND, (socket * 4) + 1, small_buffer, 1);
      000F4E EF               [12]  925 	mov	a,r7
      000F4F 2F               [12]  926 	add	a,r7
      000F50 25 E0            [12]  927 	add	a,acc
      000F52 78 E2            [12]  928 	mov	r0,#__w5500_write_PARM_2
      000F54 04               [12]  929 	inc	a
      000F55 F2               [24]  930 	movx	@r0,a
      000F56 78 E3            [12]  931 	mov	r0,#__w5500_write_PARM_3
      000F58 74 AD            [12]  932 	mov	a,#_small_buffer
      000F5A F2               [24]  933 	movx	@r0,a
      000F5B 08               [12]  934 	inc	r0
      000F5C E4               [12]  935 	clr	a
      000F5D F2               [24]  936 	movx	@r0,a
      000F5E 08               [12]  937 	inc	r0
      000F5F 74 60            [12]  938 	mov	a,#0x60
      000F61 F2               [24]  939 	movx	@r0,a
      000F62 78 E6            [12]  940 	mov	r0,#__w5500_write_PARM_4
      000F64 74 01            [12]  941 	mov	a,#0x01
      000F66 F2               [24]  942 	movx	@r0,a
      000F67 08               [12]  943 	inc	r0
      000F68 E4               [12]  944 	clr	a
      000F69 F2               [24]  945 	movx	@r0,a
      000F6A 90 00 01         [24]  946 	mov	dptr,#0x0001
                                    947 ;	W5500.c:82: }
      000F6D 02 12 7E         [24]  948 	ljmp	__w5500_write
                                    949 ;------------------------------------------------------------
                                    950 ;Allocation info for local variables in function '_w5500_set_sourceport'
                                    951 ;------------------------------------------------------------
                                    952 ;	W5500.c:89: void _w5500_set_sourceport(unsigned char socket, unsigned int port) {
                                    953 ;	-----------------------------------------
                                    954 ;	 function _w5500_set_sourceport
                                    955 ;	-----------------------------------------
      000F70                        956 __w5500_set_sourceport:
      000F70 AF 82            [24]  957 	mov	r7,dpl
                                    958 ;	W5500.c:90: small_buffer[0] = port >> 8;
      000F72 78 D1            [12]  959 	mov	r0,#(__w5500_set_sourceport_PARM_2 + 1)
      000F74 E2               [24]  960 	movx	a,@r0
      000F75 78 AD            [12]  961 	mov	r0,#_small_buffer
      000F77 F2               [24]  962 	movx	@r0,a
                                    963 ;	W5500.c:91: small_buffer[1] = port & 0xFF;
      000F78 78 D0            [12]  964 	mov	r0,#__w5500_set_sourceport_PARM_2
      000F7A E2               [24]  965 	movx	a,@r0
      000F7B FE               [12]  966 	mov	r6,a
      000F7C 78 AE            [12]  967 	mov	r0,#(_small_buffer + 0x0001)
      000F7E F2               [24]  968 	movx	@r0,a
                                    969 ;	W5500.c:92: _w5500_write(SOCKETN_SOURCEPORT, (socket * 4) + 1, small_buffer, 2);
      000F7F EF               [12]  970 	mov	a,r7
      000F80 2F               [12]  971 	add	a,r7
      000F81 25 E0            [12]  972 	add	a,acc
      000F83 78 E2            [12]  973 	mov	r0,#__w5500_write_PARM_2
      000F85 04               [12]  974 	inc	a
      000F86 F2               [24]  975 	movx	@r0,a
      000F87 78 E3            [12]  976 	mov	r0,#__w5500_write_PARM_3
      000F89 74 AD            [12]  977 	mov	a,#_small_buffer
      000F8B F2               [24]  978 	movx	@r0,a
      000F8C 08               [12]  979 	inc	r0
      000F8D E4               [12]  980 	clr	a
      000F8E F2               [24]  981 	movx	@r0,a
      000F8F 08               [12]  982 	inc	r0
      000F90 74 60            [12]  983 	mov	a,#0x60
      000F92 F2               [24]  984 	movx	@r0,a
      000F93 78 E6            [12]  985 	mov	r0,#__w5500_write_PARM_4
      000F95 74 02            [12]  986 	mov	a,#0x02
      000F97 F2               [24]  987 	movx	@r0,a
      000F98 08               [12]  988 	inc	r0
      000F99 E4               [12]  989 	clr	a
      000F9A F2               [24]  990 	movx	@r0,a
      000F9B 90 00 04         [24]  991 	mov	dptr,#0x0004
                                    992 ;	W5500.c:93: }
      000F9E 02 12 7E         [24]  993 	ljmp	__w5500_write
                                    994 ;------------------------------------------------------------
                                    995 ;Allocation info for local variables in function '_w5500_set_remoteport'
                                    996 ;------------------------------------------------------------
                                    997 ;	W5500.c:95: void _w5500_set_remoteport(unsigned char socket, unsigned int port) {
                                    998 ;	-----------------------------------------
                                    999 ;	 function _w5500_set_remoteport
                                   1000 ;	-----------------------------------------
      000FA1                       1001 __w5500_set_remoteport:
      000FA1 AF 82            [24] 1002 	mov	r7,dpl
                                   1003 ;	W5500.c:96: small_buffer[0] = port >> 8;
      000FA3 78 D3            [12] 1004 	mov	r0,#(__w5500_set_remoteport_PARM_2 + 1)
      000FA5 E2               [24] 1005 	movx	a,@r0
      000FA6 78 AD            [12] 1006 	mov	r0,#_small_buffer
      000FA8 F2               [24] 1007 	movx	@r0,a
                                   1008 ;	W5500.c:97: small_buffer[1] = port & 0xFF;
      000FA9 78 D2            [12] 1009 	mov	r0,#__w5500_set_remoteport_PARM_2
      000FAB E2               [24] 1010 	movx	a,@r0
      000FAC FE               [12] 1011 	mov	r6,a
      000FAD 78 AE            [12] 1012 	mov	r0,#(_small_buffer + 0x0001)
      000FAF F2               [24] 1013 	movx	@r0,a
                                   1014 ;	W5500.c:98: _w5500_write(SOCKETN_DEST_PORT, (socket * 4) + 1, small_buffer, 2);
      000FB0 EF               [12] 1015 	mov	a,r7
      000FB1 2F               [12] 1016 	add	a,r7
      000FB2 25 E0            [12] 1017 	add	a,acc
      000FB4 78 E2            [12] 1018 	mov	r0,#__w5500_write_PARM_2
      000FB6 04               [12] 1019 	inc	a
      000FB7 F2               [24] 1020 	movx	@r0,a
      000FB8 78 E3            [12] 1021 	mov	r0,#__w5500_write_PARM_3
      000FBA 74 AD            [12] 1022 	mov	a,#_small_buffer
      000FBC F2               [24] 1023 	movx	@r0,a
      000FBD 08               [12] 1024 	inc	r0
      000FBE E4               [12] 1025 	clr	a
      000FBF F2               [24] 1026 	movx	@r0,a
      000FC0 08               [12] 1027 	inc	r0
      000FC1 74 60            [12] 1028 	mov	a,#0x60
      000FC3 F2               [24] 1029 	movx	@r0,a
      000FC4 78 E6            [12] 1030 	mov	r0,#__w5500_write_PARM_4
      000FC6 74 02            [12] 1031 	mov	a,#0x02
      000FC8 F2               [24] 1032 	movx	@r0,a
      000FC9 08               [12] 1033 	inc	r0
      000FCA E4               [12] 1034 	clr	a
      000FCB F2               [24] 1035 	movx	@r0,a
      000FCC 90 00 10         [24] 1036 	mov	dptr,#0x0010
                                   1037 ;	W5500.c:99: }
      000FCF 02 12 7E         [24] 1038 	ljmp	__w5500_write
                                   1039 ;------------------------------------------------------------
                                   1040 ;Allocation info for local variables in function '_w5500_set_destinationip'
                                   1041 ;------------------------------------------------------------
                                   1042 ;	W5500.c:101: void _w5500_set_destinationip(unsigned char socket, unsigned char* ip) {
                                   1043 ;	-----------------------------------------
                                   1044 ;	 function _w5500_set_destinationip
                                   1045 ;	-----------------------------------------
      000FD2                       1046 __w5500_set_destinationip:
                                   1047 ;	W5500.c:102: _w5500_write(SOCKETN_DEST_IP, (socket * 4) + 1, ip, 4);
      000FD2 E5 82            [12] 1048 	mov	a,dpl
      000FD4 25 82            [12] 1049 	add	a,dpl
      000FD6 25 E0            [12] 1050 	add	a,acc
      000FD8 78 E2            [12] 1051 	mov	r0,#__w5500_write_PARM_2
      000FDA 04               [12] 1052 	inc	a
      000FDB F2               [24] 1053 	movx	@r0,a
      000FDC 78 D4            [12] 1054 	mov	r0,#__w5500_set_destinationip_PARM_2
      000FDE 79 E3            [12] 1055 	mov	r1,#__w5500_write_PARM_3
      000FE0 E2               [24] 1056 	movx	a,@r0
      000FE1 F3               [24] 1057 	movx	@r1,a
      000FE2 08               [12] 1058 	inc	r0
      000FE3 E2               [24] 1059 	movx	a,@r0
      000FE4 09               [12] 1060 	inc	r1
      000FE5 F3               [24] 1061 	movx	@r1,a
      000FE6 08               [12] 1062 	inc	r0
      000FE7 E2               [24] 1063 	movx	a,@r0
      000FE8 09               [12] 1064 	inc	r1
      000FE9 F3               [24] 1065 	movx	@r1,a
      000FEA 78 E6            [12] 1066 	mov	r0,#__w5500_write_PARM_4
      000FEC 74 04            [12] 1067 	mov	a,#0x04
      000FEE F2               [24] 1068 	movx	@r0,a
      000FEF 08               [12] 1069 	inc	r0
      000FF0 E4               [12] 1070 	clr	a
      000FF1 F2               [24] 1071 	movx	@r0,a
      000FF2 90 00 0C         [24] 1072 	mov	dptr,#0x000c
                                   1073 ;	W5500.c:103: }
      000FF5 02 12 7E         [24] 1074 	ljmp	__w5500_write
                                   1075 ;------------------------------------------------------------
                                   1076 ;Allocation info for local variables in function '_w5500_writeto'
                                   1077 ;------------------------------------------------------------
                                   1078 ;	W5500.c:106: void _w5500_writeto(unsigned char socket, const unsigned char* data, unsigned char length) {
                                   1079 ;	-----------------------------------------
                                   1080 ;	 function _w5500_writeto
                                   1081 ;	-----------------------------------------
      000FF8                       1082 __w5500_writeto:
                                   1083 ;	W5500.c:108: _w5500_read(0x24, (socket * 4) + 1, small_buffer, 2);
      000FF8 E5 82            [12] 1084 	mov	a,dpl
      000FFA 25 82            [12] 1085 	add	a,dpl
      000FFC 25 E0            [12] 1086 	add	a,acc
      000FFE FF               [12] 1087 	mov	r7,a
      000FFF 04               [12] 1088 	inc	a
      001000 FE               [12] 1089 	mov	r6,a
      001001 78 DD            [12] 1090 	mov	r0,#__w5500_read_PARM_3
      001003 74 AD            [12] 1091 	mov	a,#_small_buffer
      001005 F2               [24] 1092 	movx	@r0,a
      001006 08               [12] 1093 	inc	r0
      001007 E4               [12] 1094 	clr	a
      001008 F2               [24] 1095 	movx	@r0,a
      001009 08               [12] 1096 	inc	r0
      00100A 74 60            [12] 1097 	mov	a,#0x60
      00100C F2               [24] 1098 	movx	@r0,a
      00100D 78 DC            [12] 1099 	mov	r0,#__w5500_read_PARM_2
      00100F EE               [12] 1100 	mov	a,r6
      001010 F2               [24] 1101 	movx	@r0,a
      001011 78 E0            [12] 1102 	mov	r0,#__w5500_read_PARM_4
      001013 74 02            [12] 1103 	mov	a,#0x02
      001015 F2               [24] 1104 	movx	@r0,a
      001016 08               [12] 1105 	inc	r0
      001017 E4               [12] 1106 	clr	a
      001018 F2               [24] 1107 	movx	@r0,a
      001019 90 00 24         [24] 1108 	mov	dptr,#0x0024
      00101C C0 07            [24] 1109 	push	ar7
      00101E C0 06            [24] 1110 	push	ar6
      001020 12 12 06         [24] 1111 	lcall	__w5500_read
      001023 D0 06            [24] 1112 	pop	ar6
      001025 D0 07            [24] 1113 	pop	ar7
                                   1114 ;	W5500.c:109: easy_math = (small_buffer[0] << 8) | small_buffer[1];
      001027 78 AD            [12] 1115 	mov	r0,#_small_buffer
      001029 E2               [24] 1116 	movx	a,@r0
      00102A FC               [12] 1117 	mov	r4,a
      00102B 7D 00            [12] 1118 	mov	r5,#0x00
      00102D 78 AE            [12] 1119 	mov	r0,#(_small_buffer + 0x0001)
      00102F E2               [24] 1120 	movx	a,@r0
      001030 7A 00            [12] 1121 	mov	r2,#0x00
      001032 42 05            [12] 1122 	orl	ar5,a
      001034 EA               [12] 1123 	mov	a,r2
      001035 42 04            [12] 1124 	orl	ar4,a
                                   1125 ;	W5500.c:110: _w5500_write(easy_math, (socket * 4) + 2, data, length);
      001037 78 E2            [12] 1126 	mov	r0,#__w5500_write_PARM_2
      001039 74 02            [12] 1127 	mov	a,#0x02
      00103B 2F               [12] 1128 	add	a,r7
      00103C F2               [24] 1129 	movx	@r0,a
      00103D 78 DA            [12] 1130 	mov	r0,#__w5500_writeto_PARM_3
      00103F 79 E6            [12] 1131 	mov	r1,#__w5500_write_PARM_4
      001041 E2               [24] 1132 	movx	a,@r0
      001042 F3               [24] 1133 	movx	@r1,a
      001043 09               [12] 1134 	inc	r1
      001044 E4               [12] 1135 	clr	a
      001045 F3               [24] 1136 	movx	@r1,a
      001046 78 D7            [12] 1137 	mov	r0,#__w5500_writeto_PARM_2
      001048 79 E3            [12] 1138 	mov	r1,#__w5500_write_PARM_3
      00104A E2               [24] 1139 	movx	a,@r0
      00104B F3               [24] 1140 	movx	@r1,a
      00104C 08               [12] 1141 	inc	r0
      00104D E2               [24] 1142 	movx	a,@r0
      00104E 09               [12] 1143 	inc	r1
      00104F F3               [24] 1144 	movx	@r1,a
      001050 08               [12] 1145 	inc	r0
      001051 E2               [24] 1146 	movx	a,@r0
      001052 09               [12] 1147 	inc	r1
      001053 F3               [24] 1148 	movx	@r1,a
      001054 8D 82            [24] 1149 	mov	dpl,r5
      001056 8C 83            [24] 1150 	mov	dph,r4
      001058 C0 06            [24] 1151 	push	ar6
      00105A C0 05            [24] 1152 	push	ar5
      00105C C0 04            [24] 1153 	push	ar4
      00105E 12 12 7E         [24] 1154 	lcall	__w5500_write
      001061 D0 04            [24] 1155 	pop	ar4
      001063 D0 05            [24] 1156 	pop	ar5
      001065 D0 06            [24] 1157 	pop	ar6
                                   1158 ;	W5500.c:111: easy_math += length;
      001067 78 DA            [12] 1159 	mov	r0,#__w5500_writeto_PARM_3
      001069 E2               [24] 1160 	movx	a,@r0
      00106A 7F 00            [12] 1161 	mov	r7,#0x00
      00106C 2D               [12] 1162 	add	a,r5
      00106D FB               [12] 1163 	mov	r3,a
      00106E EF               [12] 1164 	mov	a,r7
      00106F 3C               [12] 1165 	addc	a,r4
                                   1166 ;	W5500.c:112: small_buffer[0] = easy_math >> 8;
      001070 FD               [12] 1167 	mov	r5,a
      001071 78 AD            [12] 1168 	mov	r0,#_small_buffer
      001073 F2               [24] 1169 	movx	@r0,a
                                   1170 ;	W5500.c:113: small_buffer[1] = easy_math & 0xFF;
      001074 78 AE            [12] 1171 	mov	r0,#(_small_buffer + 0x0001)
      001076 EB               [12] 1172 	mov	a,r3
      001077 F2               [24] 1173 	movx	@r0,a
                                   1174 ;	W5500.c:114: _w5500_write(0x24, (socket * 4) + 1, small_buffer, 2);
      001078 78 E3            [12] 1175 	mov	r0,#__w5500_write_PARM_3
      00107A 74 AD            [12] 1176 	mov	a,#_small_buffer
      00107C F2               [24] 1177 	movx	@r0,a
      00107D 08               [12] 1178 	inc	r0
      00107E E4               [12] 1179 	clr	a
      00107F F2               [24] 1180 	movx	@r0,a
      001080 08               [12] 1181 	inc	r0
      001081 74 60            [12] 1182 	mov	a,#0x60
      001083 F2               [24] 1183 	movx	@r0,a
      001084 78 E2            [12] 1184 	mov	r0,#__w5500_write_PARM_2
      001086 EE               [12] 1185 	mov	a,r6
      001087 F2               [24] 1186 	movx	@r0,a
      001088 78 E6            [12] 1187 	mov	r0,#__w5500_write_PARM_4
      00108A 74 02            [12] 1188 	mov	a,#0x02
      00108C F2               [24] 1189 	movx	@r0,a
      00108D 08               [12] 1190 	inc	r0
      00108E E4               [12] 1191 	clr	a
      00108F F2               [24] 1192 	movx	@r0,a
      001090 90 00 24         [24] 1193 	mov	dptr,#0x0024
                                   1194 ;	W5500.c:115: }
      001093 02 12 7E         [24] 1195 	ljmp	__w5500_write
                                   1196 ;------------------------------------------------------------
                                   1197 ;Allocation info for local variables in function '_w5500_bytesinbuffer'
                                   1198 ;------------------------------------------------------------
                                   1199 ;	W5500.c:117: unsigned int _w5500_bytesinbuffer(unsigned char socket) {
                                   1200 ;	-----------------------------------------
                                   1201 ;	 function _w5500_bytesinbuffer
                                   1202 ;	-----------------------------------------
      001096                       1203 __w5500_bytesinbuffer:
                                   1204 ;	W5500.c:118: _w5500_read(0x26, (socket * 4) + 1, small_buffer, 2);
      001096 E5 82            [12] 1205 	mov	a,dpl
      001098 25 82            [12] 1206 	add	a,dpl
      00109A 25 E0            [12] 1207 	add	a,acc
      00109C 78 DC            [12] 1208 	mov	r0,#__w5500_read_PARM_2
      00109E 04               [12] 1209 	inc	a
      00109F F2               [24] 1210 	movx	@r0,a
      0010A0 78 DD            [12] 1211 	mov	r0,#__w5500_read_PARM_3
      0010A2 74 AD            [12] 1212 	mov	a,#_small_buffer
      0010A4 F2               [24] 1213 	movx	@r0,a
      0010A5 08               [12] 1214 	inc	r0
      0010A6 E4               [12] 1215 	clr	a
      0010A7 F2               [24] 1216 	movx	@r0,a
      0010A8 08               [12] 1217 	inc	r0
      0010A9 74 60            [12] 1218 	mov	a,#0x60
      0010AB F2               [24] 1219 	movx	@r0,a
      0010AC 78 E0            [12] 1220 	mov	r0,#__w5500_read_PARM_4
      0010AE 74 02            [12] 1221 	mov	a,#0x02
      0010B0 F2               [24] 1222 	movx	@r0,a
      0010B1 08               [12] 1223 	inc	r0
      0010B2 E4               [12] 1224 	clr	a
      0010B3 F2               [24] 1225 	movx	@r0,a
      0010B4 90 00 26         [24] 1226 	mov	dptr,#0x0026
      0010B7 12 12 06         [24] 1227 	lcall	__w5500_read
                                   1228 ;	W5500.c:119: return (small_buffer[0] << 8) | small_buffer[1];
      0010BA 78 AD            [12] 1229 	mov	r0,#_small_buffer
      0010BC E2               [24] 1230 	movx	a,@r0
      0010BD FE               [12] 1231 	mov	r6,a
      0010BE 7F 00            [12] 1232 	mov	r7,#0x00
      0010C0 78 AE            [12] 1233 	mov	r0,#(_small_buffer + 0x0001)
      0010C2 E2               [24] 1234 	movx	a,@r0
      0010C3 7C 00            [12] 1235 	mov	r4,#0x00
      0010C5 4F               [12] 1236 	orl	a,r7
      0010C6 F5 82            [12] 1237 	mov	dpl,a
      0010C8 EC               [12] 1238 	mov	a,r4
      0010C9 4E               [12] 1239 	orl	a,r6
      0010CA F5 83            [12] 1240 	mov	dph,a
                                   1241 ;	W5500.c:120: }
      0010CC 22               [24] 1242 	ret
                                   1243 ;------------------------------------------------------------
                                   1244 ;Allocation info for local variables in function '_w5500_readchar'
                                   1245 ;------------------------------------------------------------
                                   1246 ;	W5500.c:189: unsigned char _w5500_readchar(unsigned char socket) {
                                   1247 ;	-----------------------------------------
                                   1248 ;	 function _w5500_readchar
                                   1249 ;	-----------------------------------------
      0010CD                       1250 __w5500_readchar:
      0010CD AF 82            [24] 1251 	mov	r7,dpl
                                   1252 ;	W5500.c:190: unsigned char val = 0;
      0010CF 78 DB            [12] 1253 	mov	r0,#__w5500_readchar_val_65536_58
      0010D1 E4               [12] 1254 	clr	a
      0010D2 F2               [24] 1255 	movx	@r0,a
                                   1256 ;	W5500.c:192: _w5500_read(0x28, (socket * 4) + 1, small_buffer, 2);
      0010D3 EF               [12] 1257 	mov	a,r7
      0010D4 2F               [12] 1258 	add	a,r7
      0010D5 25 E0            [12] 1259 	add	a,acc
      0010D7 FF               [12] 1260 	mov	r7,a
      0010D8 04               [12] 1261 	inc	a
      0010D9 FE               [12] 1262 	mov	r6,a
      0010DA 78 DD            [12] 1263 	mov	r0,#__w5500_read_PARM_3
      0010DC 74 AD            [12] 1264 	mov	a,#_small_buffer
      0010DE F2               [24] 1265 	movx	@r0,a
      0010DF 08               [12] 1266 	inc	r0
      0010E0 E4               [12] 1267 	clr	a
      0010E1 F2               [24] 1268 	movx	@r0,a
      0010E2 08               [12] 1269 	inc	r0
      0010E3 74 60            [12] 1270 	mov	a,#0x60
      0010E5 F2               [24] 1271 	movx	@r0,a
      0010E6 78 DC            [12] 1272 	mov	r0,#__w5500_read_PARM_2
      0010E8 EE               [12] 1273 	mov	a,r6
      0010E9 F2               [24] 1274 	movx	@r0,a
      0010EA 78 E0            [12] 1275 	mov	r0,#__w5500_read_PARM_4
      0010EC 74 02            [12] 1276 	mov	a,#0x02
      0010EE F2               [24] 1277 	movx	@r0,a
      0010EF 08               [12] 1278 	inc	r0
      0010F0 E4               [12] 1279 	clr	a
      0010F1 F2               [24] 1280 	movx	@r0,a
      0010F2 90 00 28         [24] 1281 	mov	dptr,#0x0028
      0010F5 C0 07            [24] 1282 	push	ar7
      0010F7 C0 06            [24] 1283 	push	ar6
      0010F9 12 12 06         [24] 1284 	lcall	__w5500_read
      0010FC D0 06            [24] 1285 	pop	ar6
      0010FE D0 07            [24] 1286 	pop	ar7
                                   1287 ;	W5500.c:193: starting_addr = (small_buffer[0] << 8) | small_buffer[1];
      001100 78 AD            [12] 1288 	mov	r0,#_small_buffer
      001102 E2               [24] 1289 	movx	a,@r0
      001103 FC               [12] 1290 	mov	r4,a
      001104 7D 00            [12] 1291 	mov	r5,#0x00
      001106 78 AE            [12] 1292 	mov	r0,#(_small_buffer + 0x0001)
      001108 E2               [24] 1293 	movx	a,@r0
      001109 7A 00            [12] 1294 	mov	r2,#0x00
      00110B 42 05            [12] 1295 	orl	ar5,a
      00110D EA               [12] 1296 	mov	a,r2
      00110E 42 04            [12] 1297 	orl	ar4,a
                                   1298 ;	W5500.c:194: _w5500_read(starting_addr, (socket * 4) + 3, &val, 1);
      001110 78 DC            [12] 1299 	mov	r0,#__w5500_read_PARM_2
      001112 74 03            [12] 1300 	mov	a,#0x03
      001114 2F               [12] 1301 	add	a,r7
      001115 F2               [24] 1302 	movx	@r0,a
      001116 78 DD            [12] 1303 	mov	r0,#__w5500_read_PARM_3
      001118 74 DB            [12] 1304 	mov	a,#__w5500_readchar_val_65536_58
      00111A F2               [24] 1305 	movx	@r0,a
      00111B 08               [12] 1306 	inc	r0
      00111C E4               [12] 1307 	clr	a
      00111D F2               [24] 1308 	movx	@r0,a
      00111E 08               [12] 1309 	inc	r0
      00111F 74 60            [12] 1310 	mov	a,#0x60
      001121 F2               [24] 1311 	movx	@r0,a
      001122 78 E0            [12] 1312 	mov	r0,#__w5500_read_PARM_4
      001124 74 01            [12] 1313 	mov	a,#0x01
      001126 F2               [24] 1314 	movx	@r0,a
      001127 08               [12] 1315 	inc	r0
      001128 E4               [12] 1316 	clr	a
      001129 F2               [24] 1317 	movx	@r0,a
      00112A 8D 82            [24] 1318 	mov	dpl,r5
      00112C 8C 83            [24] 1319 	mov	dph,r4
      00112E C0 06            [24] 1320 	push	ar6
      001130 C0 05            [24] 1321 	push	ar5
      001132 C0 04            [24] 1322 	push	ar4
      001134 12 12 06         [24] 1323 	lcall	__w5500_read
      001137 D0 04            [24] 1324 	pop	ar4
      001139 D0 05            [24] 1325 	pop	ar5
      00113B D0 06            [24] 1326 	pop	ar6
                                   1327 ;	W5500.c:195: starting_addr++;
      00113D 0D               [12] 1328 	inc	r5
      00113E BD 00 01         [24] 1329 	cjne	r5,#0x00,00103$
      001141 0C               [12] 1330 	inc	r4
      001142                       1331 00103$:
                                   1332 ;	W5500.c:196: small_buffer[0] = starting_addr >> 8;
      001142 8C 07            [24] 1333 	mov	ar7,r4
      001144 78 AD            [12] 1334 	mov	r0,#_small_buffer
      001146 EF               [12] 1335 	mov	a,r7
      001147 F2               [24] 1336 	movx	@r0,a
                                   1337 ;	W5500.c:197: small_buffer[1] = starting_addr & 0xFF;
      001148 78 AE            [12] 1338 	mov	r0,#(_small_buffer + 0x0001)
      00114A ED               [12] 1339 	mov	a,r5
      00114B F2               [24] 1340 	movx	@r0,a
                                   1341 ;	W5500.c:198: _w5500_write(0x28, (socket  * 4) + 1, small_buffer, 2);
      00114C 78 E3            [12] 1342 	mov	r0,#__w5500_write_PARM_3
      00114E 74 AD            [12] 1343 	mov	a,#_small_buffer
      001150 F2               [24] 1344 	movx	@r0,a
      001151 08               [12] 1345 	inc	r0
      001152 E4               [12] 1346 	clr	a
      001153 F2               [24] 1347 	movx	@r0,a
      001154 08               [12] 1348 	inc	r0
      001155 74 60            [12] 1349 	mov	a,#0x60
      001157 F2               [24] 1350 	movx	@r0,a
      001158 78 E2            [12] 1351 	mov	r0,#__w5500_write_PARM_2
      00115A EE               [12] 1352 	mov	a,r6
      00115B F2               [24] 1353 	movx	@r0,a
      00115C 78 E6            [12] 1354 	mov	r0,#__w5500_write_PARM_4
      00115E 74 02            [12] 1355 	mov	a,#0x02
      001160 F2               [24] 1356 	movx	@r0,a
      001161 08               [12] 1357 	inc	r0
      001162 E4               [12] 1358 	clr	a
      001163 F2               [24] 1359 	movx	@r0,a
      001164 90 00 28         [24] 1360 	mov	dptr,#0x0028
      001167 C0 06            [24] 1361 	push	ar6
      001169 12 12 7E         [24] 1362 	lcall	__w5500_write
      00116C D0 06            [24] 1363 	pop	ar6
                                   1364 ;	W5500.c:199: small_buffer[0] = 0x40;
      00116E 78 AD            [12] 1365 	mov	r0,#_small_buffer
      001170 74 40            [12] 1366 	mov	a,#0x40
      001172 F2               [24] 1367 	movx	@r0,a
                                   1368 ;	W5500.c:200: _w5500_write(SOCKETN_COMMAND, (socket * 4) + 1, small_buffer, 1);
      001173 78 E3            [12] 1369 	mov	r0,#__w5500_write_PARM_3
      001175 74 AD            [12] 1370 	mov	a,#_small_buffer
      001177 F2               [24] 1371 	movx	@r0,a
      001178 08               [12] 1372 	inc	r0
      001179 E4               [12] 1373 	clr	a
      00117A F2               [24] 1374 	movx	@r0,a
      00117B 08               [12] 1375 	inc	r0
      00117C 74 60            [12] 1376 	mov	a,#0x60
      00117E F2               [24] 1377 	movx	@r0,a
      00117F 78 E2            [12] 1378 	mov	r0,#__w5500_write_PARM_2
      001181 EE               [12] 1379 	mov	a,r6
      001182 F2               [24] 1380 	movx	@r0,a
      001183 78 E6            [12] 1381 	mov	r0,#__w5500_write_PARM_4
      001185 74 01            [12] 1382 	mov	a,#0x01
      001187 F2               [24] 1383 	movx	@r0,a
      001188 08               [12] 1384 	inc	r0
      001189 E4               [12] 1385 	clr	a
      00118A F2               [24] 1386 	movx	@r0,a
      00118B 90 00 01         [24] 1387 	mov	dptr,#0x0001
      00118E 12 12 7E         [24] 1388 	lcall	__w5500_write
                                   1389 ;	W5500.c:201: return val;
      001191 78 DB            [12] 1390 	mov	r0,#__w5500_readchar_val_65536_58
      001193 E2               [24] 1391 	movx	a,@r0
      001194 F5 82            [12] 1392 	mov	dpl,a
                                   1393 ;	W5500.c:202: }
      001196 22               [24] 1394 	ret
                                   1395 ;------------------------------------------------------------
                                   1396 ;Allocation info for local variables in function '_w5500_send'
                                   1397 ;------------------------------------------------------------
                                   1398 ;	W5500.c:204: void _w5500_send(unsigned char socket) {
                                   1399 ;	-----------------------------------------
                                   1400 ;	 function _w5500_send
                                   1401 ;	-----------------------------------------
      001197                       1402 __w5500_send:
      001197 AF 82            [24] 1403 	mov	r7,dpl
                                   1404 ;	W5500.c:205: small_buffer[0] = 0x20;
      001199 78 AD            [12] 1405 	mov	r0,#_small_buffer
      00119B 74 20            [12] 1406 	mov	a,#0x20
      00119D F2               [24] 1407 	movx	@r0,a
                                   1408 ;	W5500.c:206: _w5500_write(SOCKETN_COMMAND, (socket * 4) + 1, small_buffer, 1);
      00119E EF               [12] 1409 	mov	a,r7
      00119F 2F               [12] 1410 	add	a,r7
      0011A0 25 E0            [12] 1411 	add	a,acc
      0011A2 78 E2            [12] 1412 	mov	r0,#__w5500_write_PARM_2
      0011A4 04               [12] 1413 	inc	a
      0011A5 F2               [24] 1414 	movx	@r0,a
      0011A6 78 E3            [12] 1415 	mov	r0,#__w5500_write_PARM_3
      0011A8 74 AD            [12] 1416 	mov	a,#_small_buffer
      0011AA F2               [24] 1417 	movx	@r0,a
      0011AB 08               [12] 1418 	inc	r0
      0011AC E4               [12] 1419 	clr	a
      0011AD F2               [24] 1420 	movx	@r0,a
      0011AE 08               [12] 1421 	inc	r0
      0011AF 74 60            [12] 1422 	mov	a,#0x60
      0011B1 F2               [24] 1423 	movx	@r0,a
      0011B2 78 E6            [12] 1424 	mov	r0,#__w5500_write_PARM_4
      0011B4 74 01            [12] 1425 	mov	a,#0x01
      0011B6 F2               [24] 1426 	movx	@r0,a
      0011B7 08               [12] 1427 	inc	r0
      0011B8 E4               [12] 1428 	clr	a
      0011B9 F2               [24] 1429 	movx	@r0,a
      0011BA 90 00 01         [24] 1430 	mov	dptr,#0x0001
                                   1431 ;	W5500.c:207: }
      0011BD 02 12 7E         [24] 1432 	ljmp	__w5500_write
                                   1433 ;------------------------------------------------------------
                                   1434 ;Allocation info for local variables in function '_w5500_get_version'
                                   1435 ;------------------------------------------------------------
                                   1436 ;	W5500.c:209: unsigned char _w5500_get_version() {
                                   1437 ;	-----------------------------------------
                                   1438 ;	 function _w5500_get_version
                                   1439 ;	-----------------------------------------
      0011C0                       1440 __w5500_get_version:
                                   1441 ;	W5500.c:210: _w5500_read(0x0039, 0x00, small_buffer, 1);
      0011C0 78 DD            [12] 1442 	mov	r0,#__w5500_read_PARM_3
      0011C2 74 AD            [12] 1443 	mov	a,#_small_buffer
      0011C4 F2               [24] 1444 	movx	@r0,a
      0011C5 08               [12] 1445 	inc	r0
      0011C6 E4               [12] 1446 	clr	a
      0011C7 F2               [24] 1447 	movx	@r0,a
      0011C8 08               [12] 1448 	inc	r0
      0011C9 74 60            [12] 1449 	mov	a,#0x60
      0011CB F2               [24] 1450 	movx	@r0,a
      0011CC 78 DC            [12] 1451 	mov	r0,#__w5500_read_PARM_2
      0011CE E4               [12] 1452 	clr	a
      0011CF F2               [24] 1453 	movx	@r0,a
      0011D0 78 E0            [12] 1454 	mov	r0,#__w5500_read_PARM_4
      0011D2 04               [12] 1455 	inc	a
      0011D3 F2               [24] 1456 	movx	@r0,a
      0011D4 08               [12] 1457 	inc	r0
      0011D5 E4               [12] 1458 	clr	a
      0011D6 F2               [24] 1459 	movx	@r0,a
      0011D7 90 00 39         [24] 1460 	mov	dptr,#0x0039
      0011DA 12 12 06         [24] 1461 	lcall	__w5500_read
                                   1462 ;	W5500.c:211: return small_buffer[0];
      0011DD 78 AD            [12] 1463 	mov	r0,#_small_buffer
      0011DF E2               [24] 1464 	movx	a,@r0
      0011E0 F5 82            [12] 1465 	mov	dpl,a
                                   1466 ;	W5500.c:212: }
      0011E2 22               [24] 1467 	ret
                                   1468 ;------------------------------------------------------------
                                   1469 ;Allocation info for local variables in function '_w5500_get_phyconfig'
                                   1470 ;------------------------------------------------------------
                                   1471 ;	W5500.c:214: unsigned char _w5500_get_phyconfig() {
                                   1472 ;	-----------------------------------------
                                   1473 ;	 function _w5500_get_phyconfig
                                   1474 ;	-----------------------------------------
      0011E3                       1475 __w5500_get_phyconfig:
                                   1476 ;	W5500.c:215: _w5500_read(0x002E, 0x00, small_buffer, 1);
      0011E3 78 DD            [12] 1477 	mov	r0,#__w5500_read_PARM_3
      0011E5 74 AD            [12] 1478 	mov	a,#_small_buffer
      0011E7 F2               [24] 1479 	movx	@r0,a
      0011E8 08               [12] 1480 	inc	r0
      0011E9 E4               [12] 1481 	clr	a
      0011EA F2               [24] 1482 	movx	@r0,a
      0011EB 08               [12] 1483 	inc	r0
      0011EC 74 60            [12] 1484 	mov	a,#0x60
      0011EE F2               [24] 1485 	movx	@r0,a
      0011EF 78 DC            [12] 1486 	mov	r0,#__w5500_read_PARM_2
      0011F1 E4               [12] 1487 	clr	a
      0011F2 F2               [24] 1488 	movx	@r0,a
      0011F3 78 E0            [12] 1489 	mov	r0,#__w5500_read_PARM_4
      0011F5 04               [12] 1490 	inc	a
      0011F6 F2               [24] 1491 	movx	@r0,a
      0011F7 08               [12] 1492 	inc	r0
      0011F8 E4               [12] 1493 	clr	a
      0011F9 F2               [24] 1494 	movx	@r0,a
      0011FA 90 00 2E         [24] 1495 	mov	dptr,#0x002e
      0011FD 12 12 06         [24] 1496 	lcall	__w5500_read
                                   1497 ;	W5500.c:216: return small_buffer[0];
      001200 78 AD            [12] 1498 	mov	r0,#_small_buffer
      001202 E2               [24] 1499 	movx	a,@r0
      001203 F5 82            [12] 1500 	mov	dpl,a
                                   1501 ;	W5500.c:217: }
      001205 22               [24] 1502 	ret
                                   1503 ;------------------------------------------------------------
                                   1504 ;Allocation info for local variables in function '_w5500_read'
                                   1505 ;------------------------------------------------------------
                                   1506 ;sloc0                     Allocated with name '__w5500_read_sloc0_1_0'
                                   1507 ;------------------------------------------------------------
                                   1508 ;	W5500.c:219: void _w5500_read(unsigned int oa, unsigned char bsb, unsigned char* data, unsigned int length) {
                                   1509 ;	-----------------------------------------
                                   1510 ;	 function _w5500_read
                                   1511 ;	-----------------------------------------
      001206                       1512 __w5500_read:
      001206 AE 82            [24] 1513 	mov	r6,dpl
      001208 AF 83            [24] 1514 	mov	r7,dph
                                   1515 ;	W5500.c:220: unsigned char oa_high = oa >> 8;
      00120A 8F 05            [24] 1516 	mov	ar5,r7
                                   1517 ;	W5500.c:221: unsigned char oa_low = oa & 0xFF;
                                   1518 ;	W5500.c:222: unsigned char true_bsb = ((bsb << 3) | (0 << 2)); // | om, this was removed because om always == 0 in my use cases
      00120C 78 DC            [12] 1519 	mov	r0,#__w5500_read_PARM_2
      00120E E2               [24] 1520 	movx	a,@r0
      00120F C4               [12] 1521 	swap	a
      001210 03               [12] 1522 	rr	a
      001211 54 F8            [12] 1523 	anl	a,#0xf8
      001213 FF               [12] 1524 	mov	r7,a
                                   1525 ;	W5500.c:224: _spigeneric_frame_start();
      001214 C0 07            [24] 1526 	push	ar7
      001216 C0 06            [24] 1527 	push	ar6
      001218 C0 05            [24] 1528 	push	ar5
      00121A 12 0A D7         [24] 1529 	lcall	__spigeneric_frame_start
      00121D D0 05            [24] 1530 	pop	ar5
                                   1531 ;	W5500.c:226: _spigeneric_spit_byte(oa_high);
      00121F 8D 82            [24] 1532 	mov	dpl,r5
      001221 12 0A FC         [24] 1533 	lcall	__spigeneric_spit_byte
      001224 D0 06            [24] 1534 	pop	ar6
                                   1535 ;	W5500.c:227: _spigeneric_spit_byte(oa_low);
      001226 8E 82            [24] 1536 	mov	dpl,r6
      001228 12 0A FC         [24] 1537 	lcall	__spigeneric_spit_byte
      00122B D0 07            [24] 1538 	pop	ar7
                                   1539 ;	W5500.c:228: _spigeneric_spit_byte(true_bsb);
      00122D 8F 82            [24] 1540 	mov	dpl,r7
      00122F 12 0A FC         [24] 1541 	lcall	__spigeneric_spit_byte
                                   1542 ;	W5500.c:229: while (length--)    *(data++) = _spigeneric_spit_byte(0x00);
      001232 78 DD            [12] 1543 	mov	r0,#__w5500_read_PARM_3
      001234 E2               [24] 1544 	movx	a,@r0
      001235 FD               [12] 1545 	mov	r5,a
      001236 08               [12] 1546 	inc	r0
      001237 E2               [24] 1547 	movx	a,@r0
      001238 FE               [12] 1548 	mov	r6,a
      001239 08               [12] 1549 	inc	r0
      00123A E2               [24] 1550 	movx	a,@r0
      00123B FF               [12] 1551 	mov	r7,a
      00123C 78 E0            [12] 1552 	mov	r0,#__w5500_read_PARM_4
      00123E E2               [24] 1553 	movx	a,@r0
      00123F F5 08            [12] 1554 	mov	__w5500_read_sloc0_1_0,a
      001241 08               [12] 1555 	inc	r0
      001242 E2               [24] 1556 	movx	a,@r0
      001243 F5 09            [12] 1557 	mov	(__w5500_read_sloc0_1_0 + 1),a
      001245                       1558 00101$:
      001245 AA 08            [24] 1559 	mov	r2,__w5500_read_sloc0_1_0
      001247 AC 09            [24] 1560 	mov	r4,(__w5500_read_sloc0_1_0 + 1)
      001249 15 08            [12] 1561 	dec	__w5500_read_sloc0_1_0
      00124B 74 FF            [12] 1562 	mov	a,#0xff
      00124D B5 08 02         [24] 1563 	cjne	a,__w5500_read_sloc0_1_0,00115$
      001250 15 09            [12] 1564 	dec	(__w5500_read_sloc0_1_0 + 1)
      001252                       1565 00115$:
      001252 EA               [12] 1566 	mov	a,r2
      001253 4C               [12] 1567 	orl	a,r4
      001254 60 25            [24] 1568 	jz	00103$
      001256 75 82 00         [24] 1569 	mov	dpl,#0x00
      001259 C0 07            [24] 1570 	push	ar7
      00125B C0 06            [24] 1571 	push	ar6
      00125D C0 05            [24] 1572 	push	ar5
      00125F 12 0A FC         [24] 1573 	lcall	__spigeneric_spit_byte
      001262 AC 82            [24] 1574 	mov	r4,dpl
      001264 D0 05            [24] 1575 	pop	ar5
      001266 D0 06            [24] 1576 	pop	ar6
      001268 D0 07            [24] 1577 	pop	ar7
      00126A 8D 82            [24] 1578 	mov	dpl,r5
      00126C 8E 83            [24] 1579 	mov	dph,r6
      00126E 8F F0            [24] 1580 	mov	b,r7
      001270 EC               [12] 1581 	mov	a,r4
      001271 12 12 F6         [24] 1582 	lcall	__gptrput
      001274 A3               [24] 1583 	inc	dptr
      001275 AD 82            [24] 1584 	mov	r5,dpl
      001277 AE 83            [24] 1585 	mov	r6,dph
      001279 80 CA            [24] 1586 	sjmp	00101$
      00127B                       1587 00103$:
                                   1588 ;	W5500.c:231: _spigeneric_frame_end();
                                   1589 ;	W5500.c:232: }
      00127B 02 0A E2         [24] 1590 	ljmp	__spigeneric_frame_end
                                   1591 ;------------------------------------------------------------
                                   1592 ;Allocation info for local variables in function '_w5500_write'
                                   1593 ;------------------------------------------------------------
                                   1594 ;sloc0                     Allocated with name '__w5500_write_sloc0_1_0'
                                   1595 ;------------------------------------------------------------
                                   1596 ;	W5500.c:234: void _w5500_write(unsigned int oa, unsigned char bsb, const unsigned char* data, unsigned int length) {
                                   1597 ;	-----------------------------------------
                                   1598 ;	 function _w5500_write
                                   1599 ;	-----------------------------------------
      00127E                       1600 __w5500_write:
      00127E AE 82            [24] 1601 	mov	r6,dpl
      001280 AF 83            [24] 1602 	mov	r7,dph
                                   1603 ;	W5500.c:235: unsigned char oa_high = oa >> 8;
      001282 8F 05            [24] 1604 	mov	ar5,r7
                                   1605 ;	W5500.c:236: unsigned char oa_low = oa & 0xFF;
                                   1606 ;	W5500.c:237: unsigned char true_bsb = ((bsb << 3) | (1 << 2)); // | om, this was removed because om always == 0 in my use cases
      001284 78 E2            [12] 1607 	mov	r0,#__w5500_write_PARM_2
      001286 E2               [24] 1608 	movx	a,@r0
      001287 C4               [12] 1609 	swap	a
      001288 03               [12] 1610 	rr	a
      001289 54 F8            [12] 1611 	anl	a,#0xf8
      00128B FF               [12] 1612 	mov	r7,a
      00128C 43 07 04         [24] 1613 	orl	ar7,#0x04
                                   1614 ;	W5500.c:239: _spigeneric_frame_start();
      00128F C0 07            [24] 1615 	push	ar7
      001291 C0 06            [24] 1616 	push	ar6
      001293 C0 05            [24] 1617 	push	ar5
      001295 12 0A D7         [24] 1618 	lcall	__spigeneric_frame_start
      001298 D0 05            [24] 1619 	pop	ar5
                                   1620 ;	W5500.c:241: _spigeneric_spit_byte(oa_high);
      00129A 8D 82            [24] 1621 	mov	dpl,r5
      00129C 12 0A FC         [24] 1622 	lcall	__spigeneric_spit_byte
      00129F D0 06            [24] 1623 	pop	ar6
                                   1624 ;	W5500.c:242: _spigeneric_spit_byte(oa_low);
      0012A1 8E 82            [24] 1625 	mov	dpl,r6
      0012A3 12 0A FC         [24] 1626 	lcall	__spigeneric_spit_byte
      0012A6 D0 07            [24] 1627 	pop	ar7
                                   1628 ;	W5500.c:243: _spigeneric_spit_byte(true_bsb);
      0012A8 8F 82            [24] 1629 	mov	dpl,r7
      0012AA 12 0A FC         [24] 1630 	lcall	__spigeneric_spit_byte
                                   1631 ;	W5500.c:244: while (length--) _spigeneric_spit_byte(*(data++));
      0012AD 78 E3            [12] 1632 	mov	r0,#__w5500_write_PARM_3
      0012AF E2               [24] 1633 	movx	a,@r0
      0012B0 FD               [12] 1634 	mov	r5,a
      0012B1 08               [12] 1635 	inc	r0
      0012B2 E2               [24] 1636 	movx	a,@r0
      0012B3 FE               [12] 1637 	mov	r6,a
      0012B4 08               [12] 1638 	inc	r0
      0012B5 E2               [24] 1639 	movx	a,@r0
      0012B6 FF               [12] 1640 	mov	r7,a
      0012B7 78 E6            [12] 1641 	mov	r0,#__w5500_write_PARM_4
      0012B9 E2               [24] 1642 	movx	a,@r0
      0012BA F5 0A            [12] 1643 	mov	__w5500_write_sloc0_1_0,a
      0012BC 08               [12] 1644 	inc	r0
      0012BD E2               [24] 1645 	movx	a,@r0
      0012BE F5 0B            [12] 1646 	mov	(__w5500_write_sloc0_1_0 + 1),a
      0012C0                       1647 00101$:
      0012C0 AA 0A            [24] 1648 	mov	r2,__w5500_write_sloc0_1_0
      0012C2 AC 0B            [24] 1649 	mov	r4,(__w5500_write_sloc0_1_0 + 1)
      0012C4 15 0A            [12] 1650 	dec	__w5500_write_sloc0_1_0
      0012C6 74 FF            [12] 1651 	mov	a,#0xff
      0012C8 B5 0A 02         [24] 1652 	cjne	a,__w5500_write_sloc0_1_0,00115$
      0012CB 15 0B            [12] 1653 	dec	(__w5500_write_sloc0_1_0 + 1)
      0012CD                       1654 00115$:
      0012CD EA               [12] 1655 	mov	a,r2
      0012CE 4C               [12] 1656 	orl	a,r4
      0012CF 60 22            [24] 1657 	jz	00103$
      0012D1 8D 82            [24] 1658 	mov	dpl,r5
      0012D3 8E 83            [24] 1659 	mov	dph,r6
      0012D5 8F F0            [24] 1660 	mov	b,r7
      0012D7 12 14 C7         [24] 1661 	lcall	__gptrget
      0012DA FC               [12] 1662 	mov	r4,a
      0012DB A3               [24] 1663 	inc	dptr
      0012DC AD 82            [24] 1664 	mov	r5,dpl
      0012DE AE 83            [24] 1665 	mov	r6,dph
      0012E0 8C 82            [24] 1666 	mov	dpl,r4
      0012E2 C0 07            [24] 1667 	push	ar7
      0012E4 C0 06            [24] 1668 	push	ar6
      0012E6 C0 05            [24] 1669 	push	ar5
      0012E8 12 0A FC         [24] 1670 	lcall	__spigeneric_spit_byte
      0012EB D0 05            [24] 1671 	pop	ar5
      0012ED D0 06            [24] 1672 	pop	ar6
      0012EF D0 07            [24] 1673 	pop	ar7
      0012F1 80 CD            [24] 1674 	sjmp	00101$
      0012F3                       1675 00103$:
                                   1676 ;	W5500.c:246: _spigeneric_frame_end();
                                   1677 ;	W5500.c:247: }
      0012F3 02 0A E2         [24] 1678 	ljmp	__spigeneric_frame_end
                                   1679 	.area CSEG    (CODE)
                                   1680 	.area CONST   (CODE)
                                   1681 	.area XINIT   (CODE)
                                   1682 	.area CABS    (ABS,CODE)
